Index: b/arch/arm/mach-imx/imx9/Kconfig
===================================================================
--- a/arch/arm/mach-imx/imx9/Kconfig
+++ b/arch/arm/mach-imx/imx9/Kconfig
@@ -68,6 +68,11 @@ config TARGET_IMX93_9X9_QSB
 	select IMX93
 	select IMX9_LPDDR4X
 
+config TARGET_MYD_LMX93X
+    bool "myir lmx93x"
+    select OF_BOARD_FIXUP
+    select IMX93
+
 config TARGET_IMX95_19X19_EVK
 	bool "imx95_19x19_evk"
 	select IMX95
@@ -90,6 +95,7 @@ source "board/variscite/imx93_var_som/Kc
 source "board/freescale/imx93_qsb/Kconfig"
 source "board/freescale/imx95_evk/Kconfig"
 source "board/toradex/verdin-imx95/Kconfig"
+source "board/myir/myd_lmx93x/Kconfig"
 
 endif
 
Index: b/board/myir/myd_lmx93x/Kconfig
===================================================================
--- /dev/null
+++ b/board/myir/myd_lmx93x/Kconfig
@@ -0,0 +1,25 @@
+if TARGET_MYD_LMX93X
+
+config SYS_BOARD
+	default "myd_lmx93x"
+
+config SYS_VENDOR
+	default "myir"
+
+config SYS_CONFIG_NAME
+	default "myd_lmx93x"
+
+choice
+    prompt "DDR Type"
+
+config MYD_LMX93X_LPDDR4X_1G
+    bool "LPDDR4X 1G"
+    select IMX9_LPDDR4X
+
+config MYD_LMX93X_LPDDR4X_2G
+    bool "LPDDR4X 2G"
+    select IMX9_LPDDR4X
+
+
+endchoice
+endif
Index: b/board/myir/myd_lmx93x/Makefile
===================================================================
--- /dev/null
+++ b/board/myir/myd_lmx93x/Makefile
@@ -0,0 +1,13 @@
+#
+# Copyright 2022 NXP
+#
+# SPDX-License-Identifier:      GPL-2.0+
+#
+
+obj-y += myir_lmx93x.o i2c_eeprom.o
+
+ifdef CONFIG_SPL_BUILD
+obj-y += spl.o
+obj-$(CONFIG_MYD_LMX93X_LPDDR4X_1G) += lpddr4x_timing_1g.o 
+obj-$(CONFIG_MYD_LMX93X_LPDDR4X_2G) += lpddr4x_timing_2g.o
+endif
Index: b/board/myir/myd_lmx93x/i2c_eeprom.c
===================================================================
--- /dev/null
+++ b/board/myir/myd_lmx93x/i2c_eeprom.c
@@ -0,0 +1,84 @@
+// SPDX-License-Identifier: MIT
+#include <common.h>
+#include <env.h>
+#include <i2c.h>
+#include <i2c_eeprom.h>
+#include <net.h>
+#include <eeprom.h>
+#include <eeprom_layout.h>
+#include "i2c_eeprom.h"
+#include <linux/delay.h>
+static struct id_eeprom eeprom;
+
+int show_eeprom(void)
+{
+	char safe_string[64] = {0};
+	char sn[64];
+	int i, len;
+	u8 *p;
+	u8 *m;
+	char buf[ARP_HLEN_ASCII + 1];
+	char buf1[ARP_HLEN_ASCII + 1];
+
+	puts("Module INFO:\n");
+	/* pn */
+	len = strlen(eeprom.pn);
+	if (len >= sizeof(eeprom.pn))//eliminate eeprom initial values
+		return -1;
+	memcpy(safe_string, eeprom.pn, len);
+	safe_string[len] = '\0';
+	if (len > 0) {
+		printf(">>>PN=%s\n", safe_string);
+		env_set("PN", safe_string);
+	} else {
+		puts("unknown hardware variant\n");
+	}
+	/* Serial number */
+	len = strlen(eeprom.sn);
+	if (len >= sizeof(eeprom.sn))
+		return -1;
+	memcpy(sn, eeprom.sn, len);
+	sn[len] = '\0';
+	if (len > 0) {
+		printf(">>>SN=%s\n", sn);
+		env_set("SN", sn);
+	} else {
+		puts("nunknown serial number\n");
+	}
+	/* MAC address  */
+	p = eeprom.mac0;
+	if (!is_valid_ethaddr(p)) {
+		printf("Not valid MAC address in eeprom!\n");
+		return 0;
+	}
+	printf(">>>MAC0=%pM\n", p);
+	sprintf(buf, "%pM", p);
+	env_set("ethaddr", buf);
+	m = eeprom.mac1;
+	if (!is_valid_ethaddr(m)) {
+		printf("Not valid MAC1 address in eeprom!\n");
+		return 0;
+	}
+	printf(">>>MAC1=%pM\n", m);
+	sprintf(buf1, "%pM", m);
+	env_set("eth1addr", buf1);
+	return 0;
+}
+
+int read_eeprom(void)
+{
+	struct udevice *dev;
+	int ret = 0;
+	//at24LC32
+	mdelay(200);
+	ret = i2c_get_chip_for_busnum(0, 0x50, 2, &dev);
+	if (ret) {
+		printf("Cannot find EEPROM !\n");
+		return ret;
+	}
+	i2c_set_chip_offset_len(dev, 2);
+	ret = dm_i2c_read(dev, 0x00, (uchar *)&eeprom, sizeof(eeprom));
+	if (ret)
+		printf("Read eeprom fail !\n");
+	return ret;
+}
Index: b/board/myir/myd_lmx93x/i2c_eeprom.h
===================================================================
--- /dev/null
+++ b/board/myir/myd_lmx93x/i2c_eeprom.h
@@ -0,0 +1,15 @@
+/* SPDX-License-Identifier: MIT */
+#ifndef __I2C_EEPROM_H
+#define __I2C_EEPROM_H
+
+struct id_eeprom {
+	u8 pn[32];/*0x00 ... 0x1f*/
+	u8 sn[32];/*0x20 ... 0x3f*/
+	u8 mac0[8];/*0x40 ... 0x47*/
+	u8 mac1[8];/*0x48 ... 0x4f*/
+} __packed;
+
+int show_eeprom(void);
+int read_eeprom(void);
+int read_board_id(void);//no user
+#endif //__I2C_EEPROM_H
Index: b/board/myir/myd_lmx93x/lpddr4x_timing_1g.c
===================================================================
--- /dev/null
+++ b/board/myir/myd_lmx93x/lpddr4x_timing_1g.c
@@ -0,0 +1,2009 @@
+/*
+ * Copyright 2024 NXP
+ *
+ * SPDX-License-Identifier: GPL-2.0+
+ *
+ * Code generated with DDR Tool v2.0.0_6.4.
+ */
+
+#include <linux/kernel.h>
+#include <asm/arch/ddr.h>
+
+struct dram_cfg_param ddr_ddrc_cfg[] = {
+    /** Initialize DDRC registers **/
+    {0x4e300110, 0x44100001},
+    {0x4e300000, 0x8000bf},
+    {0x4e300008, 0x0},
+    {0x4e300080, 0x80000412},
+    {0x4e300084, 0x0},
+    {0x4e300114, 0x1002},
+    {0x4e300260, 0x80},
+    {0x4e300f04, 0x80},
+    {0x4e300800, 0x43b30002},
+    {0x4e300804, 0x1f1f1f1f},
+    {0x4e301000, 0x0},
+    {0x4e301240, 0x0},
+    {0x4e301244, 0x0},
+    {0x4e301248, 0x0},
+    {0x4e30124c, 0x0},
+    {0x4e301250, 0x0},
+    {0x4e301254, 0x0},
+    {0x4e301258, 0x0},
+    {0x4e30125c, 0x0},
+
+};
+
+/* dram fsp cfg */
+static struct dram_fsp_cfg ddr_dram_fsp_cfg[] = {
+    {
+        {
+            {0x4e300100, 0x24A0321B},
+            {0x4e300104, 0xF8EE001B},
+            {0x4e300108, 0x2F2E3233},
+            {0x4e30010C, 0x0005C18B},
+            {0x4e300124, 0x1C790000},
+            {0x4e300160, 0x00009102},
+            {0x4e30016C, 0x35F00000},
+            {0x4e300170, 0x8B0B0608},
+            {0x4e300250, 0x00000028},
+            {0x4e300254, 0x00FE00FE},
+            {0x4e300258, 0x00000008},
+            {0x4e30025C, 0x00000400},
+            {0x4e300300, 0x224F2213},
+            {0x4e300304, 0x00FE2213},
+            {0x4e300308, 0x0A380E3D},
+        },
+        {
+            {0x01, 0xE4},
+            {0x02, 0x36},
+            {0x03, 0x32},
+            {0x0b, 0x46},
+            {0x0c, 0x11},
+            {0x0e, 0x11},
+            {0x16, 0x04},
+        },
+        0,
+    },
+    {
+        {
+            {0x4e300100, 0x124F2100},
+            {0x4e300104, 0xF877000E},
+            {0x4e300108, 0x1816E4AA},
+            {0x4e30010C, 0x005101E6},
+            {0x4e300124, 0x0E3C0000},
+            {0x4e300160, 0x00009101},
+            {0x4e30016C, 0x30900000},
+            {0x4e300170, 0x8A0A0508},
+            {0x4e300250, 0x00000014},
+            {0x4e300254, 0x007B007B},
+            {0x4e300258, 0x00000008},
+            {0x4e30025C, 0x00000400},
+        },
+        {
+            {0x01, 0xB4},
+            {0x02, 0x1B},
+            {0x03, 0x32},
+            {0x0b, 0x46},
+            {0x0c, 0x11},
+            {0x0e, 0x11},
+            {0x16, 0x04},
+        },
+        0,
+    },
+    {
+        {
+            {0x4e300100, 0x00051000},
+            {0x4e300104, 0xF855000A},
+            {0x4e300108, 0x6E620A48},
+            {0x4e30010C, 0x0031010D},
+            {0x4e300124, 0x04C50000},
+            {0x4e300160, 0x00009100},
+            {0x4e30016C, 0x30000000},
+            {0x4e300170, 0x89090408},
+            {0x4e300250, 0x00000007},
+            {0x4e300254, 0x00240024},
+            {0x4e300258, 0x00000008},
+            {0x4e30025C, 0x00000400},
+        },
+        {
+            {0x01, 0x94},
+            {0x02, 0x9},
+            {0x03, 0x32},
+            {0x0b, 0x46},
+            {0x0c, 0x11},
+            {0x0e, 0x11},
+            {0x16, 0x04},
+        },
+        1,
+    },
+
+};
+
+/* PHY Initialize Configuration */
+struct dram_cfg_param ddr_ddrphy_cfg[] = {
+    {0x100a0, 0x4},
+    {0x100a1, 0x5},
+    {0x100a2, 0x6},
+    {0x100a3, 0x7},
+    {0x100a4, 0x0},
+    {0x100a5, 0x1},
+    {0x100a6, 0x2},
+    {0x100a7, 0x3},
+    {0x110a0, 0x3},
+    {0x110a1, 0x2},
+    {0x110a2, 0x0},
+    {0x110a3, 0x1},
+    {0x110a4, 0x7},
+    {0x110a5, 0x6},
+    {0x110a6, 0x4},
+    {0x110a7, 0x5},
+    {0x1005f, 0x5ff},
+    {0x1015f, 0x5ff},
+    {0x1105f, 0x5ff},
+    {0x1115f, 0x5ff},
+    {0x11005f, 0x5ff},
+    {0x11015f, 0x5ff},
+    {0x11105f, 0x5ff},
+    {0x11115f, 0x5ff},
+    {0x21005f, 0x5ff},
+    {0x21015f, 0x5ff},
+    {0x21105f, 0x5ff},
+    {0x21115f, 0x5ff},
+    {0x55, 0x1ff},
+    {0x1055, 0x1ff},
+    {0x2055, 0x1ff},
+    {0x200c5, 0x19},
+    {0x1200c5, 0xb},
+    {0x2200c5, 0x7},
+    {0x2002e, 0x2},
+    {0x12002e, 0x2},
+    {0x22002e, 0x2},
+    {0x90204, 0x0},
+    {0x190204, 0x0},
+    {0x290204, 0x0},
+    {0x20024, 0x1e3},
+    {0x2003a, 0x2},
+    {0x2007d, 0x212},
+    {0x2007c, 0x61},
+    {0x120024, 0x1e3},
+    {0x2003a, 0x2},
+    {0x12007d, 0x212},
+    {0x12007c, 0x61},
+    {0x220024, 0x1e3},
+    {0x2003a, 0x2},
+    {0x22007d, 0x212},
+    {0x22007c, 0x61},
+    {0x20056, 0x3},
+    {0x120056, 0x3},
+    {0x220056, 0x3},
+    {0x1004d, 0x600},
+    {0x1014d, 0x600},
+    {0x1104d, 0x600},
+    {0x1114d, 0x600},
+    {0x11004d, 0x600},
+    {0x11014d, 0x600},
+    {0x11104d, 0x600},
+    {0x11114d, 0x600},
+    {0x21004d, 0x600},
+    {0x21014d, 0x600},
+    {0x21104d, 0x600},
+    {0x21114d, 0x600},
+    {0x10049, 0xe00},
+    {0x10149, 0xe00},
+    {0x11049, 0xe00},
+    {0x11149, 0xe00},
+    {0x110049, 0xe00},
+    {0x110149, 0xe00},
+    {0x111049, 0xe00},
+    {0x111149, 0xe00},
+    {0x210049, 0xe00},
+    {0x210149, 0xe00},
+    {0x211049, 0xe00},
+    {0x211149, 0xe00},
+    {0x43, 0x60},
+    {0x1043, 0x60},
+    {0x2043, 0x60},
+    {0x20018, 0x1},
+    {0x20075, 0x4},
+    {0x20050, 0x0},
+    {0x2009b, 0x2},
+    {0x20008, 0x3a5},
+    {0x120008, 0x1d3},
+    {0x220008, 0x9c},
+    {0x20088, 0x9},
+    {0x200b2, 0x10c},
+    {0x10043, 0x5a1},
+    {0x10143, 0x5a1},
+    {0x11043, 0x5a1},
+    {0x11143, 0x5a1},
+    {0x1200b2, 0x10c},
+    {0x110043, 0x5a1},
+    {0x110143, 0x5a1},
+    {0x111043, 0x5a1},
+    {0x111143, 0x5a1},
+    {0x2200b2, 0x10c},
+    {0x210043, 0x5a1},
+    {0x210143, 0x5a1},
+    {0x211043, 0x5a1},
+    {0x211143, 0x5a1},
+    {0x200fa, 0x2},
+    {0x1200fa, 0x2},
+    {0x2200fa, 0x2},
+    {0x20019, 0x1},
+    {0x120019, 0x1},
+    {0x220019, 0x1},
+    {0x200f0, 0x600},
+    {0x200f1, 0x0},
+    {0x200f2, 0x4444},
+    {0x200f3, 0x8888},
+    {0x200f4, 0x5655},
+    {0x200f5, 0x0},
+    {0x200f6, 0x0},
+    {0x200f7, 0xf000},
+    {0x1004a, 0x500},
+    {0x1104a, 0x500},
+    {0x20025, 0x0},
+    {0x2002d, 0x0},
+    {0x12002d, 0x0},
+    {0x22002d, 0x0},
+    {0x2002c, 0x0},
+    {0x20021, 0x0},
+    {0x200c7, 0x21},
+    {0x1200c7, 0x21},
+    {0x200ca, 0x24},
+    {0x1200ca, 0x24},
+
+};
+
+
+/* ddr phy trained csr */
+struct dram_cfg_param ddr_ddrphy_trained_csr[] = {
+    {0x1005f, 0x0},
+    {0x1015f, 0x0},
+    {0x1105f, 0x0},
+    {0x1115f, 0x0},
+    {0x11005f, 0x0},
+    {0x11015f, 0x0},
+    {0x11105f, 0x0},
+    {0x11115f, 0x0},
+    {0x21005f, 0x0},
+    {0x21015f, 0x0},
+    {0x21105f, 0x0},
+    {0x21115f, 0x0},
+    {0x55, 0x0},
+    {0x1055, 0x0},
+    {0x2055, 0x0},
+    {0x200c5, 0x0},
+    {0x1200c5, 0x0},
+    {0x2200c5, 0x0},
+    {0x2002e, 0x0},
+    {0x12002e, 0x0},
+    {0x22002e, 0x0},
+    {0x90204, 0x0},
+    {0x190204, 0x0},
+    {0x290204, 0x0},
+    {0x20024, 0x0},
+    {0x2003a, 0x0},
+    {0x2007d, 0x0},
+    {0x2007c, 0x0},
+    {0x120024, 0x0},
+    {0x12007d, 0x0},
+    {0x12007c, 0x0},
+    {0x220024, 0x0},
+    {0x22007d, 0x0},
+    {0x22007c, 0x0},
+    {0x20056, 0x0},
+    {0x120056, 0x0},
+    {0x220056, 0x0},
+    {0x1004d, 0x0},
+    {0x1014d, 0x0},
+    {0x1104d, 0x0},
+    {0x1114d, 0x0},
+    {0x11004d, 0x0},
+    {0x11014d, 0x0},
+    {0x11104d, 0x0},
+    {0x11114d, 0x0},
+    {0x21004d, 0x0},
+    {0x21014d, 0x0},
+    {0x21104d, 0x0},
+    {0x21114d, 0x0},
+    {0x10049, 0x0},
+    {0x10149, 0x0},
+    {0x11049, 0x0},
+    {0x11149, 0x0},
+    {0x110049, 0x0},
+    {0x110149, 0x0},
+    {0x111049, 0x0},
+    {0x111149, 0x0},
+    {0x210049, 0x0},
+    {0x210149, 0x0},
+    {0x211049, 0x0},
+    {0x211149, 0x0},
+    {0x43, 0x0},
+    {0x1043, 0x0},
+    {0x2043, 0x0},
+    {0x20018, 0x0},
+    {0x20075, 0x0},
+    {0x20050, 0x0},
+    {0x2009b, 0x0},
+    {0x20008, 0x0},
+    {0x120008, 0x0},
+    {0x220008, 0x0},
+    {0x20088, 0x0},
+    {0x200b2, 0x0},
+    {0x10043, 0x0},
+    {0x10143, 0x0},
+    {0x11043, 0x0},
+    {0x11143, 0x0},
+    {0x1200b2, 0x0},
+    {0x110043, 0x0},
+    {0x110143, 0x0},
+    {0x111043, 0x0},
+    {0x111143, 0x0},
+    {0x2200b2, 0x0},
+    {0x210043, 0x0},
+    {0x210143, 0x0},
+    {0x211043, 0x0},
+    {0x211143, 0x0},
+    {0x200fa, 0x0},
+    {0x1200fa, 0x0},
+    {0x2200fa, 0x0},
+    {0x20019, 0x0},
+    {0x120019, 0x0},
+    {0x220019, 0x0},
+    {0x200f0, 0x0},
+    {0x200f1, 0x0},
+    {0x200f2, 0x0},
+    {0x200f3, 0x0},
+    {0x200f4, 0x0},
+    {0x200f5, 0x0},
+    {0x200f6, 0x0},
+    {0x200f7, 0x0},
+    {0x1004a, 0x0},
+    {0x1104a, 0x0},
+    {0x20025, 0x0},
+    {0x2002d, 0x0},
+    {0x12002d, 0x0},
+    {0x22002d, 0x0},
+    {0x2002c, 0x0},
+    {0xd0000, 0x0},
+    {0x90000, 0x0},
+    {0x90001, 0x0},
+    {0x90002, 0x0},
+    {0x90003, 0x0},
+    {0x90004, 0x0},
+    {0x90005, 0x0},
+    {0x90029, 0x0},
+    {0x9002a, 0x0},
+    {0x9002b, 0x0},
+    {0x9002c, 0x0},
+    {0x9002d, 0x0},
+    {0x9002e, 0x0},
+    {0x9002f, 0x0},
+    {0x90030, 0x0},
+    {0x90031, 0x0},
+    {0x90032, 0x0},
+    {0x90033, 0x0},
+    {0x90034, 0x0},
+    {0x90035, 0x0},
+    {0x90036, 0x0},
+    {0x90037, 0x0},
+    {0x90038, 0x0},
+    {0x90039, 0x0},
+    {0x9003a, 0x0},
+    {0x9003b, 0x0},
+    {0x9003c, 0x0},
+    {0x9003d, 0x0},
+    {0x9003e, 0x0},
+    {0x9003f, 0x0},
+    {0x90040, 0x0},
+    {0x90041, 0x0},
+    {0x90042, 0x0},
+    {0x90043, 0x0},
+    {0x90044, 0x0},
+    {0x90045, 0x0},
+    {0x90046, 0x0},
+    {0x90047, 0x0},
+    {0x90048, 0x0},
+    {0x90049, 0x0},
+    {0x9004a, 0x0},
+    {0x9004b, 0x0},
+    {0x9004c, 0x0},
+    {0x9004d, 0x0},
+    {0x9004e, 0x0},
+    {0x9004f, 0x0},
+    {0x90050, 0x0},
+    {0x90051, 0x0},
+    {0x90052, 0x0},
+    {0x90053, 0x0},
+    {0x90054, 0x0},
+    {0x90055, 0x0},
+    {0x90056, 0x0},
+    {0x90057, 0x0},
+    {0x90058, 0x0},
+    {0x90059, 0x0},
+    {0x9005a, 0x0},
+    {0x9005b, 0x0},
+    {0x9005c, 0x0},
+    {0x9005d, 0x0},
+    {0x9005e, 0x0},
+    {0x9005f, 0x0},
+    {0x90060, 0x0},
+    {0x90061, 0x0},
+    {0x90062, 0x0},
+    {0x90063, 0x0},
+    {0x90064, 0x0},
+    {0x90065, 0x0},
+    {0x90066, 0x0},
+    {0x90067, 0x0},
+    {0x90068, 0x0},
+    {0x90069, 0x0},
+    {0x9006a, 0x0},
+    {0x9006b, 0x0},
+    {0x9006c, 0x0},
+    {0x9006d, 0x0},
+    {0x9006e, 0x0},
+    {0x9006f, 0x0},
+    {0x90070, 0x0},
+    {0x90071, 0x0},
+    {0x90072, 0x0},
+    {0x90073, 0x0},
+    {0x90074, 0x0},
+    {0x90075, 0x0},
+    {0x90076, 0x0},
+    {0x90077, 0x0},
+    {0x90078, 0x0},
+    {0x90079, 0x0},
+    {0x9007a, 0x0},
+    {0x9007b, 0x0},
+    {0x9007c, 0x0},
+    {0x9007d, 0x0},
+    {0x9007e, 0x0},
+    {0x9007f, 0x0},
+    {0x90080, 0x0},
+    {0x90081, 0x0},
+    {0x90082, 0x0},
+    {0x90083, 0x0},
+    {0x90084, 0x0},
+    {0x90085, 0x0},
+    {0x90086, 0x0},
+    {0x90087, 0x0},
+    {0x90088, 0x0},
+    {0x90089, 0x0},
+    {0x9008a, 0x0},
+    {0x9008b, 0x0},
+    {0x9008c, 0x0},
+    {0x9008d, 0x0},
+    {0x9008e, 0x0},
+    {0x9008f, 0x0},
+    {0x90090, 0x0},
+    {0x90091, 0x0},
+    {0x90092, 0x0},
+    {0x90093, 0x0},
+    {0x90094, 0x0},
+    {0x90095, 0x0},
+    {0x90096, 0x0},
+    {0x90097, 0x0},
+    {0x90098, 0x0},
+    {0x90099, 0x0},
+    {0x9009a, 0x0},
+    {0x9009b, 0x0},
+    {0x9009c, 0x0},
+    {0x9009d, 0x0},
+    {0x9009e, 0x0},
+    {0x9009f, 0x0},
+    {0x900a0, 0x0},
+    {0x900a1, 0x0},
+    {0x900a2, 0x0},
+    {0x900a3, 0x0},
+    {0x900a4, 0x0},
+    {0x900a5, 0x0},
+    {0x900a6, 0x0},
+    {0x900a7, 0x0},
+    {0x900a8, 0x0},
+    {0x900a9, 0x0},
+    {0x40000, 0x0},
+    {0x40020, 0x0},
+    {0x40040, 0x0},
+    {0x40060, 0x0},
+    {0x40001, 0x0},
+    {0x40021, 0x0},
+    {0x40041, 0x0},
+    {0x40061, 0x0},
+    {0x40002, 0x0},
+    {0x40022, 0x0},
+    {0x40042, 0x0},
+    {0x40062, 0x0},
+    {0x40003, 0x0},
+    {0x40023, 0x0},
+    {0x40043, 0x0},
+    {0x40063, 0x0},
+    {0x40004, 0x0},
+    {0x40024, 0x0},
+    {0x40044, 0x0},
+    {0x40064, 0x0},
+    {0x40005, 0x0},
+    {0x40025, 0x0},
+    {0x40045, 0x0},
+    {0x40065, 0x0},
+    {0x40006, 0x0},
+    {0x40026, 0x0},
+    {0x40046, 0x0},
+    {0x40066, 0x0},
+    {0x40007, 0x0},
+    {0x40027, 0x0},
+    {0x40047, 0x0},
+    {0x40067, 0x0},
+    {0x40008, 0x0},
+    {0x40028, 0x0},
+    {0x40048, 0x0},
+    {0x40068, 0x0},
+    {0x40009, 0x0},
+    {0x40029, 0x0},
+    {0x40049, 0x0},
+    {0x40069, 0x0},
+    {0x4000a, 0x0},
+    {0x4002a, 0x0},
+    {0x4004a, 0x0},
+    {0x4006a, 0x0},
+    {0x4000b, 0x0},
+    {0x4002b, 0x0},
+    {0x4004b, 0x0},
+    {0x4006b, 0x0},
+    {0x4000c, 0x0},
+    {0x4002c, 0x0},
+    {0x4004c, 0x0},
+    {0x4006c, 0x0},
+    {0x4000d, 0x0},
+    {0x4002d, 0x0},
+    {0x4004d, 0x0},
+    {0x4006d, 0x0},
+    {0x4000e, 0x0},
+    {0x4002e, 0x0},
+    {0x4004e, 0x0},
+    {0x4006e, 0x0},
+    {0x4000f, 0x0},
+    {0x4002f, 0x0},
+    {0x4004f, 0x0},
+    {0x4006f, 0x0},
+    {0x40010, 0x0},
+    {0x40030, 0x0},
+    {0x40050, 0x0},
+    {0x40070, 0x0},
+    {0x40011, 0x0},
+    {0x40031, 0x0},
+    {0x40051, 0x0},
+    {0x40071, 0x0},
+    {0x40012, 0x0},
+    {0x40032, 0x0},
+    {0x40052, 0x0},
+    {0x40072, 0x0},
+    {0x40013, 0x0},
+    {0x40033, 0x0},
+    {0x40053, 0x0},
+    {0x40073, 0x0},
+    {0x40014, 0x0},
+    {0x40034, 0x0},
+    {0x40054, 0x0},
+    {0x40074, 0x0},
+    {0x40015, 0x0},
+    {0x40035, 0x0},
+    {0x40055, 0x0},
+    {0x40075, 0x0},
+    {0x40016, 0x0},
+    {0x40036, 0x0},
+    {0x40056, 0x0},
+    {0x40076, 0x0},
+    {0x40017, 0x0},
+    {0x40037, 0x0},
+    {0x40057, 0x0},
+    {0x40077, 0x0},
+    {0x40018, 0x0},
+    {0x40038, 0x0},
+    {0x40058, 0x0},
+    {0x40078, 0x0},
+    {0x40019, 0x0},
+    {0x40039, 0x0},
+    {0x40059, 0x0},
+    {0x40079, 0x0},
+    {0x4001a, 0x0},
+    {0x4003a, 0x0},
+    {0x4005a, 0x0},
+    {0x4007a, 0x0},
+    {0x900aa, 0x0},
+    {0x900ab, 0x0},
+    {0x900ac, 0x0},
+    {0x900ad, 0x0},
+    {0x900ae, 0x0},
+    {0x900af, 0x0},
+    {0x900b0, 0x0},
+    {0x900b1, 0x0},
+    {0x900b2, 0x0},
+    {0x900b3, 0x0},
+    {0x900b4, 0x0},
+    {0x900b5, 0x0},
+    {0x900b6, 0x0},
+    {0x900b7, 0x0},
+    {0x900b8, 0x0},
+    {0x900b9, 0x0},
+    {0x900ba, 0x0},
+    {0x900bb, 0x0},
+    {0x900bc, 0x0},
+    {0x900bd, 0x0},
+    {0x900be, 0x0},
+    {0x900bf, 0x0},
+    {0x900c0, 0x0},
+    {0x900c1, 0x0},
+    {0x900c2, 0x0},
+    {0x900c3, 0x0},
+    {0x900c4, 0x0},
+    {0x900c5, 0x0},
+    {0x900c6, 0x0},
+    {0x900c7, 0x0},
+    {0x900c8, 0x0},
+    {0x900c9, 0x0},
+    {0x900ca, 0x0},
+    {0x900cb, 0x0},
+    {0x900cc, 0x0},
+    {0x900cd, 0x0},
+    {0x900ce, 0x0},
+    {0x900cf, 0x0},
+    {0x900d0, 0x0},
+    {0x900d1, 0x0},
+    {0x900d2, 0x0},
+    {0x900d3, 0x0},
+    {0x900d4, 0x0},
+    {0x900d5, 0x0},
+    {0x900d6, 0x0},
+    {0x900d7, 0x0},
+    {0x900d8, 0x0},
+    {0x900d9, 0x0},
+    {0x900da, 0x0},
+    {0x900db, 0x0},
+    {0x900dc, 0x0},
+    {0x900dd, 0x0},
+    {0x900de, 0x0},
+    {0x900df, 0x0},
+    {0x900e0, 0x0},
+    {0x900e1, 0x0},
+    {0x900e2, 0x0},
+    {0x900e3, 0x0},
+    {0x900e4, 0x0},
+    {0x900e5, 0x0},
+    {0x900e6, 0x0},
+    {0x900e7, 0x0},
+    {0x900e8, 0x0},
+    {0x900e9, 0x0},
+    {0x900ea, 0x0},
+    {0x900eb, 0x0},
+    {0x900ec, 0x0},
+    {0x900ed, 0x0},
+    {0x900ee, 0x0},
+    {0x900ef, 0x0},
+    {0x900f0, 0x0},
+    {0x900f1, 0x0},
+    {0x900f2, 0x0},
+    {0x900f3, 0x0},
+    {0x900f4, 0x0},
+    {0x900f5, 0x0},
+    {0x900f6, 0x0},
+    {0x900f7, 0x0},
+    {0x900f8, 0x0},
+    {0x900f9, 0x0},
+    {0x900fa, 0x0},
+    {0x900fb, 0x0},
+    {0x900fc, 0x0},
+    {0x900fd, 0x0},
+    {0x900fe, 0x0},
+    {0x900ff, 0x0},
+    {0x90100, 0x0},
+    {0x90101, 0x0},
+    {0x90102, 0x0},
+    {0x90103, 0x0},
+    {0x90104, 0x0},
+    {0x90105, 0x0},
+    {0x90106, 0x0},
+    {0x90107, 0x0},
+    {0x90108, 0x0},
+    {0x90109, 0x0},
+    {0x9010a, 0x0},
+    {0x9010b, 0x0},
+    {0x9010c, 0x0},
+    {0x9010d, 0x0},
+    {0x9010e, 0x0},
+    {0x9010f, 0x0},
+    {0x90110, 0x0},
+    {0x90111, 0x0},
+    {0x90112, 0x0},
+    {0x90113, 0x0},
+    {0x90114, 0x0},
+    {0x90115, 0x0},
+    {0x90116, 0x0},
+    {0x90117, 0x0},
+    {0x90118, 0x0},
+    {0x90119, 0x0},
+    {0x9011a, 0x0},
+    {0x9011b, 0x0},
+    {0x9011c, 0x0},
+    {0x9011d, 0x0},
+    {0x9011e, 0x0},
+    {0x9011f, 0x0},
+    {0x90120, 0x0},
+    {0x90121, 0x0},
+    {0x90122, 0x0},
+    {0x90123, 0x0},
+    {0x90124, 0x0},
+    {0x90125, 0x0},
+    {0x90126, 0x0},
+    {0x90127, 0x0},
+    {0x90128, 0x0},
+    {0x90129, 0x0},
+    {0x9012a, 0x0},
+    {0x9012b, 0x0},
+    {0x9012c, 0x0},
+    {0x9012d, 0x0},
+    {0x9012e, 0x0},
+    {0x9012f, 0x0},
+    {0x90130, 0x0},
+    {0x90131, 0x0},
+    {0x90132, 0x0},
+    {0x90133, 0x0},
+    {0x90134, 0x0},
+    {0x90135, 0x0},
+    {0x90136, 0x0},
+    {0x90137, 0x0},
+    {0x90138, 0x0},
+    {0x90139, 0x0},
+    {0x9013a, 0x0},
+    {0x9013b, 0x0},
+    {0x9013c, 0x0},
+    {0x9013d, 0x0},
+    {0x9013e, 0x0},
+    {0x9013f, 0x0},
+    {0x90140, 0x0},
+    {0x90141, 0x0},
+    {0x90142, 0x0},
+    {0x90143, 0x0},
+    {0x90144, 0x0},
+    {0x90145, 0x0},
+    {0x90146, 0x0},
+    {0x90147, 0x0},
+    {0x90148, 0x0},
+    {0x90149, 0x0},
+    {0x9014a, 0x0},
+    {0x9014b, 0x0},
+    {0x9014c, 0x0},
+    {0x9014d, 0x0},
+    {0x9014e, 0x0},
+    {0x9014f, 0x0},
+    {0x90150, 0x0},
+    {0x90151, 0x0},
+    {0x90152, 0x0},
+    {0x90153, 0x0},
+    {0x90154, 0x0},
+    {0x90155, 0x0},
+    {0x90156, 0x0},
+    {0x90157, 0x0},
+    {0x90158, 0x0},
+    {0x90159, 0x0},
+    {0x9015a, 0x0},
+    {0x9015b, 0x0},
+    {0x9015c, 0x0},
+    {0x9015d, 0x0},
+    {0x9015e, 0x0},
+    {0x9015f, 0x0},
+    {0x90160, 0x0},
+    {0x90161, 0x0},
+    {0x90162, 0x0},
+    {0x90163, 0x0},
+    {0x90164, 0x0},
+    {0x90165, 0x0},
+    {0x90166, 0x0},
+    {0x90167, 0x0},
+    {0x90168, 0x0},
+    {0x90169, 0x0},
+    {0x9016a, 0x0},
+    {0x9016b, 0x0},
+    {0x9016c, 0x0},
+    {0x9016d, 0x0},
+    {0x9016e, 0x0},
+    {0x9016f, 0x0},
+    {0x90170, 0x0},
+    {0x90171, 0x0},
+    {0x90172, 0x0},
+    {0x90173, 0x0},
+    {0x90174, 0x0},
+    {0x90175, 0x0},
+    {0x90176, 0x0},
+    {0x90177, 0x0},
+    {0x90178, 0x0},
+    {0x90179, 0x0},
+    {0x9017a, 0x0},
+    {0x9017b, 0x0},
+    {0x9017c, 0x0},
+    {0x9017d, 0x0},
+    {0x9017e, 0x0},
+    {0x9017f, 0x0},
+    {0x90180, 0x0},
+    {0x90181, 0x0},
+    {0x90182, 0x0},
+    {0x90183, 0x0},
+    {0x90184, 0x0},
+    {0x90006, 0x0},
+    {0x90007, 0x0},
+    {0x90008, 0x0},
+    {0x90009, 0x0},
+    {0x9000a, 0x0},
+    {0x9000b, 0x0},
+    {0xd00e7, 0x0},
+    {0x90017, 0x0},
+    {0x9001f, 0x0},
+    {0x90026, 0x0},
+    {0x400d0, 0x0},
+    {0x400d1, 0x0},
+    {0x400d2, 0x0},
+    {0x400d3, 0x0},
+    {0x400d4, 0x0},
+    {0x400d5, 0x0},
+    {0x400d6, 0x0},
+    {0x400d7, 0x0},
+    {0x200be, 0x0},
+    {0x2000b, 0x0},
+    {0x2000c, 0x0},
+    {0x2000d, 0x0},
+    {0x2000e, 0x0},
+    {0x12000b, 0x0},
+    {0x12000c, 0x0},
+    {0x12000d, 0x0},
+    {0x12000e, 0x0},
+    {0x22000b, 0x0},
+    {0x22000c, 0x0},
+    {0x22000d, 0x0},
+    {0x22000e, 0x0},
+    {0x9000c, 0x0},
+    {0x9000d, 0x0},
+    {0x9000e, 0x0},
+    {0x9000f, 0x0},
+    {0x90010, 0x0},
+    {0x90011, 0x0},
+    {0x90012, 0x0},
+    {0x90013, 0x0},
+    {0x20010, 0x0},
+    {0x20011, 0x0},
+    {0x120010, 0x0},
+    {0x120011, 0x0},
+    {0x40080, 0x0},
+    {0x40081, 0x0},
+    {0x40082, 0x0},
+    {0x40083, 0x0},
+    {0x40084, 0x0},
+    {0x40085, 0x0},
+    {0x140080, 0x0},
+    {0x140081, 0x0},
+    {0x140082, 0x0},
+    {0x140083, 0x0},
+    {0x140084, 0x0},
+    {0x140085, 0x0},
+    {0x240080, 0x0},
+    {0x240081, 0x0},
+    {0x240082, 0x0},
+    {0x240083, 0x0},
+    {0x240084, 0x0},
+    {0x240085, 0x0},
+    {0x400fd, 0x0},
+    {0x400f1, 0x0},
+    {0x10011, 0x0},
+    {0x10012, 0x0},
+    {0x10013, 0x0},
+    {0x10018, 0x0},
+    {0x10002, 0x0},
+    {0x100b2, 0x0},
+    {0x101b4, 0x0},
+    {0x102b4, 0x0},
+    {0x103b4, 0x0},
+    {0x104b4, 0x0},
+    {0x105b4, 0x0},
+    {0x106b4, 0x0},
+    {0x107b4, 0x0},
+    {0x108b4, 0x0},
+    {0x11011, 0x0},
+    {0x11012, 0x0},
+    {0x11013, 0x0},
+    {0x11018, 0x0},
+    {0x11002, 0x0},
+    {0x110b2, 0x0},
+    {0x111b4, 0x0},
+    {0x112b4, 0x0},
+    {0x113b4, 0x0},
+    {0x114b4, 0x0},
+    {0x115b4, 0x0},
+    {0x116b4, 0x0},
+    {0x117b4, 0x0},
+    {0x118b4, 0x0},
+    {0x20089, 0x0},
+    {0xc0080, 0x0},
+    {0x200cb, 0x0},
+    {0x10068, 0x0},
+    {0x10069, 0x0},
+    {0x10168, 0x0},
+    {0x10169, 0x0},
+    {0x10268, 0x0},
+    {0x10269, 0x0},
+    {0x10368, 0x0},
+    {0x10369, 0x0},
+    {0x10468, 0x0},
+    {0x10469, 0x0},
+    {0x10568, 0x0},
+    {0x10569, 0x0},
+    {0x10668, 0x0},
+    {0x10669, 0x0},
+    {0x10768, 0x0},
+    {0x10769, 0x0},
+    {0x10868, 0x0},
+    {0x10869, 0x0},
+    {0x100aa, 0x0},
+    {0x10062, 0x0},
+    {0x10001, 0x0},
+    {0x100a0, 0x0},
+    {0x100a1, 0x0},
+    {0x100a2, 0x0},
+    {0x100a3, 0x0},
+    {0x100a4, 0x0},
+    {0x100a5, 0x0},
+    {0x100a6, 0x0},
+    {0x100a7, 0x0},
+    {0x11068, 0x0},
+    {0x11069, 0x0},
+    {0x11168, 0x0},
+    {0x11169, 0x0},
+    {0x11268, 0x0},
+    {0x11269, 0x0},
+    {0x11368, 0x0},
+    {0x11369, 0x0},
+    {0x11468, 0x0},
+    {0x11469, 0x0},
+    {0x11568, 0x0},
+    {0x11569, 0x0},
+    {0x11668, 0x0},
+    {0x11669, 0x0},
+    {0x11768, 0x0},
+    {0x11769, 0x0},
+    {0x11868, 0x0},
+    {0x11869, 0x0},
+    {0x110aa, 0x0},
+    {0x11062, 0x0},
+    {0x11001, 0x0},
+    {0x110a0, 0x0},
+    {0x110a1, 0x0},
+    {0x110a2, 0x0},
+    {0x110a3, 0x0},
+    {0x110a4, 0x0},
+    {0x110a5, 0x0},
+    {0x110a6, 0x0},
+    {0x110a7, 0x0},
+    {0x80, 0x0},
+    {0x1080, 0x0},
+    {0x2080, 0x0},
+    {0x10020, 0x0},
+    {0x10080, 0x0},
+    {0x10081, 0x0},
+    {0x100d0, 0x0},
+    {0x100d1, 0x0},
+    {0x1008c, 0x0},
+    {0x1008d, 0x0},
+    {0x10180, 0x0},
+    {0x10181, 0x0},
+    {0x101d0, 0x0},
+    {0x101d1, 0x0},
+    {0x1018c, 0x0},
+    {0x1018d, 0x0},
+    {0x100c0, 0x0},
+    {0x100c1, 0x0},
+    {0x101c0, 0x0},
+    {0x101c1, 0x0},
+    {0x102c0, 0x0},
+    {0x102c1, 0x0},
+    {0x103c0, 0x0},
+    {0x103c1, 0x0},
+    {0x104c0, 0x0},
+    {0x104c1, 0x0},
+    {0x105c0, 0x0},
+    {0x105c1, 0x0},
+    {0x106c0, 0x0},
+    {0x106c1, 0x0},
+    {0x107c0, 0x0},
+    {0x107c1, 0x0},
+    {0x108c0, 0x0},
+    {0x108c1, 0x0},
+    {0x100ae, 0x0},
+    {0x100af, 0x0},
+    {0x11020, 0x0},
+    {0x11080, 0x0},
+    {0x11081, 0x0},
+    {0x110d0, 0x0},
+    {0x110d1, 0x0},
+    {0x1108c, 0x0},
+    {0x1108d, 0x0},
+    {0x11180, 0x0},
+    {0x11181, 0x0},
+    {0x111d0, 0x0},
+    {0x111d1, 0x0},
+    {0x1118c, 0x0},
+    {0x1118d, 0x0},
+    {0x110c0, 0x0},
+    {0x110c1, 0x0},
+    {0x111c0, 0x0},
+    {0x111c1, 0x0},
+    {0x112c0, 0x0},
+    {0x112c1, 0x0},
+    {0x113c0, 0x0},
+    {0x113c1, 0x0},
+    {0x114c0, 0x0},
+    {0x114c1, 0x0},
+    {0x115c0, 0x0},
+    {0x115c1, 0x0},
+    {0x116c0, 0x0},
+    {0x116c1, 0x0},
+    {0x117c0, 0x0},
+    {0x117c1, 0x0},
+    {0x118c0, 0x0},
+    {0x118c1, 0x0},
+    {0x110ae, 0x0},
+    {0x110af, 0x0},
+    {0x90201, 0x0},
+    {0x90202, 0x0},
+    {0x90203, 0x0},
+    {0x90205, 0x0},
+    {0x90206, 0x0},
+    {0x90207, 0x0},
+    {0x90208, 0x0},
+    {0x20020, 0x0},
+    {0x100080, 0x0},
+    {0x101080, 0x0},
+    {0x102080, 0x0},
+    {0x110020, 0x0},
+    {0x110080, 0x0},
+    {0x110081, 0x0},
+    {0x1100d0, 0x0},
+    {0x1100d1, 0x0},
+    {0x11008c, 0x0},
+    {0x11008d, 0x0},
+    {0x110180, 0x0},
+    {0x110181, 0x0},
+    {0x1101d0, 0x0},
+    {0x1101d1, 0x0},
+    {0x11018c, 0x0},
+    {0x11018d, 0x0},
+    {0x1100c0, 0x0},
+    {0x1100c1, 0x0},
+    {0x1101c0, 0x0},
+    {0x1101c1, 0x0},
+    {0x1102c0, 0x0},
+    {0x1102c1, 0x0},
+    {0x1103c0, 0x0},
+    {0x1103c1, 0x0},
+    {0x1104c0, 0x0},
+    {0x1104c1, 0x0},
+    {0x1105c0, 0x0},
+    {0x1105c1, 0x0},
+    {0x1106c0, 0x0},
+    {0x1106c1, 0x0},
+    {0x1107c0, 0x0},
+    {0x1107c1, 0x0},
+    {0x1108c0, 0x0},
+    {0x1108c1, 0x0},
+    {0x1100ae, 0x0},
+    {0x1100af, 0x0},
+    {0x111020, 0x0},
+    {0x111080, 0x0},
+    {0x111081, 0x0},
+    {0x1110d0, 0x0},
+    {0x1110d1, 0x0},
+    {0x11108c, 0x0},
+    {0x11108d, 0x0},
+    {0x111180, 0x0},
+    {0x111181, 0x0},
+    {0x1111d0, 0x0},
+    {0x1111d1, 0x0},
+    {0x11118c, 0x0},
+    {0x11118d, 0x0},
+    {0x1110c0, 0x0},
+    {0x1110c1, 0x0},
+    {0x1111c0, 0x0},
+    {0x1111c1, 0x0},
+    {0x1112c0, 0x0},
+    {0x1112c1, 0x0},
+    {0x1113c0, 0x0},
+    {0x1113c1, 0x0},
+    {0x1114c0, 0x0},
+    {0x1114c1, 0x0},
+    {0x1115c0, 0x0},
+    {0x1115c1, 0x0},
+    {0x1116c0, 0x0},
+    {0x1116c1, 0x0},
+    {0x1117c0, 0x0},
+    {0x1117c1, 0x0},
+    {0x1118c0, 0x0},
+    {0x1118c1, 0x0},
+    {0x1110ae, 0x0},
+    {0x1110af, 0x0},
+    {0x190201, 0x0},
+    {0x190202, 0x0},
+    {0x190203, 0x0},
+    {0x190205, 0x0},
+    {0x190206, 0x0},
+    {0x190207, 0x0},
+    {0x190208, 0x0},
+    {0x120020, 0x0},
+    {0x200080, 0x0},
+    {0x201080, 0x0},
+    {0x202080, 0x0},
+    {0x210020, 0x0},
+    {0x210080, 0x0},
+    {0x210081, 0x0},
+    {0x2100d0, 0x0},
+    {0x2100d1, 0x0},
+    {0x21008c, 0x0},
+    {0x21008d, 0x0},
+    {0x210180, 0x0},
+    {0x210181, 0x0},
+    {0x2101d0, 0x0},
+    {0x2101d1, 0x0},
+    {0x21018c, 0x0},
+    {0x21018d, 0x0},
+    {0x2100c0, 0x0},
+    {0x2100c1, 0x0},
+    {0x2101c0, 0x0},
+    {0x2101c1, 0x0},
+    {0x2102c0, 0x0},
+    {0x2102c1, 0x0},
+    {0x2103c0, 0x0},
+    {0x2103c1, 0x0},
+    {0x2104c0, 0x0},
+    {0x2104c1, 0x0},
+    {0x2105c0, 0x0},
+    {0x2105c1, 0x0},
+    {0x2106c0, 0x0},
+    {0x2106c1, 0x0},
+    {0x2107c0, 0x0},
+    {0x2107c1, 0x0},
+    {0x2108c0, 0x0},
+    {0x2108c1, 0x0},
+    {0x2100ae, 0x0},
+    {0x2100af, 0x0},
+    {0x211020, 0x0},
+    {0x211080, 0x0},
+    {0x211081, 0x0},
+    {0x2110d0, 0x0},
+    {0x2110d1, 0x0},
+    {0x21108c, 0x0},
+    {0x21108d, 0x0},
+    {0x211180, 0x0},
+    {0x211181, 0x0},
+    {0x2111d0, 0x0},
+    {0x2111d1, 0x0},
+    {0x21118c, 0x0},
+    {0x21118d, 0x0},
+    {0x2110c0, 0x0},
+    {0x2110c1, 0x0},
+    {0x2111c0, 0x0},
+    {0x2111c1, 0x0},
+    {0x2112c0, 0x0},
+    {0x2112c1, 0x0},
+    {0x2113c0, 0x0},
+    {0x2113c1, 0x0},
+    {0x2114c0, 0x0},
+    {0x2114c1, 0x0},
+    {0x2115c0, 0x0},
+    {0x2115c1, 0x0},
+    {0x2116c0, 0x0},
+    {0x2116c1, 0x0},
+    {0x2117c0, 0x0},
+    {0x2117c1, 0x0},
+    {0x2118c0, 0x0},
+    {0x2118c1, 0x0},
+    {0x2110ae, 0x0},
+    {0x2110af, 0x0},
+    {0x290201, 0x0},
+    {0x290202, 0x0},
+    {0x290203, 0x0},
+    {0x290205, 0x0},
+    {0x290206, 0x0},
+    {0x290207, 0x0},
+    {0x290208, 0x0},
+    {0x220020, 0x0},
+    {0x20077, 0x0},
+    {0x20072, 0x0},
+    {0x20073, 0x0},
+    {0x400c0, 0x0},
+    {0x10040, 0x0},
+    {0x10140, 0x0},
+    {0x10240, 0x0},
+    {0x10340, 0x0},
+    {0x10440, 0x0},
+    {0x10540, 0x0},
+    {0x10640, 0x0},
+    {0x10740, 0x0},
+    {0x10840, 0x0},
+    {0x11040, 0x0},
+    {0x11140, 0x0},
+    {0x11240, 0x0},
+    {0x11340, 0x0},
+    {0x11440, 0x0},
+    {0x11540, 0x0},
+    {0x11640, 0x0},
+    {0x11740, 0x0},
+    {0x11840, 0x0},
+
+};
+
+/* P0 message block parameter for training firmware */
+struct dram_cfg_param ddr_fsp0_cfg[] = {
+    {0xd0000, 0x0},
+    {0x54003, 0xe94},
+    {0x54004, 0x4},
+    {0x54006, 0x15},
+    {0x54008, 0x131f},
+    {0x54009, 0xc8},
+    {0x5400b, 0x4},
+    {0x5400d, 0x100},
+    {0x5400f, 0x100},
+    {0x54012, 0x110},
+    {0x54019, 0x36e4},
+    {0x5401a, 0x32},
+    {0x5401b, 0x1146},
+    {0x5401c, 0x1108},
+    {0x5401e, 0x4},
+    {0x5401f, 0x36e4},
+    {0x54020, 0x32},
+    {0x54021, 0x1146},
+    {0x54022, 0x1108},
+    {0x54024, 0x4},
+    {0x54032, 0xe400},
+    {0x54033, 0x3236},
+    {0x54034, 0x4600},
+    {0x54035, 0x811},
+    {0x54036, 0x11},
+    {0x54037, 0x400},
+    {0x54038, 0xe400},
+    {0x54039, 0x3236},
+    {0x5403a, 0x4600},
+    {0x5403b, 0x811},
+    {0x5403c, 0x11},
+    {0x5403d, 0x400},
+    {0xd0000, 0x1}
+};
+/* P1 message block parameter for training firmware */
+struct dram_cfg_param ddr_fsp1_cfg[] = {
+    {0xd0000, 0x0},
+    {0x54002, 0x1},
+    {0x54003, 0x74a},
+    {0x54004, 0x4},
+    {0x54006, 0x15},
+    {0x54008, 0x121f},
+    {0x54009, 0xc8},
+    {0x5400b, 0x4},
+    {0x5400d, 0x100},
+    {0x5400f, 0x100},
+    {0x54012, 0x110},
+    {0x54019, 0x1bb4},
+    {0x5401a, 0x32},
+    {0x5401b, 0x1146},
+    {0x5401c, 0x1108},
+    {0x5401e, 0x4},
+    {0x5401f, 0x1bb4},
+    {0x54020, 0x32},
+    {0x54021, 0x1146},
+    {0x54022, 0x1108},
+    {0x54024, 0x4},
+    {0x54032, 0xb400},
+    {0x54033, 0x321b},
+    {0x54034, 0x4600},
+    {0x54035, 0x811},
+    {0x54036, 0x11},
+    {0x54037, 0x400},
+    {0x54038, 0xb400},
+    {0x54039, 0x321b},
+    {0x5403a, 0x4600},
+    {0x5403b, 0x811},
+    {0x5403c, 0x11},
+    {0x5403d, 0x400},
+    {0xd0000, 0x1}
+};
+/* P2 message block parameter for training firmware */
+struct dram_cfg_param ddr_fsp2_cfg[] = {
+    {0xd0000, 0x0},
+    {0x54002, 0x102},
+    {0x54003, 0x270},
+    {0x54004, 0x4},
+    {0x54006, 0x15},
+    {0x54008, 0x121f},
+    {0x54009, 0xc8},
+    {0x5400b, 0x4},
+    {0x5400d, 0x100},
+    {0x5400f, 0x100},
+    {0x54012, 0x110},
+    {0x54019, 0x994},
+    {0x5401a, 0x32},
+    {0x5401b, 0x1146},
+    {0x5401c, 0x1100},
+    {0x5401e, 0x4},
+    {0x5401f, 0x994},
+    {0x54020, 0x32},
+    {0x54021, 0x1146},
+    {0x54022, 0x1100},
+    {0x54024, 0x4},
+    {0x54032, 0x9400},
+    {0x54033, 0x3209},
+    {0x54034, 0x4600},
+    {0x54035, 0x11},
+    {0x54036, 0x11},
+    {0x54037, 0x400},
+    {0x54038, 0x9400},
+    {0x54039, 0x3209},
+    {0x5403a, 0x4600},
+    {0x5403b, 0x11},
+    {0x5403c, 0x11},
+    {0x5403d, 0x400},
+    {0xd0000, 0x1}
+};
+
+
+
+/* P0 2D message block parameter for training firmware */
+struct dram_cfg_param ddr_fsp0_2d_cfg[] = {
+    {0xd0000, 0x0},
+    {0x54003, 0xe94},
+    {0x54004, 0x4},
+    {0x54006, 0x15},
+    {0x54008, 0x61},
+    {0x54009, 0xc8},
+    {0x5400b, 0x4},
+    {0x5400d, 0x100},
+    {0x5400f, 0x100},
+    {0x54010, 0x2080},
+    {0x54012, 0x110},
+    {0x54019, 0x36e4},
+    {0x5401a, 0x32},
+    {0x5401b, 0x1146},
+    {0x5401c, 0x1108},
+    {0x5401e, 0x4},
+    {0x5401f, 0x36e4},
+    {0x54020, 0x32},
+    {0x54021, 0x1146},
+    {0x54022, 0x1108},
+    {0x54024, 0x4},
+    {0x54032, 0xe400},
+    {0x54033, 0x3236},
+    {0x54034, 0x4600},
+    {0x54035, 0x811},
+    {0x54036, 0x11},
+    {0x54037, 0x400},
+    {0x54038, 0xe400},
+    {0x54039, 0x3236},
+    {0x5403a, 0x4600},
+    {0x5403b, 0x811},
+    {0x5403c, 0x11},
+    {0x5403d, 0x400},
+    {0xd0000, 0x1}
+};
+
+
+/* DRAM PHY init engine image */
+struct dram_cfg_param ddr_phy_pie[] = {
+    {0xd0000, 0x0},
+    {0x90000, 0x10},
+    {0x90001, 0x400},
+    {0x90002, 0x10e},
+    {0x90003, 0x0},
+    {0x90004, 0x0},
+    {0x90005, 0x8},
+    {0x90029, 0xb},
+    {0x9002a, 0x480},
+    {0x9002b, 0x109},
+    {0x9002c, 0x8},
+    {0x9002d, 0x448},
+    {0x9002e, 0x139},
+    {0x9002f, 0x8},
+    {0x90030, 0x478},
+    {0x90031, 0x109},
+    {0x90032, 0x0},
+    {0x90033, 0xe8},
+    {0x90034, 0x109},
+    {0x90035, 0x2},
+    {0x90036, 0x10},
+    {0x90037, 0x139},
+    {0x90038, 0xb},
+    {0x90039, 0x7c0},
+    {0x9003a, 0x139},
+    {0x9003b, 0x44},
+    {0x9003c, 0x633},
+    {0x9003d, 0x159},
+    {0x9003e, 0x14f},
+    {0x9003f, 0x630},
+    {0x90040, 0x159},
+    {0x90041, 0x47},
+    {0x90042, 0x633},
+    {0x90043, 0x149},
+    {0x90044, 0x4f},
+    {0x90045, 0x633},
+    {0x90046, 0x179},
+    {0x90047, 0x8},
+    {0x90048, 0xe0},
+    {0x90049, 0x109},
+    {0x9004a, 0x0},
+    {0x9004b, 0x7c8},
+    {0x9004c, 0x109},
+    {0x9004d, 0x0},
+    {0x9004e, 0x1},
+    {0x9004f, 0x8},
+    {0x90050, 0x30},
+    {0x90051, 0x65a},
+    {0x90052, 0x9},
+    {0x90053, 0x0},
+    {0x90054, 0x45a},
+    {0x90055, 0x9},
+    {0x90056, 0x0},
+    {0x90057, 0x448},
+    {0x90058, 0x109},
+    {0x90059, 0x40},
+    {0x9005a, 0x633},
+    {0x9005b, 0x179},
+    {0x9005c, 0x1},
+    {0x9005d, 0x618},
+    {0x9005e, 0x109},
+    {0x9005f, 0x40c0},
+    {0x90060, 0x633},
+    {0x90061, 0x149},
+    {0x90062, 0x8},
+    {0x90063, 0x4},
+    {0x90064, 0x48},
+    {0x90065, 0x4040},
+    {0x90066, 0x633},
+    {0x90067, 0x149},
+    {0x90068, 0x0},
+    {0x90069, 0x4},
+    {0x9006a, 0x48},
+    {0x9006b, 0x40},
+    {0x9006c, 0x633},
+    {0x9006d, 0x149},
+    {0x9006e, 0x0},
+    {0x9006f, 0x658},
+    {0x90070, 0x109},
+    {0x90071, 0x10},
+    {0x90072, 0x4},
+    {0x90073, 0x18},
+    {0x90074, 0x0},
+    {0x90075, 0x4},
+    {0x90076, 0x78},
+    {0x90077, 0x549},
+    {0x90078, 0x633},
+    {0x90079, 0x159},
+    {0x9007a, 0xd49},
+    {0x9007b, 0x633},
+    {0x9007c, 0x159},
+    {0x9007d, 0x94a},
+    {0x9007e, 0x633},
+    {0x9007f, 0x159},
+    {0x90080, 0x441},
+    {0x90081, 0x633},
+    {0x90082, 0x149},
+    {0x90083, 0x42},
+    {0x90084, 0x633},
+    {0x90085, 0x149},
+    {0x90086, 0x1},
+    {0x90087, 0x633},
+    {0x90088, 0x149},
+    {0x90089, 0x0},
+    {0x9008a, 0xe0},
+    {0x9008b, 0x109},
+    {0x9008c, 0xa},
+    {0x9008d, 0x10},
+    {0x9008e, 0x109},
+    {0x9008f, 0x9},
+    {0x90090, 0x3c0},
+    {0x90091, 0x149},
+    {0x90092, 0x9},
+    {0x90093, 0x3c0},
+    {0x90094, 0x159},
+    {0x90095, 0x18},
+    {0x90096, 0x10},
+    {0x90097, 0x109},
+    {0x90098, 0x0},
+    {0x90099, 0x3c0},
+    {0x9009a, 0x109},
+    {0x9009b, 0x18},
+    {0x9009c, 0x4},
+    {0x9009d, 0x48},
+    {0x9009e, 0x18},
+    {0x9009f, 0x4},
+    {0x900a0, 0x58},
+    {0x900a1, 0xb},
+    {0x900a2, 0x10},
+    {0x900a3, 0x109},
+    {0x900a4, 0x1},
+    {0x900a5, 0x10},
+    {0x900a6, 0x109},
+    {0x900a7, 0x5},
+    {0x900a8, 0x7c0},
+    {0x900a9, 0x109},
+    {0x40000, 0x811},
+    {0x40020, 0x880},
+    {0x40040, 0x0},
+    {0x40060, 0x0},
+    {0x40001, 0x4008},
+    {0x40021, 0x83},
+    {0x40041, 0x4f},
+    {0x40061, 0x0},
+    {0x40002, 0x4040},
+    {0x40022, 0x83},
+    {0x40042, 0x51},
+    {0x40062, 0x0},
+    {0x40003, 0x811},
+    {0x40023, 0x880},
+    {0x40043, 0x0},
+    {0x40063, 0x0},
+    {0x40004, 0x720},
+    {0x40024, 0xf},
+    {0x40044, 0x1740},
+    {0x40064, 0x0},
+    {0x40005, 0x16},
+    {0x40025, 0x83},
+    {0x40045, 0x4b},
+    {0x40065, 0x0},
+    {0x40006, 0x716},
+    {0x40026, 0xf},
+    {0x40046, 0x2001},
+    {0x40066, 0x0},
+    {0x40007, 0x716},
+    {0x40027, 0xf},
+    {0x40047, 0x2800},
+    {0x40067, 0x0},
+    {0x40008, 0x716},
+    {0x40028, 0xf},
+    {0x40048, 0xf00},
+    {0x40068, 0x0},
+    {0x40009, 0x720},
+    {0x40029, 0xf},
+    {0x40049, 0x1400},
+    {0x40069, 0x0},
+    {0x4000a, 0xe08},
+    {0x4002a, 0xc15},
+    {0x4004a, 0x0},
+    {0x4006a, 0x0},
+    {0x4000b, 0x625},
+    {0x4002b, 0x15},
+    {0x4004b, 0x0},
+    {0x4006b, 0x0},
+    {0x4000c, 0x4028},
+    {0x4002c, 0x80},
+    {0x4004c, 0x0},
+    {0x4006c, 0x0},
+    {0x4000d, 0xe08},
+    {0x4002d, 0xc1a},
+    {0x4004d, 0x0},
+    {0x4006d, 0x0},
+    {0x4000e, 0x625},
+    {0x4002e, 0x1a},
+    {0x4004e, 0x0},
+    {0x4006e, 0x0},
+    {0x4000f, 0x4040},
+    {0x4002f, 0x80},
+    {0x4004f, 0x0},
+    {0x4006f, 0x0},
+    {0x40010, 0x2604},
+    {0x40030, 0x15},
+    {0x40050, 0x0},
+    {0x40070, 0x0},
+    {0x40011, 0x708},
+    {0x40031, 0x5},
+    {0x40051, 0x0},
+    {0x40071, 0x2002},
+    {0x40012, 0x8},
+    {0x40032, 0x80},
+    {0x40052, 0x0},
+    {0x40072, 0x0},
+    {0x40013, 0x2604},
+    {0x40033, 0x1a},
+    {0x40053, 0x0},
+    {0x40073, 0x0},
+    {0x40014, 0x708},
+    {0x40034, 0xa},
+    {0x40054, 0x0},
+    {0x40074, 0x2002},
+    {0x40015, 0x4040},
+    {0x40035, 0x80},
+    {0x40055, 0x0},
+    {0x40075, 0x0},
+    {0x40016, 0x60a},
+    {0x40036, 0x15},
+    {0x40056, 0x1200},
+    {0x40076, 0x0},
+    {0x40017, 0x61a},
+    {0x40037, 0x15},
+    {0x40057, 0x1300},
+    {0x40077, 0x0},
+    {0x40018, 0x60a},
+    {0x40038, 0x1a},
+    {0x40058, 0x1200},
+    {0x40078, 0x0},
+    {0x40019, 0x642},
+    {0x40039, 0x1a},
+    {0x40059, 0x1300},
+    {0x40079, 0x0},
+    {0x4001a, 0x4808},
+    {0x4003a, 0x880},
+    {0x4005a, 0x0},
+    {0x4007a, 0x0},
+    {0x900aa, 0x0},
+    {0x900ab, 0x790},
+    {0x900ac, 0x11a},
+    {0x900ad, 0x8},
+    {0x900ae, 0x7aa},
+    {0x900af, 0x2a},
+    {0x900b0, 0x10},
+    {0x900b1, 0x7b2},
+    {0x900b2, 0x2a},
+    {0x900b3, 0x0},
+    {0x900b4, 0x7c8},
+    {0x900b5, 0x109},
+    {0x900b6, 0x10},
+    {0x900b7, 0x10},
+    {0x900b8, 0x109},
+    {0x900b9, 0x10},
+    {0x900ba, 0x2a8},
+    {0x900bb, 0x129},
+    {0x900bc, 0x8},
+    {0x900bd, 0x370},
+    {0x900be, 0x129},
+    {0x900bf, 0xa},
+    {0x900c0, 0x3c8},
+    {0x900c1, 0x1a9},
+    {0x900c2, 0xc},
+    {0x900c3, 0x408},
+    {0x900c4, 0x199},
+    {0x900c5, 0x14},
+    {0x900c6, 0x790},
+    {0x900c7, 0x11a},
+    {0x900c8, 0x8},
+    {0x900c9, 0x4},
+    {0x900ca, 0x18},
+    {0x900cb, 0xe},
+    {0x900cc, 0x408},
+    {0x900cd, 0x199},
+    {0x900ce, 0x8},
+    {0x900cf, 0x8568},
+    {0x900d0, 0x108},
+    {0x900d1, 0x18},
+    {0x900d2, 0x790},
+    {0x900d3, 0x16a},
+    {0x900d4, 0x8},
+    {0x900d5, 0x1d8},
+    {0x900d6, 0x169},
+    {0x900d7, 0x10},
+    {0x900d8, 0x8558},
+    {0x900d9, 0x168},
+    {0x900da, 0x1ff8},
+    {0x900db, 0x85a8},
+    {0x900dc, 0x1e8},
+    {0x900dd, 0x50},
+    {0x900de, 0x798},
+    {0x900df, 0x16a},
+    {0x900e0, 0x60},
+    {0x900e1, 0x7a0},
+    {0x900e2, 0x16a},
+    {0x900e3, 0x8},
+    {0x900e4, 0x8310},
+    {0x900e5, 0x168},
+    {0x900e6, 0x8},
+    {0x900e7, 0xa310},
+    {0x900e8, 0x168},
+    {0x900e9, 0xa},
+    {0x900ea, 0x408},
+    {0x900eb, 0x169},
+    {0x900ec, 0x6e},
+    {0x900ed, 0x0},
+    {0x900ee, 0x68},
+    {0x900ef, 0x0},
+    {0x900f0, 0x408},
+    {0x900f1, 0x169},
+    {0x900f2, 0x0},
+    {0x900f3, 0x8310},
+    {0x900f4, 0x168},
+    {0x900f5, 0x0},
+    {0x900f6, 0xa310},
+    {0x900f7, 0x168},
+    {0x900f8, 0x1ff8},
+    {0x900f9, 0x85a8},
+    {0x900fa, 0x1e8},
+    {0x900fb, 0x68},
+    {0x900fc, 0x798},
+    {0x900fd, 0x16a},
+    {0x900fe, 0x78},
+    {0x900ff, 0x7a0},
+    {0x90100, 0x16a},
+    {0x90101, 0x68},
+    {0x90102, 0x790},
+    {0x90103, 0x16a},
+    {0x90104, 0x8},
+    {0x90105, 0x8b10},
+    {0x90106, 0x168},
+    {0x90107, 0x8},
+    {0x90108, 0xab10},
+    {0x90109, 0x168},
+    {0x9010a, 0xa},
+    {0x9010b, 0x408},
+    {0x9010c, 0x169},
+    {0x9010d, 0x58},
+    {0x9010e, 0x0},
+    {0x9010f, 0x68},
+    {0x90110, 0x0},
+    {0x90111, 0x408},
+    {0x90112, 0x169},
+    {0x90113, 0x0},
+    {0x90114, 0x8b10},
+    {0x90115, 0x168},
+    {0x90116, 0x1},
+    {0x90117, 0xab10},
+    {0x90118, 0x168},
+    {0x90119, 0x0},
+    {0x9011a, 0x1d8},
+    {0x9011b, 0x169},
+    {0x9011c, 0x80},
+    {0x9011d, 0x790},
+    {0x9011e, 0x16a},
+    {0x9011f, 0x18},
+    {0x90120, 0x7aa},
+    {0x90121, 0x6a},
+    {0x90122, 0xa},
+    {0x90123, 0x0},
+    {0x90124, 0x1e9},
+    {0x90125, 0x8},
+    {0x90126, 0x8080},
+    {0x90127, 0x108},
+    {0x90128, 0xf},
+    {0x90129, 0x408},
+    {0x9012a, 0x169},
+    {0x9012b, 0xc},
+    {0x9012c, 0x0},
+    {0x9012d, 0x68},
+    {0x9012e, 0x9},
+    {0x9012f, 0x0},
+    {0x90130, 0x1a9},
+    {0x90131, 0x0},
+    {0x90132, 0x408},
+    {0x90133, 0x169},
+    {0x90134, 0x0},
+    {0x90135, 0x8080},
+    {0x90136, 0x108},
+    {0x90137, 0x8},
+    {0x90138, 0x7aa},
+    {0x90139, 0x6a},
+    {0x9013a, 0x0},
+    {0x9013b, 0x8568},
+    {0x9013c, 0x108},
+    {0x9013d, 0xb7},
+    {0x9013e, 0x790},
+    {0x9013f, 0x16a},
+    {0x90140, 0x1f},
+    {0x90141, 0x0},
+    {0x90142, 0x68},
+    {0x90143, 0x8},
+    {0x90144, 0x8558},
+    {0x90145, 0x168},
+    {0x90146, 0xf},
+    {0x90147, 0x408},
+    {0x90148, 0x169},
+    {0x90149, 0xd},
+    {0x9014a, 0x0},
+    {0x9014b, 0x68},
+    {0x9014c, 0x0},
+    {0x9014d, 0x408},
+    {0x9014e, 0x169},
+    {0x9014f, 0x0},
+    {0x90150, 0x8558},
+    {0x90151, 0x168},
+    {0x90152, 0x8},
+    {0x90153, 0x3c8},
+    {0x90154, 0x1a9},
+    {0x90155, 0x3},
+    {0x90156, 0x370},
+    {0x90157, 0x129},
+    {0x90158, 0x20},
+    {0x90159, 0x2aa},
+    {0x9015a, 0x9},
+    {0x9015b, 0x8},
+    {0x9015c, 0xe8},
+    {0x9015d, 0x109},
+    {0x9015e, 0x0},
+    {0x9015f, 0x8140},
+    {0x90160, 0x10c},
+    {0x90161, 0x10},
+    {0x90162, 0x8138},
+    {0x90163, 0x104},
+    {0x90164, 0x8},
+    {0x90165, 0x448},
+    {0x90166, 0x109},
+    {0x90167, 0xf},
+    {0x90168, 0x7c0},
+    {0x90169, 0x109},
+    {0x9016a, 0x0},
+    {0x9016b, 0xe8},
+    {0x9016c, 0x109},
+    {0x9016d, 0x47},
+    {0x9016e, 0x630},
+    {0x9016f, 0x109},
+    {0x90170, 0x8},
+    {0x90171, 0x618},
+    {0x90172, 0x109},
+    {0x90173, 0x8},
+    {0x90174, 0xe0},
+    {0x90175, 0x109},
+    {0x90176, 0x0},
+    {0x90177, 0x7c8},
+    {0x90178, 0x109},
+    {0x90179, 0x8},
+    {0x9017a, 0x8140},
+    {0x9017b, 0x10c},
+    {0x9017c, 0x0},
+    {0x9017d, 0x478},
+    {0x9017e, 0x109},
+    {0x9017f, 0x0},
+    {0x90180, 0x1},
+    {0x90181, 0x8},
+    {0x90182, 0x8},
+    {0x90183, 0x4},
+    {0x90184, 0x0},
+    {0x90006, 0x8},
+    {0x90007, 0x7c8},
+    {0x90008, 0x109},
+    {0x90009, 0x0},
+    {0x9000a, 0x400},
+    {0x9000b, 0x106},
+    {0xd00e7, 0x400},
+    {0x90017, 0x0},
+    {0x9001f, 0x2b},
+    {0x90026, 0x69},
+    {0x400d0, 0x0},
+    {0x400d1, 0x101},
+    {0x400d2, 0x105},
+    {0x400d3, 0x107},
+    {0x400d4, 0x10f},
+    {0x400d5, 0x202},
+    {0x400d6, 0x20a},
+    {0x400d7, 0x20b},
+    {0x2003a, 0x2},
+    {0x200be, 0x3},
+    {0x2000b, 0x41a},
+    {0x2000c, 0xe9},
+    {0x2000d, 0x91c},
+    {0x2000e, 0x2c},
+    {0x12000b, 0x20d},
+    {0x12000c, 0x74},
+    {0x12000d, 0x48e},
+    {0x12000e, 0x2c},
+    {0x22000b, 0xb0},
+    {0x22000c, 0x27},
+    {0x22000d, 0x186},
+    {0x22000e, 0x10},
+    {0x9000c, 0x0},
+    {0x9000d, 0x173},
+    {0x9000e, 0x60},
+    {0x9000f, 0x6110},
+    {0x90010, 0x2152},
+    {0x90011, 0xdfbd},
+    {0x90012, 0x2060},
+    {0x90013, 0x6152},
+    {0x20010, 0x5a},
+    {0x20011, 0x3},
+    {0x120010, 0x5a},
+    {0x120011, 0x3},
+    {0x40080, 0xe0},
+    {0x40081, 0x12},
+    {0x40082, 0xe0},
+    {0x40083, 0x12},
+    {0x40084, 0xe0},
+    {0x40085, 0x12},
+    {0x140080, 0xe0},
+    {0x140081, 0x12},
+    {0x140082, 0xe0},
+    {0x140083, 0x12},
+    {0x140084, 0xe0},
+    {0x140085, 0x12},
+    {0x240080, 0xe0},
+    {0x240081, 0x12},
+    {0x240082, 0xe0},
+    {0x240083, 0x12},
+    {0x240084, 0xe0},
+    {0x240085, 0x12},
+    {0x400fd, 0xf},
+    {0x400f1, 0xe},
+    {0x10011, 0x1},
+    {0x10012, 0x1},
+    {0x10013, 0x180},
+    {0x10018, 0x1},
+    {0x10002, 0x6209},
+    {0x100b2, 0x1},
+    {0x101b4, 0x1},
+    {0x102b4, 0x1},
+    {0x103b4, 0x1},
+    {0x104b4, 0x1},
+    {0x105b4, 0x1},
+    {0x106b4, 0x1},
+    {0x107b4, 0x1},
+    {0x108b4, 0x1},
+    {0x11011, 0x1},
+    {0x11012, 0x1},
+    {0x11013, 0x180},
+    {0x11018, 0x1},
+    {0x11002, 0x6209},
+    {0x110b2, 0x1},
+    {0x111b4, 0x1},
+    {0x112b4, 0x1},
+    {0x113b4, 0x1},
+    {0x114b4, 0x1},
+    {0x115b4, 0x1},
+    {0x116b4, 0x1},
+    {0x117b4, 0x1},
+    {0x118b4, 0x1},
+    {0x20089, 0x1},
+    {0x20088, 0x19},
+    {0xc0080, 0x0},
+    {0xd0000, 0x1},
+
+};
+
+
+struct dram_fsp_msg ddr_dram_fsp_msg[] = {
+    {
+        /* P0 3733mts 1D */
+        .drate = 3733,
+        .fw_type = FW_1D_IMAGE,
+        .fsp_cfg = ddr_fsp0_cfg,
+        .fsp_cfg_num = ARRAY_SIZE(ddr_fsp0_cfg),
+
+    },
+    {
+        /* P1 1866mts 1D */
+        .drate = 1866,
+        .fw_type = FW_1D_IMAGE,
+        .fsp_cfg = ddr_fsp1_cfg,
+        .fsp_cfg_num = ARRAY_SIZE(ddr_fsp1_cfg),
+
+    },
+    {
+        /* P2 625mts 1D */
+        .drate = 625,
+        .fw_type = FW_1D_IMAGE,
+        .fsp_cfg = ddr_fsp2_cfg,
+        .fsp_cfg_num = ARRAY_SIZE(ddr_fsp2_cfg),
+
+    },
+
+    {
+        /* P0 3733mts 2D */
+        .drate = 3733,
+        .fw_type = FW_2D_IMAGE,
+        .fsp_cfg = ddr_fsp0_2d_cfg,
+        .fsp_cfg_num = ARRAY_SIZE(ddr_fsp0_2d_cfg),
+    },
+
+};
+
+
+/* ddr timing config params */
+struct dram_timing_info dram_timing = {
+    .ddrc_cfg = ddr_ddrc_cfg,
+    .ddrc_cfg_num = ARRAY_SIZE(ddr_ddrc_cfg),
+    .ddrphy_cfg = ddr_ddrphy_cfg,
+    .ddrphy_cfg_num = ARRAY_SIZE(ddr_ddrphy_cfg),
+    .fsp_msg = ddr_dram_fsp_msg,
+    .fsp_msg_num = ARRAY_SIZE(ddr_dram_fsp_msg),
+    .ddrphy_trained_csr = ddr_ddrphy_trained_csr,
+    .ddrphy_trained_csr_num = ARRAY_SIZE(ddr_ddrphy_trained_csr),
+    .ddrphy_pie = ddr_phy_pie,
+    .ddrphy_pie_num = ARRAY_SIZE(ddr_phy_pie),
+    .fsp_table = { 3733, 1866, 625, },
+    .fsp_cfg = ddr_dram_fsp_cfg,
+    .fsp_cfg_num = ARRAY_SIZE(ddr_dram_fsp_cfg),
+};
Index: b/board/myir/myd_lmx93x/lpddr4x_timing_2g.c
===================================================================
--- /dev/null
+++ b/board/myir/myd_lmx93x/lpddr4x_timing_2g.c
@@ -0,0 +1,2004 @@
+/*
+ * Copyright 2023 NXP
+ *
+ * SPDX-License-Identifier: GPL-2.0+
+ *
+ * Code generated with DDR Tool v2.0.0_5.3.
+ */
+
+#include <linux/kernel.h>
+#include <asm/arch/ddr.h>
+
+struct dram_cfg_param ddr_ddrc_cfg[] = {
+    /** Initialize DDRC registers **/
+    {0x4e300110, 0x44100001},
+    {0x4e300000, 0x8000ff},
+    {0x4e300008, 0x0},
+    {0x4e300080, 0x80000512},
+    {0x4e300084, 0x0},
+    {0x4e300114, 0x1002},
+    {0x4e300260, 0x80},
+    {0x4e300f04, 0x80},
+    {0x4e300800, 0x43b30002},
+    {0x4e300804, 0x1f1f1f1f},
+    {0x4e301000, 0x0},
+    {0x4e301240, 0x0},
+    {0x4e301244, 0x0},
+    {0x4e301248, 0x0},
+    {0x4e30124c, 0x0},
+    {0x4e301250, 0x0},
+    {0x4e301254, 0x0},
+    {0x4e301258, 0x0},
+    {0x4e30125c, 0x0},
+
+};
+
+/* dram fsp cfg */
+static struct dram_fsp_cfg ddr_dram_fsp_cfg[] = {
+    {
+        {
+            {0x4e300100, 0x24AB321B},
+            {0x4e300104, 0xF8EE001B},
+            {0x4e300108, 0x2F2EE233},
+            {0x4e30010C, 0x0005E18B},
+            {0x4e300124, 0x1C770000},
+            {0x4e300160, 0x00009102},
+            {0x4e30016C, 0x35F00000},
+            {0x4e300170, 0x8B0B0608},
+            {0x4e300250, 0x00000028},
+            {0x4e300254, 0x015B015B},
+            {0x4e300258, 0x00000008},
+            {0x4e30025C, 0x00000400},
+            {0x4e300300, 0x224F2213},
+            {0x4e300304, 0x015B2213},
+            {0x4e300308, 0x0A3C0E3C},
+        },
+        {
+            {0x01, 0xE4},
+            {0x02, 0x36},
+            {0x03, 0x32},
+            {0x0b, 0x46},
+            {0x0c, 0x11},
+            {0x0e, 0x11},
+            {0x16, 0x04},
+        },
+        0,
+    },
+    {
+        {
+            {0x4e300100, 0x12552100},
+            {0x4e300104, 0xF877000E},
+            {0x4e300108, 0x1816B4AA},
+            {0x4e30010C, 0x005101E6},
+            {0x4e300124, 0x0E3C0000},
+            {0x4e300160, 0x00009102},
+            {0x4e30016C, 0x30900000},
+            {0x4e300170, 0x8A0A0508},
+            {0x4e300250, 0x00000014},
+            {0x4e300254, 0x00AA00AA},
+            {0x4e300258, 0x00000008},
+            {0x4e30025C, 0x00000400},
+        },
+        {
+            {0x01, 0xB4},
+            {0x02, 0x1B},
+            {0x03, 0x32},
+            {0x0b, 0x46},
+            {0x0c, 0x11},
+            {0x0e, 0x11},
+            {0x16, 0x04},
+        },
+        0,
+    },
+    {
+        {
+            {0x4e300100, 0x00061000},
+            {0x4e300104, 0xF855000A},
+            {0x4e300108, 0x6E62FA48},
+            {0x4e30010C, 0x0031010D},
+            {0x4e300124, 0x04C50000},
+            {0x4e300160, 0x00009102},
+            {0x4e30016C, 0x30000000},
+            {0x4e300170, 0x89090408},
+            {0x4e300250, 0x00000007},
+            {0x4e300254, 0x00340034},
+            {0x4e300258, 0x00000008},
+            {0x4e30025C, 0x00000400},
+        },
+        {
+            {0x01, 0x94},
+            {0x02, 0x9},
+            {0x03, 0x32},
+            {0x0b, 0x46},
+            {0x0c, 0x11},
+            {0x0e, 0x11},
+            {0x16, 0x04},
+        },
+        1,
+    },
+
+};
+
+/* PHY Initialize Configuration */
+struct dram_cfg_param ddr_ddrphy_cfg[] = {
+    {0x100a0, 0x4},
+    {0x100a1, 0x5},
+    {0x100a2, 0x6},
+    {0x100a3, 0x7},
+    {0x100a4, 0x0},
+    {0x100a5, 0x1},
+    {0x100a6, 0x2},
+    {0x100a7, 0x3},
+    {0x110a0, 0x3},
+    {0x110a1, 0x2},
+    {0x110a2, 0x0},
+    {0x110a3, 0x1},
+    {0x110a4, 0x7},
+    {0x110a5, 0x6},
+    {0x110a6, 0x4},
+    {0x110a7, 0x5},
+    {0x1005f, 0x5ff},
+    {0x1015f, 0x5ff},
+    {0x1105f, 0x5ff},
+    {0x1115f, 0x5ff},
+    {0x11005f, 0x5ff},
+    {0x11015f, 0x5ff},
+    {0x11105f, 0x5ff},
+    {0x11115f, 0x5ff},
+    {0x21005f, 0x5ff},
+    {0x21015f, 0x5ff},
+    {0x21105f, 0x5ff},
+    {0x21115f, 0x5ff},
+    {0x55, 0x1ff},
+    {0x1055, 0x1ff},
+    {0x2055, 0x1ff},
+    {0x200c5, 0x19},
+    {0x1200c5, 0xb},
+    {0x2200c5, 0x7},
+    {0x2002e, 0x2},
+    {0x12002e, 0x2},
+    {0x22002e, 0x2},
+    {0x90204, 0x0},
+    {0x190204, 0x0},
+    {0x290204, 0x0},
+    {0x20024, 0x1e3},
+    {0x2003a, 0x2},
+    {0x2007d, 0x212},
+    {0x2007c, 0x61},
+    {0x120024, 0x1e3},
+    {0x2003a, 0x2},
+    {0x12007d, 0x212},
+    {0x12007c, 0x61},
+    {0x220024, 0x1e3},
+    {0x2003a, 0x2},
+    {0x22007d, 0x212},
+    {0x22007c, 0x61},
+    {0x20056, 0x3},
+    {0x120056, 0x3},
+    {0x220056, 0x3},
+    {0x1004d, 0x600},
+    {0x1014d, 0x600},
+    {0x1104d, 0x600},
+    {0x1114d, 0x600},
+    {0x11004d, 0x600},
+    {0x11014d, 0x600},
+    {0x11104d, 0x600},
+    {0x11114d, 0x600},
+    {0x21004d, 0x600},
+    {0x21014d, 0x600},
+    {0x21104d, 0x600},
+    {0x21114d, 0x600},
+    {0x10049, 0xe00},
+    {0x10149, 0xe00},
+    {0x11049, 0xe00},
+    {0x11149, 0xe00},
+    {0x110049, 0xe00},
+    {0x110149, 0xe00},
+    {0x111049, 0xe00},
+    {0x111149, 0xe00},
+    {0x210049, 0xe00},
+    {0x210149, 0xe00},
+    {0x211049, 0xe00},
+    {0x211149, 0xe00},
+    {0x43, 0x60},
+    {0x1043, 0x60},
+    {0x2043, 0x60},
+    {0x20018, 0x1},
+    {0x20075, 0x4},
+    {0x20050, 0x0},
+    {0x2009b, 0x2},
+    {0x20008, 0x3a5},
+    {0x120008, 0x1d3},
+    {0x220008, 0x9c},
+    {0x20088, 0x9},
+    {0x200b2, 0x10c},
+    {0x10043, 0x5a1},
+    {0x10143, 0x5a1},
+    {0x11043, 0x5a1},
+    {0x11143, 0x5a1},
+    {0x1200b2, 0x10c},
+    {0x110043, 0x5a1},
+    {0x110143, 0x5a1},
+    {0x111043, 0x5a1},
+    {0x111143, 0x5a1},
+    {0x2200b2, 0x10c},
+    {0x210043, 0x5a1},
+    {0x210143, 0x5a1},
+    {0x211043, 0x5a1},
+    {0x211143, 0x5a1},
+    {0x200fa, 0x2},
+    {0x1200fa, 0x2},
+    {0x2200fa, 0x2},
+    {0x20019, 0x1},
+    {0x120019, 0x1},
+    {0x220019, 0x1},
+    {0x200f0, 0x600},
+    {0x200f1, 0x0},
+    {0x200f2, 0x4444},
+    {0x200f3, 0x8888},
+    {0x200f4, 0x5655},
+    {0x200f5, 0x0},
+    {0x200f6, 0x0},
+    {0x200f7, 0xf000},
+    {0x1004a, 0x500},
+    {0x1104a, 0x500},
+    {0x20025, 0x0},
+    {0x2002d, 0x0},
+    {0x12002d, 0x0},
+    {0x22002d, 0x0},
+    {0x2002c, 0x0},
+    {0x20021, 0x0},
+    {0x200c7, 0x21},
+    {0x1200c7, 0x21},
+    {0x200ca, 0x24},
+    {0x1200ca, 0x24},
+
+};
+
+/* ddr phy trained csr */
+struct dram_cfg_param ddr_ddrphy_trained_csr[] = {
+    {0x1005f, 0x0},
+    {0x1015f, 0x0},
+    {0x1105f, 0x0},
+    {0x1115f, 0x0},
+    {0x11005f, 0x0},
+    {0x11015f, 0x0},
+    {0x11105f, 0x0},
+    {0x11115f, 0x0},
+    {0x21005f, 0x0},
+    {0x21015f, 0x0},
+    {0x21105f, 0x0},
+    {0x21115f, 0x0},
+    {0x55, 0x0},
+    {0x1055, 0x0},
+    {0x2055, 0x0},
+    {0x200c5, 0x0},
+    {0x1200c5, 0x0},
+    {0x2200c5, 0x0},
+    {0x2002e, 0x0},
+    {0x12002e, 0x0},
+    {0x22002e, 0x0},
+    {0x90204, 0x0},
+    {0x190204, 0x0},
+    {0x290204, 0x0},
+    {0x20024, 0x0},
+    {0x2003a, 0x0},
+    {0x2007d, 0x0},
+    {0x2007c, 0x0},
+    {0x120024, 0x0},
+    {0x12007d, 0x0},
+    {0x12007c, 0x0},
+    {0x220024, 0x0},
+    {0x22007d, 0x0},
+    {0x22007c, 0x0},
+    {0x20056, 0x0},
+    {0x120056, 0x0},
+    {0x220056, 0x0},
+    {0x1004d, 0x0},
+    {0x1014d, 0x0},
+    {0x1104d, 0x0},
+    {0x1114d, 0x0},
+    {0x11004d, 0x0},
+    {0x11014d, 0x0},
+    {0x11104d, 0x0},
+    {0x11114d, 0x0},
+    {0x21004d, 0x0},
+    {0x21014d, 0x0},
+    {0x21104d, 0x0},
+    {0x21114d, 0x0},
+    {0x10049, 0x0},
+    {0x10149, 0x0},
+    {0x11049, 0x0},
+    {0x11149, 0x0},
+    {0x110049, 0x0},
+    {0x110149, 0x0},
+    {0x111049, 0x0},
+    {0x111149, 0x0},
+    {0x210049, 0x0},
+    {0x210149, 0x0},
+    {0x211049, 0x0},
+    {0x211149, 0x0},
+    {0x43, 0x0},
+    {0x1043, 0x0},
+    {0x2043, 0x0},
+    {0x20018, 0x0},
+    {0x20075, 0x0},
+    {0x20050, 0x0},
+    {0x2009b, 0x0},
+    {0x20008, 0x0},
+    {0x120008, 0x0},
+    {0x220008, 0x0},
+    {0x20088, 0x0},
+    {0x200b2, 0x0},
+    {0x10043, 0x0},
+    {0x10143, 0x0},
+    {0x11043, 0x0},
+    {0x11143, 0x0},
+    {0x1200b2, 0x0},
+    {0x110043, 0x0},
+    {0x110143, 0x0},
+    {0x111043, 0x0},
+    {0x111143, 0x0},
+    {0x2200b2, 0x0},
+    {0x210043, 0x0},
+    {0x210143, 0x0},
+    {0x211043, 0x0},
+    {0x211143, 0x0},
+    {0x200fa, 0x0},
+    {0x1200fa, 0x0},
+    {0x2200fa, 0x0},
+    {0x20019, 0x0},
+    {0x120019, 0x0},
+    {0x220019, 0x0},
+    {0x200f0, 0x0},
+    {0x200f1, 0x0},
+    {0x200f2, 0x0},
+    {0x200f3, 0x0},
+    {0x200f4, 0x0},
+    {0x200f5, 0x0},
+    {0x200f6, 0x0},
+    {0x200f7, 0x0},
+    {0x1004a, 0x0},
+    {0x1104a, 0x0},
+    {0x20025, 0x0},
+    {0x2002d, 0x0},
+    {0x12002d, 0x0},
+    {0x22002d, 0x0},
+    {0x2002c, 0x0},
+    {0xd0000, 0x0},
+    {0x90000, 0x0},
+    {0x90001, 0x0},
+    {0x90002, 0x0},
+    {0x90003, 0x0},
+    {0x90004, 0x0},
+    {0x90005, 0x0},
+    {0x90029, 0x0},
+    {0x9002a, 0x0},
+    {0x9002b, 0x0},
+    {0x9002c, 0x0},
+    {0x9002d, 0x0},
+    {0x9002e, 0x0},
+    {0x9002f, 0x0},
+    {0x90030, 0x0},
+    {0x90031, 0x0},
+    {0x90032, 0x0},
+    {0x90033, 0x0},
+    {0x90034, 0x0},
+    {0x90035, 0x0},
+    {0x90036, 0x0},
+    {0x90037, 0x0},
+    {0x90038, 0x0},
+    {0x90039, 0x0},
+    {0x9003a, 0x0},
+    {0x9003b, 0x0},
+    {0x9003c, 0x0},
+    {0x9003d, 0x0},
+    {0x9003e, 0x0},
+    {0x9003f, 0x0},
+    {0x90040, 0x0},
+    {0x90041, 0x0},
+    {0x90042, 0x0},
+    {0x90043, 0x0},
+    {0x90044, 0x0},
+    {0x90045, 0x0},
+    {0x90046, 0x0},
+    {0x90047, 0x0},
+    {0x90048, 0x0},
+    {0x90049, 0x0},
+    {0x9004a, 0x0},
+    {0x9004b, 0x0},
+    {0x9004c, 0x0},
+    {0x9004d, 0x0},
+    {0x9004e, 0x0},
+    {0x9004f, 0x0},
+    {0x90050, 0x0},
+    {0x90051, 0x0},
+    {0x90052, 0x0},
+    {0x90053, 0x0},
+    {0x90054, 0x0},
+    {0x90055, 0x0},
+    {0x90056, 0x0},
+    {0x90057, 0x0},
+    {0x90058, 0x0},
+    {0x90059, 0x0},
+    {0x9005a, 0x0},
+    {0x9005b, 0x0},
+    {0x9005c, 0x0},
+    {0x9005d, 0x0},
+    {0x9005e, 0x0},
+    {0x9005f, 0x0},
+    {0x90060, 0x0},
+    {0x90061, 0x0},
+    {0x90062, 0x0},
+    {0x90063, 0x0},
+    {0x90064, 0x0},
+    {0x90065, 0x0},
+    {0x90066, 0x0},
+    {0x90067, 0x0},
+    {0x90068, 0x0},
+    {0x90069, 0x0},
+    {0x9006a, 0x0},
+    {0x9006b, 0x0},
+    {0x9006c, 0x0},
+    {0x9006d, 0x0},
+    {0x9006e, 0x0},
+    {0x9006f, 0x0},
+    {0x90070, 0x0},
+    {0x90071, 0x0},
+    {0x90072, 0x0},
+    {0x90073, 0x0},
+    {0x90074, 0x0},
+    {0x90075, 0x0},
+    {0x90076, 0x0},
+    {0x90077, 0x0},
+    {0x90078, 0x0},
+    {0x90079, 0x0},
+    {0x9007a, 0x0},
+    {0x9007b, 0x0},
+    {0x9007c, 0x0},
+    {0x9007d, 0x0},
+    {0x9007e, 0x0},
+    {0x9007f, 0x0},
+    {0x90080, 0x0},
+    {0x90081, 0x0},
+    {0x90082, 0x0},
+    {0x90083, 0x0},
+    {0x90084, 0x0},
+    {0x90085, 0x0},
+    {0x90086, 0x0},
+    {0x90087, 0x0},
+    {0x90088, 0x0},
+    {0x90089, 0x0},
+    {0x9008a, 0x0},
+    {0x9008b, 0x0},
+    {0x9008c, 0x0},
+    {0x9008d, 0x0},
+    {0x9008e, 0x0},
+    {0x9008f, 0x0},
+    {0x90090, 0x0},
+    {0x90091, 0x0},
+    {0x90092, 0x0},
+    {0x90093, 0x0},
+    {0x90094, 0x0},
+    {0x90095, 0x0},
+    {0x90096, 0x0},
+    {0x90097, 0x0},
+    {0x90098, 0x0},
+    {0x90099, 0x0},
+    {0x9009a, 0x0},
+    {0x9009b, 0x0},
+    {0x9009c, 0x0},
+    {0x9009d, 0x0},
+    {0x9009e, 0x0},
+    {0x9009f, 0x0},
+    {0x900a0, 0x0},
+    {0x900a1, 0x0},
+    {0x900a2, 0x0},
+    {0x900a3, 0x0},
+    {0x900a4, 0x0},
+    {0x900a5, 0x0},
+    {0x900a6, 0x0},
+    {0x900a7, 0x0},
+    {0x900a8, 0x0},
+    {0x900a9, 0x0},
+    {0x40000, 0x0},
+    {0x40020, 0x0},
+    {0x40040, 0x0},
+    {0x40060, 0x0},
+    {0x40001, 0x0},
+    {0x40021, 0x0},
+    {0x40041, 0x0},
+    {0x40061, 0x0},
+    {0x40002, 0x0},
+    {0x40022, 0x0},
+    {0x40042, 0x0},
+    {0x40062, 0x0},
+    {0x40003, 0x0},
+    {0x40023, 0x0},
+    {0x40043, 0x0},
+    {0x40063, 0x0},
+    {0x40004, 0x0},
+    {0x40024, 0x0},
+    {0x40044, 0x0},
+    {0x40064, 0x0},
+    {0x40005, 0x0},
+    {0x40025, 0x0},
+    {0x40045, 0x0},
+    {0x40065, 0x0},
+    {0x40006, 0x0},
+    {0x40026, 0x0},
+    {0x40046, 0x0},
+    {0x40066, 0x0},
+    {0x40007, 0x0},
+    {0x40027, 0x0},
+    {0x40047, 0x0},
+    {0x40067, 0x0},
+    {0x40008, 0x0},
+    {0x40028, 0x0},
+    {0x40048, 0x0},
+    {0x40068, 0x0},
+    {0x40009, 0x0},
+    {0x40029, 0x0},
+    {0x40049, 0x0},
+    {0x40069, 0x0},
+    {0x4000a, 0x0},
+    {0x4002a, 0x0},
+    {0x4004a, 0x0},
+    {0x4006a, 0x0},
+    {0x4000b, 0x0},
+    {0x4002b, 0x0},
+    {0x4004b, 0x0},
+    {0x4006b, 0x0},
+    {0x4000c, 0x0},
+    {0x4002c, 0x0},
+    {0x4004c, 0x0},
+    {0x4006c, 0x0},
+    {0x4000d, 0x0},
+    {0x4002d, 0x0},
+    {0x4004d, 0x0},
+    {0x4006d, 0x0},
+    {0x4000e, 0x0},
+    {0x4002e, 0x0},
+    {0x4004e, 0x0},
+    {0x4006e, 0x0},
+    {0x4000f, 0x0},
+    {0x4002f, 0x0},
+    {0x4004f, 0x0},
+    {0x4006f, 0x0},
+    {0x40010, 0x0},
+    {0x40030, 0x0},
+    {0x40050, 0x0},
+    {0x40070, 0x0},
+    {0x40011, 0x0},
+    {0x40031, 0x0},
+    {0x40051, 0x0},
+    {0x40071, 0x0},
+    {0x40012, 0x0},
+    {0x40032, 0x0},
+    {0x40052, 0x0},
+    {0x40072, 0x0},
+    {0x40013, 0x0},
+    {0x40033, 0x0},
+    {0x40053, 0x0},
+    {0x40073, 0x0},
+    {0x40014, 0x0},
+    {0x40034, 0x0},
+    {0x40054, 0x0},
+    {0x40074, 0x0},
+    {0x40015, 0x0},
+    {0x40035, 0x0},
+    {0x40055, 0x0},
+    {0x40075, 0x0},
+    {0x40016, 0x0},
+    {0x40036, 0x0},
+    {0x40056, 0x0},
+    {0x40076, 0x0},
+    {0x40017, 0x0},
+    {0x40037, 0x0},
+    {0x40057, 0x0},
+    {0x40077, 0x0},
+    {0x40018, 0x0},
+    {0x40038, 0x0},
+    {0x40058, 0x0},
+    {0x40078, 0x0},
+    {0x40019, 0x0},
+    {0x40039, 0x0},
+    {0x40059, 0x0},
+    {0x40079, 0x0},
+    {0x4001a, 0x0},
+    {0x4003a, 0x0},
+    {0x4005a, 0x0},
+    {0x4007a, 0x0},
+    {0x900aa, 0x0},
+    {0x900ab, 0x0},
+    {0x900ac, 0x0},
+    {0x900ad, 0x0},
+    {0x900ae, 0x0},
+    {0x900af, 0x0},
+    {0x900b0, 0x0},
+    {0x900b1, 0x0},
+    {0x900b2, 0x0},
+    {0x900b3, 0x0},
+    {0x900b4, 0x0},
+    {0x900b5, 0x0},
+    {0x900b6, 0x0},
+    {0x900b7, 0x0},
+    {0x900b8, 0x0},
+    {0x900b9, 0x0},
+    {0x900ba, 0x0},
+    {0x900bb, 0x0},
+    {0x900bc, 0x0},
+    {0x900bd, 0x0},
+    {0x900be, 0x0},
+    {0x900bf, 0x0},
+    {0x900c0, 0x0},
+    {0x900c1, 0x0},
+    {0x900c2, 0x0},
+    {0x900c3, 0x0},
+    {0x900c4, 0x0},
+    {0x900c5, 0x0},
+    {0x900c6, 0x0},
+    {0x900c7, 0x0},
+    {0x900c8, 0x0},
+    {0x900c9, 0x0},
+    {0x900ca, 0x0},
+    {0x900cb, 0x0},
+    {0x900cc, 0x0},
+    {0x900cd, 0x0},
+    {0x900ce, 0x0},
+    {0x900cf, 0x0},
+    {0x900d0, 0x0},
+    {0x900d1, 0x0},
+    {0x900d2, 0x0},
+    {0x900d3, 0x0},
+    {0x900d4, 0x0},
+    {0x900d5, 0x0},
+    {0x900d6, 0x0},
+    {0x900d7, 0x0},
+    {0x900d8, 0x0},
+    {0x900d9, 0x0},
+    {0x900da, 0x0},
+    {0x900db, 0x0},
+    {0x900dc, 0x0},
+    {0x900dd, 0x0},
+    {0x900de, 0x0},
+    {0x900df, 0x0},
+    {0x900e0, 0x0},
+    {0x900e1, 0x0},
+    {0x900e2, 0x0},
+    {0x900e3, 0x0},
+    {0x900e4, 0x0},
+    {0x900e5, 0x0},
+    {0x900e6, 0x0},
+    {0x900e7, 0x0},
+    {0x900e8, 0x0},
+    {0x900e9, 0x0},
+    {0x900ea, 0x0},
+    {0x900eb, 0x0},
+    {0x900ec, 0x0},
+    {0x900ed, 0x0},
+    {0x900ee, 0x0},
+    {0x900ef, 0x0},
+    {0x900f0, 0x0},
+    {0x900f1, 0x0},
+    {0x900f2, 0x0},
+    {0x900f3, 0x0},
+    {0x900f4, 0x0},
+    {0x900f5, 0x0},
+    {0x900f6, 0x0},
+    {0x900f7, 0x0},
+    {0x900f8, 0x0},
+    {0x900f9, 0x0},
+    {0x900fa, 0x0},
+    {0x900fb, 0x0},
+    {0x900fc, 0x0},
+    {0x900fd, 0x0},
+    {0x900fe, 0x0},
+    {0x900ff, 0x0},
+    {0x90100, 0x0},
+    {0x90101, 0x0},
+    {0x90102, 0x0},
+    {0x90103, 0x0},
+    {0x90104, 0x0},
+    {0x90105, 0x0},
+    {0x90106, 0x0},
+    {0x90107, 0x0},
+    {0x90108, 0x0},
+    {0x90109, 0x0},
+    {0x9010a, 0x0},
+    {0x9010b, 0x0},
+    {0x9010c, 0x0},
+    {0x9010d, 0x0},
+    {0x9010e, 0x0},
+    {0x9010f, 0x0},
+    {0x90110, 0x0},
+    {0x90111, 0x0},
+    {0x90112, 0x0},
+    {0x90113, 0x0},
+    {0x90114, 0x0},
+    {0x90115, 0x0},
+    {0x90116, 0x0},
+    {0x90117, 0x0},
+    {0x90118, 0x0},
+    {0x90119, 0x0},
+    {0x9011a, 0x0},
+    {0x9011b, 0x0},
+    {0x9011c, 0x0},
+    {0x9011d, 0x0},
+    {0x9011e, 0x0},
+    {0x9011f, 0x0},
+    {0x90120, 0x0},
+    {0x90121, 0x0},
+    {0x90122, 0x0},
+    {0x90123, 0x0},
+    {0x90124, 0x0},
+    {0x90125, 0x0},
+    {0x90126, 0x0},
+    {0x90127, 0x0},
+    {0x90128, 0x0},
+    {0x90129, 0x0},
+    {0x9012a, 0x0},
+    {0x9012b, 0x0},
+    {0x9012c, 0x0},
+    {0x9012d, 0x0},
+    {0x9012e, 0x0},
+    {0x9012f, 0x0},
+    {0x90130, 0x0},
+    {0x90131, 0x0},
+    {0x90132, 0x0},
+    {0x90133, 0x0},
+    {0x90134, 0x0},
+    {0x90135, 0x0},
+    {0x90136, 0x0},
+    {0x90137, 0x0},
+    {0x90138, 0x0},
+    {0x90139, 0x0},
+    {0x9013a, 0x0},
+    {0x9013b, 0x0},
+    {0x9013c, 0x0},
+    {0x9013d, 0x0},
+    {0x9013e, 0x0},
+    {0x9013f, 0x0},
+    {0x90140, 0x0},
+    {0x90141, 0x0},
+    {0x90142, 0x0},
+    {0x90143, 0x0},
+    {0x90144, 0x0},
+    {0x90145, 0x0},
+    {0x90146, 0x0},
+    {0x90147, 0x0},
+    {0x90148, 0x0},
+    {0x90149, 0x0},
+    {0x9014a, 0x0},
+    {0x9014b, 0x0},
+    {0x9014c, 0x0},
+    {0x9014d, 0x0},
+    {0x9014e, 0x0},
+    {0x9014f, 0x0},
+    {0x90150, 0x0},
+    {0x90151, 0x0},
+    {0x90152, 0x0},
+    {0x90153, 0x0},
+    {0x90154, 0x0},
+    {0x90155, 0x0},
+    {0x90156, 0x0},
+    {0x90157, 0x0},
+    {0x90158, 0x0},
+    {0x90159, 0x0},
+    {0x9015a, 0x0},
+    {0x9015b, 0x0},
+    {0x9015c, 0x0},
+    {0x9015d, 0x0},
+    {0x9015e, 0x0},
+    {0x9015f, 0x0},
+    {0x90160, 0x0},
+    {0x90161, 0x0},
+    {0x90162, 0x0},
+    {0x90163, 0x0},
+    {0x90164, 0x0},
+    {0x90165, 0x0},
+    {0x90166, 0x0},
+    {0x90167, 0x0},
+    {0x90168, 0x0},
+    {0x90169, 0x0},
+    {0x9016a, 0x0},
+    {0x9016b, 0x0},
+    {0x9016c, 0x0},
+    {0x9016d, 0x0},
+    {0x9016e, 0x0},
+    {0x9016f, 0x0},
+    {0x90170, 0x0},
+    {0x90171, 0x0},
+    {0x90172, 0x0},
+    {0x90173, 0x0},
+    {0x90174, 0x0},
+    {0x90175, 0x0},
+    {0x90176, 0x0},
+    {0x90177, 0x0},
+    {0x90178, 0x0},
+    {0x90179, 0x0},
+    {0x9017a, 0x0},
+    {0x9017b, 0x0},
+    {0x9017c, 0x0},
+    {0x9017d, 0x0},
+    {0x9017e, 0x0},
+    {0x9017f, 0x0},
+    {0x90180, 0x0},
+    {0x90181, 0x0},
+    {0x90182, 0x0},
+    {0x90183, 0x0},
+    {0x90184, 0x0},
+    {0x90006, 0x0},
+    {0x90007, 0x0},
+    {0x90008, 0x0},
+    {0x90009, 0x0},
+    {0x9000a, 0x0},
+    {0x9000b, 0x0},
+    {0xd00e7, 0x0},
+    {0x90017, 0x0},
+    {0x9001f, 0x0},
+    {0x90026, 0x0},
+    {0x400d0, 0x0},
+    {0x400d1, 0x0},
+    {0x400d2, 0x0},
+    {0x400d3, 0x0},
+    {0x400d4, 0x0},
+    {0x400d5, 0x0},
+    {0x400d6, 0x0},
+    {0x400d7, 0x0},
+    {0x200be, 0x0},
+    {0x2000b, 0x0},
+    {0x2000c, 0x0},
+    {0x2000d, 0x0},
+    {0x2000e, 0x0},
+    {0x12000b, 0x0},
+    {0x12000c, 0x0},
+    {0x12000d, 0x0},
+    {0x12000e, 0x0},
+    {0x22000b, 0x0},
+    {0x22000c, 0x0},
+    {0x22000d, 0x0},
+    {0x22000e, 0x0},
+    {0x9000c, 0x0},
+    {0x9000d, 0x0},
+    {0x9000e, 0x0},
+    {0x9000f, 0x0},
+    {0x90010, 0x0},
+    {0x90011, 0x0},
+    {0x90012, 0x0},
+    {0x90013, 0x0},
+    {0x20010, 0x0},
+    {0x20011, 0x0},
+    {0x120010, 0x0},
+    {0x120011, 0x0},
+    {0x40080, 0x0},
+    {0x40081, 0x0},
+    {0x40082, 0x0},
+    {0x40083, 0x0},
+    {0x40084, 0x0},
+    {0x40085, 0x0},
+    {0x140080, 0x0},
+    {0x140081, 0x0},
+    {0x140082, 0x0},
+    {0x140083, 0x0},
+    {0x140084, 0x0},
+    {0x140085, 0x0},
+    {0x240080, 0x0},
+    {0x240081, 0x0},
+    {0x240082, 0x0},
+    {0x240083, 0x0},
+    {0x240084, 0x0},
+    {0x240085, 0x0},
+    {0x400fd, 0x0},
+    {0x400f1, 0x0},
+    {0x10011, 0x0},
+    {0x10012, 0x0},
+    {0x10013, 0x0},
+    {0x10018, 0x0},
+    {0x10002, 0x0},
+    {0x100b2, 0x0},
+    {0x101b4, 0x0},
+    {0x102b4, 0x0},
+    {0x103b4, 0x0},
+    {0x104b4, 0x0},
+    {0x105b4, 0x0},
+    {0x106b4, 0x0},
+    {0x107b4, 0x0},
+    {0x108b4, 0x0},
+    {0x11011, 0x0},
+    {0x11012, 0x0},
+    {0x11013, 0x0},
+    {0x11018, 0x0},
+    {0x11002, 0x0},
+    {0x110b2, 0x0},
+    {0x111b4, 0x0},
+    {0x112b4, 0x0},
+    {0x113b4, 0x0},
+    {0x114b4, 0x0},
+    {0x115b4, 0x0},
+    {0x116b4, 0x0},
+    {0x117b4, 0x0},
+    {0x118b4, 0x0},
+    {0x20089, 0x0},
+    {0xc0080, 0x0},
+    {0x200cb, 0x0},
+    {0x10068, 0x0},
+    {0x10069, 0x0},
+    {0x10168, 0x0},
+    {0x10169, 0x0},
+    {0x10268, 0x0},
+    {0x10269, 0x0},
+    {0x10368, 0x0},
+    {0x10369, 0x0},
+    {0x10468, 0x0},
+    {0x10469, 0x0},
+    {0x10568, 0x0},
+    {0x10569, 0x0},
+    {0x10668, 0x0},
+    {0x10669, 0x0},
+    {0x10768, 0x0},
+    {0x10769, 0x0},
+    {0x10868, 0x0},
+    {0x10869, 0x0},
+    {0x100aa, 0x0},
+    {0x10062, 0x0},
+    {0x10001, 0x0},
+    {0x100a0, 0x0},
+    {0x100a1, 0x0},
+    {0x100a2, 0x0},
+    {0x100a3, 0x0},
+    {0x100a4, 0x0},
+    {0x100a5, 0x0},
+    {0x100a6, 0x0},
+    {0x100a7, 0x0},
+    {0x11068, 0x0},
+    {0x11069, 0x0},
+    {0x11168, 0x0},
+    {0x11169, 0x0},
+    {0x11268, 0x0},
+    {0x11269, 0x0},
+    {0x11368, 0x0},
+    {0x11369, 0x0},
+    {0x11468, 0x0},
+    {0x11469, 0x0},
+    {0x11568, 0x0},
+    {0x11569, 0x0},
+    {0x11668, 0x0},
+    {0x11669, 0x0},
+    {0x11768, 0x0},
+    {0x11769, 0x0},
+    {0x11868, 0x0},
+    {0x11869, 0x0},
+    {0x110aa, 0x0},
+    {0x11062, 0x0},
+    {0x11001, 0x0},
+    {0x110a0, 0x0},
+    {0x110a1, 0x0},
+    {0x110a2, 0x0},
+    {0x110a3, 0x0},
+    {0x110a4, 0x0},
+    {0x110a5, 0x0},
+    {0x110a6, 0x0},
+    {0x110a7, 0x0},
+    {0x80, 0x0},
+    {0x1080, 0x0},
+    {0x2080, 0x0},
+    {0x10020, 0x0},
+    {0x10080, 0x0},
+    {0x10081, 0x0},
+    {0x100d0, 0x0},
+    {0x100d1, 0x0},
+    {0x1008c, 0x0},
+    {0x1008d, 0x0},
+    {0x10180, 0x0},
+    {0x10181, 0x0},
+    {0x101d0, 0x0},
+    {0x101d1, 0x0},
+    {0x1018c, 0x0},
+    {0x1018d, 0x0},
+    {0x100c0, 0x0},
+    {0x100c1, 0x0},
+    {0x101c0, 0x0},
+    {0x101c1, 0x0},
+    {0x102c0, 0x0},
+    {0x102c1, 0x0},
+    {0x103c0, 0x0},
+    {0x103c1, 0x0},
+    {0x104c0, 0x0},
+    {0x104c1, 0x0},
+    {0x105c0, 0x0},
+    {0x105c1, 0x0},
+    {0x106c0, 0x0},
+    {0x106c1, 0x0},
+    {0x107c0, 0x0},
+    {0x107c1, 0x0},
+    {0x108c0, 0x0},
+    {0x108c1, 0x0},
+    {0x100ae, 0x0},
+    {0x100af, 0x0},
+    {0x11020, 0x0},
+    {0x11080, 0x0},
+    {0x11081, 0x0},
+    {0x110d0, 0x0},
+    {0x110d1, 0x0},
+    {0x1108c, 0x0},
+    {0x1108d, 0x0},
+    {0x11180, 0x0},
+    {0x11181, 0x0},
+    {0x111d0, 0x0},
+    {0x111d1, 0x0},
+    {0x1118c, 0x0},
+    {0x1118d, 0x0},
+    {0x110c0, 0x0},
+    {0x110c1, 0x0},
+    {0x111c0, 0x0},
+    {0x111c1, 0x0},
+    {0x112c0, 0x0},
+    {0x112c1, 0x0},
+    {0x113c0, 0x0},
+    {0x113c1, 0x0},
+    {0x114c0, 0x0},
+    {0x114c1, 0x0},
+    {0x115c0, 0x0},
+    {0x115c1, 0x0},
+    {0x116c0, 0x0},
+    {0x116c1, 0x0},
+    {0x117c0, 0x0},
+    {0x117c1, 0x0},
+    {0x118c0, 0x0},
+    {0x118c1, 0x0},
+    {0x110ae, 0x0},
+    {0x110af, 0x0},
+    {0x90201, 0x0},
+    {0x90202, 0x0},
+    {0x90203, 0x0},
+    {0x90205, 0x0},
+    {0x90206, 0x0},
+    {0x90207, 0x0},
+    {0x90208, 0x0},
+    {0x20020, 0x0},
+    {0x100080, 0x0},
+    {0x101080, 0x0},
+    {0x102080, 0x0},
+    {0x110020, 0x0},
+    {0x110080, 0x0},
+    {0x110081, 0x0},
+    {0x1100d0, 0x0},
+    {0x1100d1, 0x0},
+    {0x11008c, 0x0},
+    {0x11008d, 0x0},
+    {0x110180, 0x0},
+    {0x110181, 0x0},
+    {0x1101d0, 0x0},
+    {0x1101d1, 0x0},
+    {0x11018c, 0x0},
+    {0x11018d, 0x0},
+    {0x1100c0, 0x0},
+    {0x1100c1, 0x0},
+    {0x1101c0, 0x0},
+    {0x1101c1, 0x0},
+    {0x1102c0, 0x0},
+    {0x1102c1, 0x0},
+    {0x1103c0, 0x0},
+    {0x1103c1, 0x0},
+    {0x1104c0, 0x0},
+    {0x1104c1, 0x0},
+    {0x1105c0, 0x0},
+    {0x1105c1, 0x0},
+    {0x1106c0, 0x0},
+    {0x1106c1, 0x0},
+    {0x1107c0, 0x0},
+    {0x1107c1, 0x0},
+    {0x1108c0, 0x0},
+    {0x1108c1, 0x0},
+    {0x1100ae, 0x0},
+    {0x1100af, 0x0},
+    {0x111020, 0x0},
+    {0x111080, 0x0},
+    {0x111081, 0x0},
+    {0x1110d0, 0x0},
+    {0x1110d1, 0x0},
+    {0x11108c, 0x0},
+    {0x11108d, 0x0},
+    {0x111180, 0x0},
+    {0x111181, 0x0},
+    {0x1111d0, 0x0},
+    {0x1111d1, 0x0},
+    {0x11118c, 0x0},
+    {0x11118d, 0x0},
+    {0x1110c0, 0x0},
+    {0x1110c1, 0x0},
+    {0x1111c0, 0x0},
+    {0x1111c1, 0x0},
+    {0x1112c0, 0x0},
+    {0x1112c1, 0x0},
+    {0x1113c0, 0x0},
+    {0x1113c1, 0x0},
+    {0x1114c0, 0x0},
+    {0x1114c1, 0x0},
+    {0x1115c0, 0x0},
+    {0x1115c1, 0x0},
+    {0x1116c0, 0x0},
+    {0x1116c1, 0x0},
+    {0x1117c0, 0x0},
+    {0x1117c1, 0x0},
+    {0x1118c0, 0x0},
+    {0x1118c1, 0x0},
+    {0x1110ae, 0x0},
+    {0x1110af, 0x0},
+    {0x190201, 0x0},
+    {0x190202, 0x0},
+    {0x190203, 0x0},
+    {0x190205, 0x0},
+    {0x190206, 0x0},
+    {0x190207, 0x0},
+    {0x190208, 0x0},
+    {0x120020, 0x0},
+    {0x200080, 0x0},
+    {0x201080, 0x0},
+    {0x202080, 0x0},
+    {0x210020, 0x0},
+    {0x210080, 0x0},
+    {0x210081, 0x0},
+    {0x2100d0, 0x0},
+    {0x2100d1, 0x0},
+    {0x21008c, 0x0},
+    {0x21008d, 0x0},
+    {0x210180, 0x0},
+    {0x210181, 0x0},
+    {0x2101d0, 0x0},
+    {0x2101d1, 0x0},
+    {0x21018c, 0x0},
+    {0x21018d, 0x0},
+    {0x2100c0, 0x0},
+    {0x2100c1, 0x0},
+    {0x2101c0, 0x0},
+    {0x2101c1, 0x0},
+    {0x2102c0, 0x0},
+    {0x2102c1, 0x0},
+    {0x2103c0, 0x0},
+    {0x2103c1, 0x0},
+    {0x2104c0, 0x0},
+    {0x2104c1, 0x0},
+    {0x2105c0, 0x0},
+    {0x2105c1, 0x0},
+    {0x2106c0, 0x0},
+    {0x2106c1, 0x0},
+    {0x2107c0, 0x0},
+    {0x2107c1, 0x0},
+    {0x2108c0, 0x0},
+    {0x2108c1, 0x0},
+    {0x2100ae, 0x0},
+    {0x2100af, 0x0},
+    {0x211020, 0x0},
+    {0x211080, 0x0},
+    {0x211081, 0x0},
+    {0x2110d0, 0x0},
+    {0x2110d1, 0x0},
+    {0x21108c, 0x0},
+    {0x21108d, 0x0},
+    {0x211180, 0x0},
+    {0x211181, 0x0},
+    {0x2111d0, 0x0},
+    {0x2111d1, 0x0},
+    {0x21118c, 0x0},
+    {0x21118d, 0x0},
+    {0x2110c0, 0x0},
+    {0x2110c1, 0x0},
+    {0x2111c0, 0x0},
+    {0x2111c1, 0x0},
+    {0x2112c0, 0x0},
+    {0x2112c1, 0x0},
+    {0x2113c0, 0x0},
+    {0x2113c1, 0x0},
+    {0x2114c0, 0x0},
+    {0x2114c1, 0x0},
+    {0x2115c0, 0x0},
+    {0x2115c1, 0x0},
+    {0x2116c0, 0x0},
+    {0x2116c1, 0x0},
+    {0x2117c0, 0x0},
+    {0x2117c1, 0x0},
+    {0x2118c0, 0x0},
+    {0x2118c1, 0x0},
+    {0x2110ae, 0x0},
+    {0x2110af, 0x0},
+    {0x290201, 0x0},
+    {0x290202, 0x0},
+    {0x290203, 0x0},
+    {0x290205, 0x0},
+    {0x290206, 0x0},
+    {0x290207, 0x0},
+    {0x290208, 0x0},
+    {0x220020, 0x0},
+    {0x20077, 0x0},
+    {0x20072, 0x0},
+    {0x20073, 0x0},
+    {0x400c0, 0x0},
+    {0x10040, 0x0},
+    {0x10140, 0x0},
+    {0x10240, 0x0},
+    {0x10340, 0x0},
+    {0x10440, 0x0},
+    {0x10540, 0x0},
+    {0x10640, 0x0},
+    {0x10740, 0x0},
+    {0x10840, 0x0},
+    {0x11040, 0x0},
+    {0x11140, 0x0},
+    {0x11240, 0x0},
+    {0x11340, 0x0},
+    {0x11440, 0x0},
+    {0x11540, 0x0},
+    {0x11640, 0x0},
+    {0x11740, 0x0},
+    {0x11840, 0x0},
+
+};
+
+/* P0 message block parameter for training firmware */
+struct dram_cfg_param ddr_fsp0_cfg[] = {
+    {0xd0000, 0x0},
+    {0x54003, 0xe94},
+    {0x54004, 0x4},
+    {0x54006, 0x15},
+    {0x54008, 0x131f},
+    {0x54009, 0xc8},
+    {0x5400b, 0x4},
+    {0x5400d, 0x100},
+    {0x5400f, 0x100},
+    {0x54012, 0x110},
+    {0x54019, 0x36e4},
+    {0x5401a, 0x32},
+    {0x5401b, 0x1146},
+    {0x5401c, 0x1108},
+    {0x5401e, 0x4},
+    {0x5401f, 0x36e4},
+    {0x54020, 0x32},
+    {0x54021, 0x1146},
+    {0x54022, 0x1108},
+    {0x54024, 0x4},
+    {0x54032, 0xe400},
+    {0x54033, 0x3236},
+    {0x54034, 0x4600},
+    {0x54035, 0x811},
+    {0x54036, 0x11},
+    {0x54037, 0x400},
+    {0x54038, 0xe400},
+    {0x54039, 0x3236},
+    {0x5403a, 0x4600},
+    {0x5403b, 0x811},
+    {0x5403c, 0x11},
+    {0x5403d, 0x400},
+    {0xd0000, 0x1}
+};
+/* P1 message block parameter for training firmware */
+struct dram_cfg_param ddr_fsp1_cfg[] = {
+    {0xd0000, 0x0},
+    {0x54002, 0x1},
+    {0x54003, 0x74a},
+    {0x54004, 0x4},
+    {0x54006, 0x15},
+    {0x54008, 0x121f},
+    {0x54009, 0xc8},
+    {0x5400b, 0x4},
+    {0x5400d, 0x100},
+    {0x5400f, 0x100},
+    {0x54012, 0x110},
+    {0x54019, 0x1bb4},
+    {0x5401a, 0x32},
+    {0x5401b, 0x1146},
+    {0x5401c, 0x1108},
+    {0x5401e, 0x4},
+    {0x5401f, 0x1bb4},
+    {0x54020, 0x32},
+    {0x54021, 0x1146},
+    {0x54022, 0x1108},
+    {0x54024, 0x4},
+    {0x54032, 0xb400},
+    {0x54033, 0x321b},
+    {0x54034, 0x4600},
+    {0x54035, 0x811},
+    {0x54036, 0x11},
+    {0x54037, 0x400},
+    {0x54038, 0xb400},
+    {0x54039, 0x321b},
+    {0x5403a, 0x4600},
+    {0x5403b, 0x811},
+    {0x5403c, 0x11},
+    {0x5403d, 0x400},
+    {0xd0000, 0x1}
+};
+
+/* P2 message block parameter for training firmware */
+struct dram_cfg_param ddr_fsp2_cfg[] = {
+    {0xd0000, 0x0},
+    {0x54002, 0x102},
+    {0x54003, 0x270},
+    {0x54004, 0x4},
+    {0x54006, 0x15},
+    {0x54008, 0x121f},
+    {0x54009, 0xc8},
+    {0x5400b, 0x4},
+    {0x5400d, 0x100},
+    {0x5400f, 0x100},
+    {0x54012, 0x110},
+    {0x54019, 0x994},
+    {0x5401a, 0x32},
+    {0x5401b, 0x1146},
+    {0x5401c, 0x1100},
+    {0x5401e, 0x4},
+    {0x5401f, 0x994},
+    {0x54020, 0x32},
+    {0x54021, 0x1146},
+    {0x54022, 0x1100},
+    {0x54024, 0x4},
+    {0x54032, 0x9400},
+    {0x54033, 0x3209},
+    {0x54034, 0x4600},
+    {0x54035, 0x11},
+    {0x54036, 0x11},
+    {0x54037, 0x400},
+    {0x54038, 0x9400},
+    {0x54039, 0x3209},
+    {0x5403a, 0x4600},
+    {0x5403b, 0x11},
+    {0x5403c, 0x11},
+    {0x5403d, 0x400},
+    {0xd0000, 0x1}
+};
+
+/* P0 2D message block parameter for training firmware */
+struct dram_cfg_param ddr_fsp0_2d_cfg[] = {
+    {0xd0000, 0x0},
+    {0x54003, 0xe94},
+    {0x54004, 0x4},
+    {0x54006, 0x15},
+    {0x54008, 0x61},
+    {0x54009, 0xc8},
+    {0x5400b, 0x4},
+    {0x5400d, 0x100},
+    {0x5400f, 0x100},
+    {0x54010, 0x2080},
+    {0x54012, 0x110},
+    {0x54019, 0x36e4},
+    {0x5401a, 0x32},
+    {0x5401b, 0x1146},
+    {0x5401c, 0x1108},
+    {0x5401e, 0x4},
+    {0x5401f, 0x36e4},
+    {0x54020, 0x32},
+    {0x54021, 0x1146},
+    {0x54022, 0x1108},
+    {0x54024, 0x4},
+    {0x54032, 0xe400},
+    {0x54033, 0x3236},
+    {0x54034, 0x4600},
+    {0x54035, 0x811},
+    {0x54036, 0x11},
+    {0x54037, 0x400},
+    {0x54038, 0xe400},
+    {0x54039, 0x3236},
+    {0x5403a, 0x4600},
+    {0x5403b, 0x811},
+    {0x5403c, 0x11},
+    {0x5403d, 0x400},
+    {0xd0000, 0x1}
+};
+
+/* DRAM PHY init engine image */
+struct dram_cfg_param ddr_phy_pie[] = {
+    {0xd0000, 0x0},
+    {0x90000, 0x10},
+    {0x90001, 0x400},
+    {0x90002, 0x10e},
+    {0x90003, 0x0},
+    {0x90004, 0x0},
+    {0x90005, 0x8},
+    {0x90029, 0xb},
+    {0x9002a, 0x480},
+    {0x9002b, 0x109},
+    {0x9002c, 0x8},
+    {0x9002d, 0x448},
+    {0x9002e, 0x139},
+    {0x9002f, 0x8},
+    {0x90030, 0x478},
+    {0x90031, 0x109},
+    {0x90032, 0x0},
+    {0x90033, 0xe8},
+    {0x90034, 0x109},
+    {0x90035, 0x2},
+    {0x90036, 0x10},
+    {0x90037, 0x139},
+    {0x90038, 0xb},
+    {0x90039, 0x7c0},
+    {0x9003a, 0x139},
+    {0x9003b, 0x44},
+    {0x9003c, 0x633},
+    {0x9003d, 0x159},
+    {0x9003e, 0x14f},
+    {0x9003f, 0x630},
+    {0x90040, 0x159},
+    {0x90041, 0x47},
+    {0x90042, 0x633},
+    {0x90043, 0x149},
+    {0x90044, 0x4f},
+    {0x90045, 0x633},
+    {0x90046, 0x179},
+    {0x90047, 0x8},
+    {0x90048, 0xe0},
+    {0x90049, 0x109},
+    {0x9004a, 0x0},
+    {0x9004b, 0x7c8},
+    {0x9004c, 0x109},
+    {0x9004d, 0x0},
+    {0x9004e, 0x1},
+    {0x9004f, 0x8},
+    {0x90050, 0x30},
+    {0x90051, 0x65a},
+    {0x90052, 0x9},
+    {0x90053, 0x0},
+    {0x90054, 0x45a},
+    {0x90055, 0x9},
+    {0x90056, 0x0},
+    {0x90057, 0x448},
+    {0x90058, 0x109},
+    {0x90059, 0x40},
+    {0x9005a, 0x633},
+    {0x9005b, 0x179},
+    {0x9005c, 0x1},
+    {0x9005d, 0x618},
+    {0x9005e, 0x109},
+    {0x9005f, 0x40c0},
+    {0x90060, 0x633},
+    {0x90061, 0x149},
+    {0x90062, 0x8},
+    {0x90063, 0x4},
+    {0x90064, 0x48},
+    {0x90065, 0x4040},
+    {0x90066, 0x633},
+    {0x90067, 0x149},
+    {0x90068, 0x0},
+    {0x90069, 0x4},
+    {0x9006a, 0x48},
+    {0x9006b, 0x40},
+    {0x9006c, 0x633},
+    {0x9006d, 0x149},
+    {0x9006e, 0x0},
+    {0x9006f, 0x658},
+    {0x90070, 0x109},
+    {0x90071, 0x10},
+    {0x90072, 0x4},
+    {0x90073, 0x18},
+    {0x90074, 0x0},
+    {0x90075, 0x4},
+    {0x90076, 0x78},
+    {0x90077, 0x549},
+    {0x90078, 0x633},
+    {0x90079, 0x159},
+    {0x9007a, 0xd49},
+    {0x9007b, 0x633},
+    {0x9007c, 0x159},
+    {0x9007d, 0x94a},
+    {0x9007e, 0x633},
+    {0x9007f, 0x159},
+    {0x90080, 0x441},
+    {0x90081, 0x633},
+    {0x90082, 0x149},
+    {0x90083, 0x42},
+    {0x90084, 0x633},
+    {0x90085, 0x149},
+    {0x90086, 0x1},
+    {0x90087, 0x633},
+    {0x90088, 0x149},
+    {0x90089, 0x0},
+    {0x9008a, 0xe0},
+    {0x9008b, 0x109},
+    {0x9008c, 0xa},
+    {0x9008d, 0x10},
+    {0x9008e, 0x109},
+    {0x9008f, 0x9},
+    {0x90090, 0x3c0},
+    {0x90091, 0x149},
+    {0x90092, 0x9},
+    {0x90093, 0x3c0},
+    {0x90094, 0x159},
+    {0x90095, 0x18},
+    {0x90096, 0x10},
+    {0x90097, 0x109},
+    {0x90098, 0x0},
+    {0x90099, 0x3c0},
+    {0x9009a, 0x109},
+    {0x9009b, 0x18},
+    {0x9009c, 0x4},
+    {0x9009d, 0x48},
+    {0x9009e, 0x18},
+    {0x9009f, 0x4},
+    {0x900a0, 0x58},
+    {0x900a1, 0xb},
+    {0x900a2, 0x10},
+    {0x900a3, 0x109},
+    {0x900a4, 0x1},
+    {0x900a5, 0x10},
+    {0x900a6, 0x109},
+    {0x900a7, 0x5},
+    {0x900a8, 0x7c0},
+    {0x900a9, 0x109},
+    {0x40000, 0x811},
+    {0x40020, 0x880},
+    {0x40040, 0x0},
+    {0x40060, 0x0},
+    {0x40001, 0x4008},
+    {0x40021, 0x83},
+    {0x40041, 0x4f},
+    {0x40061, 0x0},
+    {0x40002, 0x4040},
+    {0x40022, 0x83},
+    {0x40042, 0x51},
+    {0x40062, 0x0},
+    {0x40003, 0x811},
+    {0x40023, 0x880},
+    {0x40043, 0x0},
+    {0x40063, 0x0},
+    {0x40004, 0x720},
+    {0x40024, 0xf},
+    {0x40044, 0x1740},
+    {0x40064, 0x0},
+    {0x40005, 0x16},
+    {0x40025, 0x83},
+    {0x40045, 0x4b},
+    {0x40065, 0x0},
+    {0x40006, 0x716},
+    {0x40026, 0xf},
+    {0x40046, 0x2001},
+    {0x40066, 0x0},
+    {0x40007, 0x716},
+    {0x40027, 0xf},
+    {0x40047, 0x2800},
+    {0x40067, 0x0},
+    {0x40008, 0x716},
+    {0x40028, 0xf},
+    {0x40048, 0xf00},
+    {0x40068, 0x0},
+    {0x40009, 0x720},
+    {0x40029, 0xf},
+    {0x40049, 0x1400},
+    {0x40069, 0x0},
+    {0x4000a, 0xe08},
+    {0x4002a, 0xc15},
+    {0x4004a, 0x0},
+    {0x4006a, 0x0},
+    {0x4000b, 0x625},
+    {0x4002b, 0x15},
+    {0x4004b, 0x0},
+    {0x4006b, 0x0},
+    {0x4000c, 0x4028},
+    {0x4002c, 0x80},
+    {0x4004c, 0x0},
+    {0x4006c, 0x0},
+    {0x4000d, 0xe08},
+    {0x4002d, 0xc1a},
+    {0x4004d, 0x0},
+    {0x4006d, 0x0},
+    {0x4000e, 0x625},
+    {0x4002e, 0x1a},
+    {0x4004e, 0x0},
+    {0x4006e, 0x0},
+    {0x4000f, 0x4040},
+    {0x4002f, 0x80},
+    {0x4004f, 0x0},
+    {0x4006f, 0x0},
+    {0x40010, 0x2604},
+    {0x40030, 0x15},
+    {0x40050, 0x0},
+    {0x40070, 0x0},
+    {0x40011, 0x708},
+    {0x40031, 0x5},
+    {0x40051, 0x0},
+    {0x40071, 0x2002},
+    {0x40012, 0x8},
+    {0x40032, 0x80},
+    {0x40052, 0x0},
+    {0x40072, 0x0},
+    {0x40013, 0x2604},
+    {0x40033, 0x1a},
+    {0x40053, 0x0},
+    {0x40073, 0x0},
+    {0x40014, 0x708},
+    {0x40034, 0xa},
+    {0x40054, 0x0},
+    {0x40074, 0x2002},
+    {0x40015, 0x4040},
+    {0x40035, 0x80},
+    {0x40055, 0x0},
+    {0x40075, 0x0},
+    {0x40016, 0x60a},
+    {0x40036, 0x15},
+    {0x40056, 0x1200},
+    {0x40076, 0x0},
+    {0x40017, 0x61a},
+    {0x40037, 0x15},
+    {0x40057, 0x1300},
+    {0x40077, 0x0},
+    {0x40018, 0x60a},
+    {0x40038, 0x1a},
+    {0x40058, 0x1200},
+    {0x40078, 0x0},
+    {0x40019, 0x642},
+    {0x40039, 0x1a},
+    {0x40059, 0x1300},
+    {0x40079, 0x0},
+    {0x4001a, 0x4808},
+    {0x4003a, 0x880},
+    {0x4005a, 0x0},
+    {0x4007a, 0x0},
+    {0x900aa, 0x0},
+    {0x900ab, 0x790},
+    {0x900ac, 0x11a},
+    {0x900ad, 0x8},
+    {0x900ae, 0x7aa},
+    {0x900af, 0x2a},
+    {0x900b0, 0x10},
+    {0x900b1, 0x7b2},
+    {0x900b2, 0x2a},
+    {0x900b3, 0x0},
+    {0x900b4, 0x7c8},
+    {0x900b5, 0x109},
+    {0x900b6, 0x10},
+    {0x900b7, 0x10},
+    {0x900b8, 0x109},
+    {0x900b9, 0x10},
+    {0x900ba, 0x2a8},
+    {0x900bb, 0x129},
+    {0x900bc, 0x8},
+    {0x900bd, 0x370},
+    {0x900be, 0x129},
+    {0x900bf, 0xa},
+    {0x900c0, 0x3c8},
+    {0x900c1, 0x1a9},
+    {0x900c2, 0xc},
+    {0x900c3, 0x408},
+    {0x900c4, 0x199},
+    {0x900c5, 0x14},
+    {0x900c6, 0x790},
+    {0x900c7, 0x11a},
+    {0x900c8, 0x8},
+    {0x900c9, 0x4},
+    {0x900ca, 0x18},
+    {0x900cb, 0xe},
+    {0x900cc, 0x408},
+    {0x900cd, 0x199},
+    {0x900ce, 0x8},
+    {0x900cf, 0x8568},
+    {0x900d0, 0x108},
+    {0x900d1, 0x18},
+    {0x900d2, 0x790},
+    {0x900d3, 0x16a},
+    {0x900d4, 0x8},
+    {0x900d5, 0x1d8},
+    {0x900d6, 0x169},
+    {0x900d7, 0x10},
+    {0x900d8, 0x8558},
+    {0x900d9, 0x168},
+    {0x900da, 0x1ff8},
+    {0x900db, 0x85a8},
+    {0x900dc, 0x1e8},
+    {0x900dd, 0x50},
+    {0x900de, 0x798},
+    {0x900df, 0x16a},
+    {0x900e0, 0x60},
+    {0x900e1, 0x7a0},
+    {0x900e2, 0x16a},
+    {0x900e3, 0x8},
+    {0x900e4, 0x8310},
+    {0x900e5, 0x168},
+    {0x900e6, 0x8},
+    {0x900e7, 0xa310},
+    {0x900e8, 0x168},
+    {0x900e9, 0xa},
+    {0x900ea, 0x408},
+    {0x900eb, 0x169},
+    {0x900ec, 0x6e},
+    {0x900ed, 0x0},
+    {0x900ee, 0x68},
+    {0x900ef, 0x0},
+    {0x900f0, 0x408},
+    {0x900f1, 0x169},
+    {0x900f2, 0x0},
+    {0x900f3, 0x8310},
+    {0x900f4, 0x168},
+    {0x900f5, 0x0},
+    {0x900f6, 0xa310},
+    {0x900f7, 0x168},
+    {0x900f8, 0x1ff8},
+    {0x900f9, 0x85a8},
+    {0x900fa, 0x1e8},
+    {0x900fb, 0x68},
+    {0x900fc, 0x798},
+    {0x900fd, 0x16a},
+    {0x900fe, 0x78},
+    {0x900ff, 0x7a0},
+    {0x90100, 0x16a},
+    {0x90101, 0x68},
+    {0x90102, 0x790},
+    {0x90103, 0x16a},
+    {0x90104, 0x8},
+    {0x90105, 0x8b10},
+    {0x90106, 0x168},
+    {0x90107, 0x8},
+    {0x90108, 0xab10},
+    {0x90109, 0x168},
+    {0x9010a, 0xa},
+    {0x9010b, 0x408},
+    {0x9010c, 0x169},
+    {0x9010d, 0x58},
+    {0x9010e, 0x0},
+    {0x9010f, 0x68},
+    {0x90110, 0x0},
+    {0x90111, 0x408},
+    {0x90112, 0x169},
+    {0x90113, 0x0},
+    {0x90114, 0x8b10},
+    {0x90115, 0x168},
+    {0x90116, 0x1},
+    {0x90117, 0xab10},
+    {0x90118, 0x168},
+    {0x90119, 0x0},
+    {0x9011a, 0x1d8},
+    {0x9011b, 0x169},
+    {0x9011c, 0x80},
+    {0x9011d, 0x790},
+    {0x9011e, 0x16a},
+    {0x9011f, 0x18},
+    {0x90120, 0x7aa},
+    {0x90121, 0x6a},
+    {0x90122, 0xa},
+    {0x90123, 0x0},
+    {0x90124, 0x1e9},
+    {0x90125, 0x8},
+    {0x90126, 0x8080},
+    {0x90127, 0x108},
+    {0x90128, 0xf},
+    {0x90129, 0x408},
+    {0x9012a, 0x169},
+    {0x9012b, 0xc},
+    {0x9012c, 0x0},
+    {0x9012d, 0x68},
+    {0x9012e, 0x9},
+    {0x9012f, 0x0},
+    {0x90130, 0x1a9},
+    {0x90131, 0x0},
+    {0x90132, 0x408},
+    {0x90133, 0x169},
+    {0x90134, 0x0},
+    {0x90135, 0x8080},
+    {0x90136, 0x108},
+    {0x90137, 0x8},
+    {0x90138, 0x7aa},
+    {0x90139, 0x6a},
+    {0x9013a, 0x0},
+    {0x9013b, 0x8568},
+    {0x9013c, 0x108},
+    {0x9013d, 0xb7},
+    {0x9013e, 0x790},
+    {0x9013f, 0x16a},
+    {0x90140, 0x1f},
+    {0x90141, 0x0},
+    {0x90142, 0x68},
+    {0x90143, 0x8},
+    {0x90144, 0x8558},
+    {0x90145, 0x168},
+    {0x90146, 0xf},
+    {0x90147, 0x408},
+    {0x90148, 0x169},
+    {0x90149, 0xd},
+    {0x9014a, 0x0},
+    {0x9014b, 0x68},
+    {0x9014c, 0x0},
+    {0x9014d, 0x408},
+    {0x9014e, 0x169},
+    {0x9014f, 0x0},
+    {0x90150, 0x8558},
+    {0x90151, 0x168},
+    {0x90152, 0x8},
+    {0x90153, 0x3c8},
+    {0x90154, 0x1a9},
+    {0x90155, 0x3},
+    {0x90156, 0x370},
+    {0x90157, 0x129},
+    {0x90158, 0x20},
+    {0x90159, 0x2aa},
+    {0x9015a, 0x9},
+    {0x9015b, 0x8},
+    {0x9015c, 0xe8},
+    {0x9015d, 0x109},
+    {0x9015e, 0x0},
+    {0x9015f, 0x8140},
+    {0x90160, 0x10c},
+    {0x90161, 0x10},
+    {0x90162, 0x8138},
+    {0x90163, 0x104},
+    {0x90164, 0x8},
+    {0x90165, 0x448},
+    {0x90166, 0x109},
+    {0x90167, 0xf},
+    {0x90168, 0x7c0},
+    {0x90169, 0x109},
+    {0x9016a, 0x0},
+    {0x9016b, 0xe8},
+    {0x9016c, 0x109},
+    {0x9016d, 0x47},
+    {0x9016e, 0x630},
+    {0x9016f, 0x109},
+    {0x90170, 0x8},
+    {0x90171, 0x618},
+    {0x90172, 0x109},
+    {0x90173, 0x8},
+    {0x90174, 0xe0},
+    {0x90175, 0x109},
+    {0x90176, 0x0},
+    {0x90177, 0x7c8},
+    {0x90178, 0x109},
+    {0x90179, 0x8},
+    {0x9017a, 0x8140},
+    {0x9017b, 0x10c},
+    {0x9017c, 0x0},
+    {0x9017d, 0x478},
+    {0x9017e, 0x109},
+    {0x9017f, 0x0},
+    {0x90180, 0x1},
+    {0x90181, 0x8},
+    {0x90182, 0x8},
+    {0x90183, 0x4},
+    {0x90184, 0x0},
+    {0x90006, 0x8},
+    {0x90007, 0x7c8},
+    {0x90008, 0x109},
+    {0x90009, 0x0},
+    {0x9000a, 0x400},
+    {0x9000b, 0x106},
+    {0xd00e7, 0x400},
+    {0x90017, 0x0},
+    {0x9001f, 0x2b},
+    {0x90026, 0x69},
+    {0x400d0, 0x0},
+    {0x400d1, 0x101},
+    {0x400d2, 0x105},
+    {0x400d3, 0x107},
+    {0x400d4, 0x10f},
+    {0x400d5, 0x202},
+    {0x400d6, 0x20a},
+    {0x400d7, 0x20b},
+    {0x2003a, 0x2},
+    {0x200be, 0x3},
+    {0x2000b, 0x41a},
+    {0x2000c, 0xe9},
+    {0x2000d, 0x91c},
+    {0x2000e, 0x2c},
+    {0x12000b, 0x20d},
+    {0x12000c, 0x74},
+    {0x12000d, 0x48e},
+    {0x12000e, 0x2c},
+    {0x22000b, 0xb0},
+    {0x22000c, 0x27},
+    {0x22000d, 0x186},
+    {0x22000e, 0x10},
+    {0x9000c, 0x0},
+    {0x9000d, 0x173},
+    {0x9000e, 0x60},
+    {0x9000f, 0x6110},
+    {0x90010, 0x2152},
+    {0x90011, 0xdfbd},
+    {0x90012, 0x2060},
+    {0x90013, 0x6152},
+    {0x20010, 0x5a},
+    {0x20011, 0x3},
+    {0x120010, 0x5a},
+    {0x120011, 0x3},
+    {0x40080, 0xe0},
+    {0x40081, 0x12},
+    {0x40082, 0xe0},
+    {0x40083, 0x12},
+    {0x40084, 0xe0},
+    {0x40085, 0x12},
+    {0x140080, 0xe0},
+    {0x140081, 0x12},
+    {0x140082, 0xe0},
+    {0x140083, 0x12},
+    {0x140084, 0xe0},
+    {0x140085, 0x12},
+    {0x240080, 0xe0},
+    {0x240081, 0x12},
+    {0x240082, 0xe0},
+    {0x240083, 0x12},
+    {0x240084, 0xe0},
+    {0x240085, 0x12},
+    {0x400fd, 0xf},
+    {0x400f1, 0xe},
+    {0x10011, 0x1},
+    {0x10012, 0x1},
+    {0x10013, 0x180},
+    {0x10018, 0x1},
+    {0x10002, 0x6209},
+    {0x100b2, 0x1},
+    {0x101b4, 0x1},
+    {0x102b4, 0x1},
+    {0x103b4, 0x1},
+    {0x104b4, 0x1},
+    {0x105b4, 0x1},
+    {0x106b4, 0x1},
+    {0x107b4, 0x1},
+    {0x108b4, 0x1},
+    {0x11011, 0x1},
+    {0x11012, 0x1},
+    {0x11013, 0x180},
+    {0x11018, 0x1},
+    {0x11002, 0x6209},
+    {0x110b2, 0x1},
+    {0x111b4, 0x1},
+    {0x112b4, 0x1},
+    {0x113b4, 0x1},
+    {0x114b4, 0x1},
+    {0x115b4, 0x1},
+    {0x116b4, 0x1},
+    {0x117b4, 0x1},
+    {0x118b4, 0x1},
+    {0x20089, 0x1},
+    {0x20088, 0x19},
+    {0xc0080, 0x0},
+    {0xd0000, 0x1},
+
+};
+
+struct dram_fsp_msg ddr_dram_fsp_msg[] = {
+    {
+        /* P0 3733mts 1D */
+        .drate = 3733,
+        .fw_type = FW_1D_IMAGE,
+        .fsp_cfg = ddr_fsp0_cfg,
+        .fsp_cfg_num = ARRAY_SIZE(ddr_fsp0_cfg),
+
+    },
+    {
+        /* P1 1866mts 1D */
+        .drate = 1866,
+        .fw_type = FW_1D_IMAGE,
+        .fsp_cfg = ddr_fsp1_cfg,
+        .fsp_cfg_num = ARRAY_SIZE(ddr_fsp1_cfg),
+
+    },
+    {
+        /* P2 625mts 1D */
+        .drate = 625,
+        .fw_type = FW_1D_IMAGE,
+        .fsp_cfg = ddr_fsp2_cfg,
+        .fsp_cfg_num = ARRAY_SIZE(ddr_fsp2_cfg),
+
+    },
+
+    {
+        /* P0 3733mts 2D */
+        .drate = 3733,
+        .fw_type = FW_2D_IMAGE,
+        .fsp_cfg = ddr_fsp0_2d_cfg,
+        .fsp_cfg_num = ARRAY_SIZE(ddr_fsp0_2d_cfg),
+    },
+
+};
+
+/* ddr timing config params */
+struct dram_timing_info dram_timing = {
+    .ddrc_cfg = ddr_ddrc_cfg,
+    .ddrc_cfg_num = ARRAY_SIZE(ddr_ddrc_cfg),
+    .ddrphy_cfg = ddr_ddrphy_cfg,
+    .ddrphy_cfg_num = ARRAY_SIZE(ddr_ddrphy_cfg),
+    .fsp_msg = ddr_dram_fsp_msg,
+    .fsp_msg_num = ARRAY_SIZE(ddr_dram_fsp_msg),
+    .ddrphy_trained_csr = ddr_ddrphy_trained_csr,
+    .ddrphy_trained_csr_num = ARRAY_SIZE(ddr_ddrphy_trained_csr),
+    .ddrphy_pie = ddr_phy_pie,
+    .ddrphy_pie_num = ARRAY_SIZE(ddr_phy_pie),
+    .fsp_table = { 3733, 1866, 625, },
+    .fsp_cfg = ddr_dram_fsp_cfg,
+    .fsp_cfg_num = ARRAY_SIZE(ddr_dram_fsp_cfg),
+};
Index: b/board/myir/myd_lmx93x/myir_lmx93x.c
===================================================================
--- /dev/null
+++ b/board/myir/myd_lmx93x/myir_lmx93x.c
@@ -0,0 +1,384 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright 2022 NXP
+ */
+
+#include <common.h>
+#include <env.h>
+#include <init.h>
+#include <miiphy.h>
+#include <netdev.h>
+#include <asm/global_data.h>
+#include <asm/arch-imx9/ccm_regs.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/arch-imx9/imx93_pins.h>
+#include <asm/arch/clock.h>
+#include <power/pmic.h>
+#include "../common/tcpc.h"
+#include <dm/device.h>
+#include <dm/uclass.h>
+#include <usb.h>
+#include <dwc3-uboot.h>
+#include <asm/gpio.h>
+#include "i2c_eeprom.h"
+static int has_been_read;
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define UART_PAD_CTRL	(PAD_CTL_DSE(6) | PAD_CTL_FSEL2)
+#define WDOG_PAD_CTRL	(PAD_CTL_DSE(6) | PAD_CTL_ODE | PAD_CTL_PUE | PAD_CTL_PE)
+
+static iomux_v3_cfg_t const uart_pads[] = {
+	MX93_PAD_UART1_RXD__LPUART1_RX | MUX_PAD_CTRL(UART_PAD_CTRL),
+	MX93_PAD_UART1_TXD__LPUART1_TX | MUX_PAD_CTRL(UART_PAD_CTRL),
+};
+
+int board_early_init_f(void)
+{
+	imx_iomux_v3_setup_multiple_pads(uart_pads, ARRAY_SIZE(uart_pads));
+
+	init_uart_clk(LPUART1_CLK_ROOT);
+
+	return 0;
+}
+
+#ifdef CONFIG_USB_TCPC
+struct tcpc_port port1;
+struct tcpc_port port2;
+struct tcpc_port portpd;
+
+static int setup_pd_switch(uint8_t i2c_bus, uint8_t addr)
+{
+	struct udevice *bus;
+	struct udevice *i2c_dev = NULL;
+	int ret;
+	uint8_t valb;
+
+	ret = uclass_get_device_by_seq(UCLASS_I2C, i2c_bus, &bus);
+	if (ret) {
+		printf("%s: Can't find bus\n", __func__);
+		return -EINVAL;
+	}
+
+	ret = dm_i2c_probe(bus, addr, 0, &i2c_dev);
+	if (ret) {
+		printf("%s: Can't find device id=0x%x\n",
+			__func__, addr);
+		return -ENODEV;
+	}
+
+	ret = dm_i2c_read(i2c_dev, 0xB, &valb, 1);
+	if (ret) {
+		printf("%s dm_i2c_read failed, err %d\n", __func__, ret);
+		return -EIO;
+	}
+	valb |= 0x4; /* Set DB_EXIT to exit dead battery mode */
+	ret = dm_i2c_write(i2c_dev, 0xB, (const uint8_t *)&valb, 1);
+	if (ret) {
+		printf("%s dm_i2c_write failed, err %d\n", __func__, ret);
+		return -EIO;
+	}
+
+	/* Set OVP threshold to 23V */
+	valb = 0x6;
+	ret = dm_i2c_write(i2c_dev, 0x8, (const uint8_t *)&valb, 1);
+	if (ret) {
+		printf("%s dm_i2c_write failed, err %d\n", __func__, ret);
+		return -EIO;
+	}
+
+	return 0;
+}
+
+int pd_switch_snk_enable(struct tcpc_port *port)
+{
+	if (port == &port1) {
+		debug("Setup pd switch on port 1\n");
+		return setup_pd_switch(2, 0x71);
+	} else if (port == &port2) {
+		debug("Setup pd switch on port 2\n");
+		return setup_pd_switch(2, 0x73);
+	} else
+		return -EINVAL;
+}
+
+struct tcpc_port_config portpd_config = {
+	.i2c_bus = 2, /*i2c3*/
+	.addr = 0x52,
+	.port_type = TYPEC_PORT_UFP,
+	.max_snk_mv = 20000,
+	.max_snk_ma = 3000,
+	.max_snk_mw = 15000,
+	.op_snk_mv = 9000,
+};
+
+struct tcpc_port_config port1_config = {
+	.i2c_bus = 2, /*i2c3*/
+	.addr = 0x50,
+	.port_type = TYPEC_PORT_UFP,
+	.max_snk_mv = 5000,
+	.max_snk_ma = 3000,
+	.max_snk_mw = 40000,
+	.op_snk_mv = 9000,
+	.switch_setup_func = &pd_switch_snk_enable,
+	.disable_pd = true,
+};
+
+struct tcpc_port_config port2_config = {
+	.i2c_bus = 2, /*i2c3*/
+	.addr = 0x51,
+	.port_type = TYPEC_PORT_UFP,
+	.max_snk_mv = 9000,
+	.max_snk_ma = 3000,
+	.max_snk_mw = 40000,
+	.op_snk_mv = 9000,
+	.switch_setup_func = &pd_switch_snk_enable,
+	.disable_pd = true,
+};
+
+static int setup_typec(void)
+{
+	int ret;
+
+	debug("tcpc_init port pd\n");
+	ret = tcpc_init(&portpd, portpd_config, NULL);
+	if (ret) {
+		printf("%s: tcpc portpd init failed, err=%d\n",
+		       __func__, ret);
+	}
+
+	debug("tcpc_init port 2\n");
+	ret = tcpc_init(&port2, port2_config, NULL);
+	if (ret) {
+		printf("%s: tcpc port2 init failed, err=%d\n",
+		       __func__, ret);
+	}
+
+	debug("tcpc_init port 1\n");
+	ret = tcpc_init(&port1, port1_config, NULL);
+	if (ret) {
+		printf("%s: tcpc port1 init failed, err=%d\n",
+		       __func__, ret);
+	}
+
+	return ret;
+}
+
+int board_usb_init(int index, enum usb_init_type init)
+{
+	int ret = 0;
+	struct tcpc_port *port_ptr;
+
+	debug("board_usb_init %d, type %d\n", index, init);
+
+	if (index == 0)
+		port_ptr = &port1;
+	else
+		port_ptr = &port2;
+
+	if (init == USB_INIT_HOST)
+		tcpc_setup_dfp_mode(port_ptr);
+	else
+		tcpc_setup_ufp_mode(port_ptr);
+
+	return ret;
+}
+
+int board_usb_cleanup(int index, enum usb_init_type init)
+{
+	int ret = 0;
+
+	debug("board_usb_cleanup %d, type %d\n", index, init);
+
+	if (init == USB_INIT_HOST) {
+		if (index == 0)
+			ret = tcpc_disable_src_vbus(&port1);
+		else
+			ret = tcpc_disable_src_vbus(&port2);
+	}
+
+	return ret;
+}
+
+int board_ehci_usb_phy_mode(struct udevice *dev)
+{
+	int ret = 0;
+	enum typec_cc_polarity pol;
+	enum typec_cc_state state;
+	struct tcpc_port *port_ptr;
+
+	debug("%s %d\n", __func__, dev_seq(dev));
+
+	if (dev_seq(dev) == 0)
+		port_ptr = &port1;
+	else
+		port_ptr = &port2;
+
+	tcpc_setup_ufp_mode(port_ptr);
+
+	ret = tcpc_get_cc_status(port_ptr, &pol, &state);
+
+	tcpc_print_log(port_ptr);
+	if (!ret) {
+		if (state == TYPEC_STATE_SRC_RD_RA || state == TYPEC_STATE_SRC_RD)
+			return USB_INIT_HOST;
+	}
+
+	return USB_INIT_DEVICE;
+}
+#endif
+
+static int setup_fec(void)
+{
+	return set_clk_enet(ENET_125MHZ);
+}
+
+int board_phy_config(struct phy_device *phydev)
+{
+	if (phydev->drv->config)
+		phydev->drv->config(phydev);
+
+	return 0;
+}
+
+static int setup_eqos(void)
+{
+	struct blk_ctrl_wakeupmix_regs *bctrl =
+		(struct blk_ctrl_wakeupmix_regs *)BLK_CTRL_WAKEUPMIX_BASE_ADDR;
+
+	if (!IS_ENABLED(CONFIG_TARGET_IMX93_14X14_EVK)) {
+		/* set INTF as RGMII, enable RGMII TXC clock */
+		clrsetbits_le32(&bctrl->eqos_gpr,
+				BCTRL_GPR_ENET_QOS_INTF_MODE_MASK,
+				BCTRL_GPR_ENET_QOS_INTF_SEL_RGMII | BCTRL_GPR_ENET_QOS_CLK_GEN_EN);
+
+		return set_clk_eqos(ENET_125MHZ);
+	}
+
+	return 0;
+}
+
+static void board_gpio_init(void)
+{
+	struct gpio_desc desc;
+	struct gpio_desc desc_eth0;
+	struct gpio_desc desc_eth1;
+	int ret;
+
+	/* Reset ETH0  ETH1 PHY */
+   ret = dm_gpio_lookup_name("GPIO3_22", &desc_eth0);
+   if (ret)
+		return;
+
+   ret = dm_gpio_request(&desc_eth0, "eth0_rst");
+   if (ret)
+		return;
+	 ret = dm_gpio_lookup_name("GPIO3_24", &desc_eth1);
+   if (ret)
+		return;
+
+   ret = dm_gpio_request(&desc_eth1, "eth1_rst");
+   if (ret)
+		return;
+   dm_gpio_set_dir_flags(&desc_eth0, GPIOD_IS_OUT);
+   dm_gpio_set_value(&desc_eth0, 1);
+	dm_gpio_set_dir_flags(&desc_eth1, GPIOD_IS_OUT);
+   dm_gpio_set_value(&desc_eth1, 1);
+
+   udelay(10000);
+   dm_gpio_set_value(&desc_eth0, 0);
+	dm_gpio_set_value(&desc_eth1, 0);
+
+
+	/* Enable EXT1_PWREN for PCIE_3.3V */
+	ret = dm_gpio_lookup_name("gpio@22_13", &desc);
+	if (ret)
+		return;
+
+	ret = dm_gpio_request(&desc, "EXT1_PWREN");
+	if (ret)
+		return;
+
+	dm_gpio_set_dir_flags(&desc, GPIOD_IS_OUT);
+	dm_gpio_set_value(&desc, 1);
+
+	/* Deassert SD3_nRST */
+	ret = dm_gpio_lookup_name("gpio@22_12", &desc);
+	if (ret)
+		return;
+
+	ret = dm_gpio_request(&desc, "SD3_nRST");
+	if (ret)
+		return;
+
+	dm_gpio_set_dir_flags(&desc, GPIOD_IS_OUT);
+	dm_gpio_set_value(&desc, 1);
+
+	if (IS_ENABLED(CONFIG_TARGET_IMX93_14X14_EVK)) {
+		/* Enable I2C_LS_EN levelshift */
+		ret = dm_gpio_lookup_name("gpio@20_16", &desc);
+		if (ret)
+			return;
+
+		ret = dm_gpio_request(&desc, "I2C_LS_EN");
+		if (ret)
+			return;
+
+		dm_gpio_set_dir_flags(&desc, GPIOD_IS_OUT);
+		dm_gpio_set_value(&desc, 1);
+	}
+}
+
+int board_init(void)
+{
+	int ret;
+#ifdef CONFIG_USB_TCPC
+	setup_typec();
+#endif
+
+	if (IS_ENABLED(CONFIG_FEC_MXC))
+		setup_fec();
+
+	if (IS_ENABLED(CONFIG_DWC_ETH_QOS))
+		setup_eqos();
+
+	board_gpio_init();
+
+       if (!has_been_read) {
+               ret = read_eeprom();
+               if (ret)
+                       printf("Error %d reading EEPROM content!\n", ret);
+               has_been_read = (ret == 0) ? 1 : 0;
+               show_eeprom();
+       }
+
+	return 0;
+}
+
+int board_late_init(void)
+{
+printk("myir board:MYD-LMX93X");
+#ifdef CONFIG_ENV_IS_IN_MMC
+	board_late_mmc_env_init();
+#endif
+
+	env_set("sec_boot", "no");
+#ifdef CONFIG_AHAB_BOOT
+	env_set("sec_boot", "yes");
+#endif
+
+#ifdef CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG
+	env_set("board_name", "11X11_EVK");
+	env_set("board_rev", "iMX93");
+#endif
+	return 0;
+}
+
+#ifdef CONFIG_FSL_FASTBOOT
+#ifdef CONFIG_ANDROID_RECOVERY
+int is_recovery_key_pressing(void)
+{
+	return 0;
+}
+#endif /*CONFIG_ANDROID_RECOVERY*/
+#endif /*CONFIG_FSL_FASTBOOT*/
Index: b/board/myir/myd_lmx93x/spl.c
===================================================================
--- /dev/null
+++ b/board/myir/myd_lmx93x/spl.c
@@ -0,0 +1,194 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright 2022 NXP
+ */
+
+#include <common.h>
+#include <command.h>
+#include <cpu_func.h>
+#include <hang.h>
+#include <image.h>
+#include <init.h>
+#include <log.h>
+#include <spl.h>
+#include <asm/global_data.h>
+#include <asm/io.h>
+#include <asm/arch/imx93_pins.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/mach-imx/boot_mode.h>
+#include <asm/mach-imx/mxc_i2c.h>
+#include <asm/arch-mx7ulp/gpio.h>
+#include <asm/mach-imx/syscounter.h>
+#include <asm/mach-imx/ele_api.h>
+#include <dm/uclass.h>
+#include <dm/device.h>
+#include <dm/uclass-internal.h>
+#include <dm/device-internal.h>
+#include <linux/delay.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/ccm_regs.h>
+#include <asm/arch/ddr.h>
+#include <power/pmic.h>
+#include <power/pca9450.h>
+#include <asm/arch/trdc.h>
+#include <asm/sections.h>
+#include <asm/arch/mu.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+int spl_board_boot_device(enum boot_device boot_dev_spl)
+{
+#ifdef CONFIG_SPL_BOOTROM_SUPPORT
+	return BOOT_DEVICE_BOOTROM;
+#else
+	switch (boot_dev_spl) {
+	case SD1_BOOT:
+	case MMC1_BOOT:
+		return BOOT_DEVICE_MMC1;
+	case SD2_BOOT:
+	case MMC2_BOOT:
+		return BOOT_DEVICE_MMC2;
+	default:
+		return BOOT_DEVICE_NONE;
+	}
+#endif
+}
+
+void spl_board_init(void)
+{
+	int ret;
+
+	puts("Normal Boot\n");
+
+	ret = ele_start_rng();
+	if (ret)
+		printf("Fail to start RNG: %d\n", ret);
+}
+
+void spl_dram_init(void)
+{
+	struct dram_timing_info *ptiming = &dram_timing;
+
+	printf("DDR: %uMTS\n", ptiming->fsp_msg[0].drate);
+	ddr_init(ptiming);
+}
+
+#if CONFIG_IS_ENABLED(DM_PMIC_PCA9450)
+int power_init_board(void)
+{
+	struct udevice *dev;
+	int ret;
+	unsigned int val = 0, buck_val;
+
+	ret = pmic_get("pmic@25", &dev);
+	if (ret == -ENODEV) {
+		puts("No pca9450@25\n");
+		return 0;
+	}
+	if (ret != 0)
+		return ret;
+
+	/* BUCKxOUT_DVS0/1 control BUCK123 output */
+	pmic_reg_write(dev, PCA9450_BUCK123_DVS, 0x29);
+
+	/* enable DVS control through PMIC_STBY_REQ */
+	pmic_reg_write(dev, PCA9450_BUCK1CTRL, 0x59);
+
+	ret = pmic_reg_read(dev, PCA9450_PWR_CTRL);
+	if (ret < 0)
+		return ret;
+	else
+		val = ret;
+
+	if (is_voltage_mode(VOLT_LOW_DRIVE)) {
+		buck_val = 0x0c; /* 0.8v for Low drive mode */
+		printf("PMIC: Low Drive Voltage Mode\n");
+	} else if (is_voltage_mode(VOLT_NOMINAL_DRIVE)) {
+		buck_val = 0x10; /* 0.85v for Nominal drive mode */
+		printf("PMIC: Nominal Voltage Mode\n");
+	} else {
+		buck_val = 0x14; /* 0.9v for Over drive mode */
+		printf("PMIC: Over Drive Voltage Mode\n");
+	}
+
+	if (val & PCA9450_REG_PWRCTRL_TOFF_DEB) {
+		pmic_reg_write(dev, PCA9450_BUCK1OUT_DVS0, buck_val);
+		pmic_reg_write(dev, PCA9450_BUCK3OUT_DVS0, buck_val);
+	} else {
+		pmic_reg_write(dev, PCA9450_BUCK1OUT_DVS0, buck_val + 0x4);
+		pmic_reg_write(dev, PCA9450_BUCK3OUT_DVS0, buck_val + 0x4);
+	}
+
+	if (IS_ENABLED(CONFIG_IMX93_EVK_LPDDR4)) {
+		/* Set VDDQ to 1.1V from buck2 */
+		pmic_reg_write(dev, PCA9450_BUCK2OUT_DVS0, 0x28);
+	}
+
+	/* set standby voltage to 0.65v */
+	if (val & PCA9450_REG_PWRCTRL_TOFF_DEB)
+		pmic_reg_write(dev, PCA9450_BUCK1OUT_DVS1, 0x0);
+	else
+		pmic_reg_write(dev, PCA9450_BUCK1OUT_DVS1, 0x4);
+
+	/* I2C_LT_EN*/
+	pmic_reg_write(dev, 0xa, 0x3);
+	return 0;
+}
+#endif
+
+
+void board_init_f(ulong dummy)
+{
+	int ret;
+	
+	/* Clear the BSS. */
+	memset(__bss_start, 0, __bss_end - __bss_start);
+
+	timer_init();
+
+	arch_cpu_init();
+
+	board_early_init_f();
+
+	spl_early_init();
+
+	preloader_console_init();
+
+	ret = imx9_probe_mu();
+	if (ret) {
+		printf("Fail to init ELE API\n");
+	} else {
+		printf("SOC: 0x%x\n", gd->arch.soc_rev);
+		printf("LC: 0x%x\n", gd->arch.lifecycle);
+	}
+
+	clock_init_late();
+
+	power_init_board();
+
+	if (!is_voltage_mode(VOLT_LOW_DRIVE))
+		set_arm_core_max_clk();
+
+	/* Init power of mix */
+	soc_power_init();
+
+	/* Setup TRDC for DDR access */
+	trdc_init();
+
+	/* DDR initialization */
+	spl_dram_init();
+
+	/* Put M33 into CPUWAIT for following kick */
+	ret = m33_prepare();
+	if (!ret)
+		printf("M33 prepare ok\n");
+
+	board_init_r(NULL, 0);
+}
+
+#ifdef CONFIG_ANDROID_SUPPORT
+int board_get_emmc_id(void) {
+	return 0;
+}
+#endif
Index: b/include/configs/myd_lmx93x.h
===================================================================
--- /dev/null
+++ b/include/configs/myd_lmx93x.h
@@ -0,0 +1,188 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright 2022 NXP
+ */
+
+#ifndef __IMX93_EVK_H
+#define __IMX93_EVK_H
+
+#include <linux/sizes.h>
+#include <linux/stringify.h>
+#include <asm/arch/imx-regs.h>
+#include "imx_env.h"
+
+#define CFG_SYS_UBOOT_BASE	\
+	(QSPI0_AMBA_BASE + CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR * 512)
+
+#ifdef CONFIG_AHAB_BOOT
+#define AHAB_ENV "sec_boot=yes\0"
+#else
+#define AHAB_ENV "sec_boot=no\0"
+#endif
+
+#ifdef CONFIG_DISTRO_DEFAULTS
+#define BOOT_TARGET_DEVICES(func) \
+	func(MMC, mmc, 0) \
+	func(MMC, mmc, 1) \
+	func(USB, usb, 0)
+
+#include <config_distro_bootcmd.h>
+#else
+#define BOOTENV
+#endif
+
+#define JH_ROOT_DTB    "imx93-11x11-evk-root.dtb"
+
+#define JAILHOUSE_ENV \
+	"jh_root_dtb=" JH_ROOT_DTB "\0" \
+	"jh_mmcboot=setenv fdtfile ${jh_root_dtb}; " \
+		    "setenv jh_clk clk_ignore_unused mem=1248MB kvm-arm.mode=nvhe; " \
+		    "if run loadimage; then run mmcboot;" \
+		    "else run jh_netboot; fi; \0" \
+	"jh_netboot=setenv fdtfile ${jh_root_dtb}; " \
+		    "setenv jh_clk clk_ignore_unused mem=1248MB kvm-arm.mode=nvhe; run netboot; \0 "
+
+#define CFG_MFG_ENV_SETTINGS \
+	CFG_MFG_ENV_SETTINGS_DEFAULT \
+	"initrd_addr=0x83800000\0" \
+	"initrd_high=0xffffffffffffffff\0" \
+	"emmc_dev=0\0"\
+	"sd_dev=1\0" \
+
+/* Initial environment variables */
+#define CFG_EXTRA_ENV_SETTINGS		\
+	JAILHOUSE_ENV \
+	CFG_MFG_ENV_SETTINGS \
+	BOOTENV \
+	AHAB_ENV \
+	"scriptaddr=0x83500000\0" \
+	"kernel_addr_r=" __stringify(CONFIG_SYS_LOAD_ADDR) "\0" \
+	"image=Image\0" \
+	"splashimage=0x90000000\0" \
+	"console=ttyLP0,115200 earlycon\0" \
+	"fdt_addr_r=0x83000000\0"			\
+	"fdt_addr=0x83000000\0"			\
+	"fdt_high=0xffffffffffffffff\0"		\
+	"cntr_addr=0x98000000\0"			\
+	"cntr_file=os_cntr_signed.bin\0" \
+	"boot_fit=no\0" \
+	"fdtfile=myir-imx93-11x11.dtb\0" \
+	"bootm_size=0x10000000\0" \
+	"mmcdev=" __stringify(CONFIG_SYS_MMC_ENV_DEV)"\0" \
+	"mmcpart=1\0" \
+	"mmcroot=/dev/mmcblk1p2 rootwait rw\0" \
+	"boot_limit=3\0" \
+        "mmcbootpart=2\0" \
+        "mmcbootpart_back=3\0" \
+	"mmcautodetect=yes\0" \
+	"mmcargs=setenv bootargs ${jh_clk} console=${console} root=${mmcroot}\0 " \
+	"loadbootscript=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${script};\0" \
+	"bootscript=echo Running bootscript from mmc ...; " \
+		"source\0" \
+	"loadimage=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${image}\0" \
+	"loadfdt=fatload mmc ${mmcdev}:${mmcpart} ${fdt_addr_r} ${fdtfile}\0" \
+	"loadcntr=fatload mmc ${mmcdev}:${mmcpart} ${cntr_addr} ${cntr_file}\0" \
+	"auth_os=auth_cntr ${cntr_addr}\0" \
+	"boot_os=booti ${loadaddr} - ${fdt_addr_r};\0" \
+	"mmcboot=echo Booting from mmc ...; " \
+		"run mmcargs; " \
+		"if test ${sec_boot} = yes; then " \
+			"if run auth_os; then " \
+				"run boot_os; " \
+			"else " \
+				"echo ERR: failed to authenticate; " \
+			"fi; " \
+		"else " \
+			"if test ${boot_fit} = yes || test ${boot_fit} = try; then " \
+				"bootm ${loadaddr}; " \
+			"else " \
+				"if run loadfdt; then " \
+					"run boot_os; " \
+				"else " \
+					"echo WARN: Cannot load the DT; " \
+				"fi; " \
+			"fi;" \
+		"fi;\0" \
+	"netargs=setenv bootargs ${jh_clk} console=${console} " \
+		"root=/dev/nfs " \
+		"ip=dhcp nfsroot=${serverip}:${nfsroot},v3,tcp\0" \
+	"netboot=echo Booting from net ...; " \
+		"run netargs;  " \
+		"if test ${ip_dyn} = yes; then " \
+			"setenv get_cmd dhcp; " \
+		"else " \
+			"setenv get_cmd tftp; " \
+		"fi; " \
+		"if test ${sec_boot} = yes; then " \
+			"${get_cmd} ${cntr_addr} ${cntr_file}; " \
+			"if run auth_os; then " \
+				"run boot_os; " \
+			"else " \
+				"echo ERR: failed to authenticate; " \
+			"fi; " \
+		"else " \
+			"${get_cmd} ${loadaddr} ${image}; " \
+			"if test ${boot_fit} = yes || test ${boot_fit} = try; then " \
+				"bootm ${loadaddr}; " \
+			"else " \
+				"if ${get_cmd} ${fdt_addr_r} ${fdtfile}; then " \
+					"run boot_os; " \
+				"else " \
+					"echo WARN: Cannot load the DT; " \
+				"fi; " \
+			"fi;" \
+		"fi;\0" \
+	"bsp_bootcmd=echo Running BSP bootcmd ...; " \
+		"mmc dev ${mmcdev}; if mmc rescan; then " \
+		   "if run loadbootscript; then " \
+			   "run bootscript; " \
+		   "else " \
+			   "if test ${sec_boot} = yes; then " \
+				   "if run loadcntr; then " \
+					   "run mmcboot; " \
+				   "else run netboot; " \
+				   "fi; " \
+			    "else " \
+				   "if run loadimage; then " \
+       		                            "if test ${boot_limit} -gt 0 ;then "\
+                	                            "setexpr boot_limit   ${boot_limit} - 1 ;"\
+                        	        "setenv boot_limit ${boot_limit} ;"\
+                              		"saveenv ;"\
+                              		"setenv mmcroot /dev/mmcblk${mmcdev}p${mmcbootpart} rootwait rw;" \
+                       		    "else " \
+                                                	"setenv mmcroot /dev/mmcblk${mmcdev}p${mmcbootpart_back} rootwait rw;" \
+                                  	   "fi;" \
+					   "run mmcboot; " \
+				   "else run netboot; " \
+				   "fi; " \
+				"fi; " \
+		   "fi; " \
+	   "fi;"
+
+/* Link Definitions */
+
+#define CFG_SYS_INIT_RAM_ADDR        0x80000000
+#define CFG_SYS_INIT_RAM_SIZE        0x200000
+
+#define CFG_SYS_SDRAM_BASE           0x80000000
+#define PHYS_SDRAM                      0x80000000
+#define PHYS_SDRAM_SIZE			0x40000000 /* 2GB DDR */
+
+#define CFG_SYS_FSL_USDHC_NUM	2
+
+/* Using ULP WDOG for reset */
+#define WDOG_BASE_ADDR          WDG3_BASE_ADDR
+
+#if defined(CONFIG_CMD_NET)
+#define PHY_ANEG_TIMEOUT 20000
+#endif
+
+#ifdef CONFIG_IMX_MATTER_TRUSTY
+#define NS_ARCH_ARM64 1
+#endif
+
+#ifdef CONFIG_ANDROID_SUPPORT
+#include "imx93_evk_android.h"
+#endif
+
+#endif
Index: b/arch/arm/dts/Makefile
===================================================================
--- a/arch/arm/dts/Makefile
+++ b/arch/arm/dts/Makefile
@@ -1197,7 +1197,8 @@ dtb-$(CONFIG_ARCH_IMX9) += \
 	imx93-9x9-qsb.dtb \
 	imx93-9x9-qsb-ontat-wvga-panel.dtb \
 	imx93-var-som-symphony.dtb \
-	imx93-phyboard-segin.dtb
+	imx93-phyboard-segin.dtb	\
+	myd-lmx93x-11x11.dtb
 
 dtb-$(CONFIG_ARCH_IMXRT) += imxrt1050-evk.dtb \
 	imxrt1020-evk.dtb \
Index: b/arch/arm/dts/myd-lmx93x-11x11-u-boot.dtsi
===================================================================
--- /dev/null
+++ b/arch/arm/dts/myd-lmx93x-11x11-u-boot.dtsi
@@ -0,0 +1,200 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright 2022 NXP
+ */
+
+/ {
+	wdt-reboot {
+		compatible = "wdt-reboot";
+		wdt = <&wdog3>;
+		u-boot,dm-spl;
+	};
+
+	aliases {
+		usbgadget0 = &usbg1;
+		usbgadget1 = &usbg2;
+	};
+
+	usbg1: usbg1 {
+		compatible = "fsl,imx27-usb-gadget";
+		dr_mode = "peripheral";
+		chipidea,usb = <&usbotg1>;
+		status = "okay";
+	};
+
+	usbg2: usbg2 {
+		compatible = "fsl,imx27-usb-gadget";
+		dr_mode = "peripheral";
+		chipidea,usb = <&usbotg2>;
+		status = "okay";
+	};
+
+	firmware {
+		optee {
+			compatible = "linaro,optee-tz";
+			method = "smc";
+		};
+	};
+};
+
+&{/soc@0} {
+	u-boot,dm-pre-reloc;
+	u-boot,dm-spl;
+};
+
+&aips1 {
+	u-boot,dm-spl;
+	u-boot,dm-pre-reloc;
+};
+
+&aips2 {
+	u-boot,dm-spl;
+};
+
+&aips3 {
+	u-boot,dm-spl;
+};
+
+&iomuxc {
+	u-boot,dm-spl;
+};
+
+&reg_usdhc2_vmmc {
+	u-boot,off-on-delay-us = <20000>;
+	u-boot,dm-spl;
+};
+
+&pinctrl_reg_usdhc2_vmmc {
+	u-boot,dm-spl;
+};
+
+&pinctrl_uart1 {
+	u-boot,dm-spl;
+};
+
+&pinctrl_usdhc1 {
+	u-boot,dm-spl;
+};
+
+&pinctrl_usdhc2_gpio {
+	u-boot,dm-spl;
+};
+
+&pinctrl_usdhc2 {
+	u-boot,dm-spl;
+};
+
+&gpio1 {
+	u-boot,dm-spl;
+};
+
+&gpio2 {
+	u-boot,dm-spl;
+};
+
+&gpio3 {
+	u-boot,dm-spl;
+};
+
+&gpio4 {
+	u-boot,dm-spl;
+};
+
+&lpuart1 {
+	u-boot,dm-spl;
+};
+
+&usdhc1 {
+	u-boot,dm-spl;
+};
+
+&usdhc2 {
+	u-boot,dm-spl;
+	fsl,signal-voltage-switch-extra-delay-ms = <8>;
+};
+
+&lpi2c1 {
+	u-boot,dm-spl;
+};
+
+&lpi2c2 {
+	u-boot,dm-spl;
+};
+
+&lpi2c3 {
+	u-boot,dm-spl;
+};
+
+&{/soc@0/bus@44000000/i2c@44350000/pmic@25} {
+	u-boot,dm-spl;
+};
+
+&{/soc@0/bus@44000000/i2c@44350000/pmic@25/regulators} {
+	u-boot,dm-spl;
+};
+
+&pinctrl_lpi2c1 {
+	u-boot,dm-spl;
+};
+
+&pinctrl_lpi2c2 {
+	u-boot,dm-spl;
+};
+
+&pinctrl_lpi2c3 {
+	u-boot,dm-spl;
+};
+
+&fec {
+	phy-reset-duration = <15>;
+	phy-reset-post-delay = <100>;
+};
+
+&ethphy1 {
+	reset-assert-us = <15000>;
+	reset-deassert-us = <100000>;
+};
+
+&usbotg1 {
+	status = "okay";
+	extcon = <&ptn5110>;
+};
+
+&usbotg2 {
+	status = "okay";
+	extcon = <&ptn5110_2>;
+};
+
+&s4muap {
+	u-boot,dm-spl;
+	status = "okay";
+};
+
+&clk {
+	u-boot,dm-pre-reloc;
+	u-boot,dm-spl;
+	/delete-property/ assigned-clocks;
+	/delete-property/ assigned-clock-rates;
+	/delete-property/ assigned-clock-parents;
+};
+
+&osc_32k {
+	u-boot,dm-pre-reloc;
+	u-boot,dm-spl;
+};
+
+&osc_24m {
+	u-boot,dm-pre-reloc;
+	u-boot,dm-spl;
+};
+
+&clk_ext1 {
+	u-boot,dm-pre-reloc;
+	u-boot,dm-spl;
+};
+
+&lcdif {
+	assigned-clocks = <&clk IMX93_CLK_MEDIA_AXI>, <&clk IMX93_CLK_MEDIA_APB>;
+	assigned-clock-parents = <&clk IMX93_CLK_SYS_PLL_PFD1>, <&clk IMX93_CLK_SYS_PLL_PFD1_DIV2>;
+	assigned-clock-rates = <400000000>, <133333334>;
+};
Index: b/arch/arm/dts/myd-lmx93x-11x11.dts
===================================================================
--- /dev/null
+++ b/arch/arm/dts/myd-lmx93x-11x11.dts
@@ -0,0 +1,598 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
+/*
+ * Copyright 2022 NXP
+ */
+
+/dts-v1/;
+#include <dt-bindings/usb/pd.h>
+#include "imx93.dtsi"
+
+/ {
+	model = "NXP i.MX93 11X11 EVK board";
+	compatible = "fsl,imx93-11x11-evk", "fsl,imx93";
+
+	chosen {
+		bootargs = "console=ttyLP0,115200";
+		stdout-path = &lpuart1;
+	};
+
+	reserved-memory {
+		#address-cells = <2>;
+		#size-cells = <2>;
+		ranges;
+
+		linux,cma {
+			compatible = "shared-dma-pool";
+			reusable;
+			alloc-ranges = <0 0x80000000 0 0x40000000>;
+			size = <0 0x10000000>;
+			linux,cma-default;
+		};
+	};
+
+	reg_can2_stby: regulator-can2-stby {
+		compatible = "regulator-fixed";
+		regulator-name = "can2-stby";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		gpio = <&adp5585gpio 5 GPIO_ACTIVE_LOW>;
+		enable-active-low;
+	};
+
+	reg_usdhc2_vmmc: regulator-usdhc2 {
+		compatible = "regulator-fixed";
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_reg_usdhc2_vmmc>;
+		regulator-name = "VSD_3V3";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		gpio = <&gpio3 7 GPIO_ACTIVE_HIGH>;
+		off-on-delay-us = <12000>;
+		enable-active-high;
+	};
+
+	reg_vdd_12v: regulator-vdd-12v {
+		compatible = "regulator-fixed";
+		regulator-name = "reg_vdd_12v";
+		regulator-min-microvolt = <12000000>;
+		regulator-max-microvolt = <12000000>;
+		enable-active-high;
+	};
+
+	reg_vref_1v8: regulator-adc-vref {
+		compatible = "regulator-fixed";
+		regulator-name = "vref_1v8";
+		regulator-min-microvolt = <1800000>;
+		regulator-max-microvolt = <1800000>;
+	};
+
+	usdhc3_pwrseq: usdhc3_pwrseq {
+		compatible = "mmc-pwrseq-simple";
+	};
+
+dsi_host: dsi-host {
+		compatible = "synopsys,dw-mipi-dsi";
+		status = "okay";
+	};
+
+};
+
+&dphy {
+	status = "okay";
+};
+
+&dsi {
+	status = "okay";
+
+};
+
+&eqos {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_eqos>;
+	phy-mode = "rgmii-id";
+	phy-handle = <&ethphy1>;
+	status = "okay";
+
+	mdio {
+		compatible = "snps,dwmac-mdio";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		clock-frequency = <5000000>;
+
+		ethphy1: ethernet-phy@1 {
+			compatible = "ethernet-phy-ieee802.3-c22";
+			reg = <4>;
+			eee-broken-1000t;
+		};
+	};
+};
+
+&fec {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_fec>;
+	phy-mode = "rgmii-id";
+	phy-handle = <&ethphy2>;
+	fsl,magic-packet;
+	status = "okay";
+
+	mdio {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		clock-frequency = <5000000>;
+
+		ethphy2: ethernet-phy@2 {
+			compatible = "ethernet-phy-ieee802.3-c22";
+			reg = <6>;
+			eee-broken-1000t;
+		};
+	};
+};
+
+&lcdif {
+	status = "okay";
+	assigned-clock-rates = <484000000>, <121000000>, <400000000>, <133333333>;
+};
+
+&lpi2c1 {
+	#address-cells = <1>;
+	#size-cells = <0>;
+	clock-frequency = <400000>;
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&pinctrl_lpi2c1>;
+	pinctrl-1 = <&pinctrl_lpi2c1>;
+	status = "okay";
+
+};
+
+&lpi2c2 {
+	#address-cells = <1>;
+	#size-cells = <0>;
+	clock-frequency = <400000>;
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&pinctrl_lpi2c2>;
+	pinctrl-1 = <&pinctrl_lpi2c2>;
+	status = "okay";
+
+	eeprom: 24c32@50 {
+                compatible = "atmel,24c32";
+                reg = <0x50>;
+                pagesize = <32>;
+        };
+
+	pmic@25 {
+		compatible = "nxp,pca9451a";
+		reg = <0x25>;
+
+		regulators {
+			buck1: BUCK1 {
+				regulator-name = "BUCK1";
+				regulator-min-microvolt = <650000>;
+				regulator-max-microvolt = <2237500>;
+				regulator-boot-on;
+				regulator-always-on;
+				regulator-ramp-delay = <3125>;
+			};
+
+			buck2: BUCK2 {
+				regulator-name = "BUCK2";
+				regulator-min-microvolt = <600000>;
+				regulator-max-microvolt = <2187500>;
+				regulator-boot-on;
+				regulator-always-on;
+				regulator-ramp-delay = <3125>;
+			};
+
+			buck4: BUCK4{
+				regulator-name = "BUCK4";
+				regulator-min-microvolt = <600000>;
+				regulator-max-microvolt = <3400000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			buck5: BUCK5{
+				regulator-name = "BUCK5";
+				regulator-min-microvolt = <600000>;
+				regulator-max-microvolt = <3400000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			buck6: BUCK6 {
+				regulator-name = "BUCK6";
+				regulator-min-microvolt = <600000>;
+				regulator-max-microvolt = <3400000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			ldo1: LDO1 {
+				regulator-name = "LDO1";
+				regulator-min-microvolt = <1600000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			ldo4: LDO4 {
+				regulator-name = "LDO4";
+				regulator-min-microvolt = <800000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			ldo5: LDO5 {
+				regulator-name = "LDO5";
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+		};
+	};
+
+
+	adp5585gpio: gpio@34 {
+		compatible = "adp5585";
+		reg = <0x34>;
+		gpio-controller;
+		#gpio-cells = <2>;
+	};
+};
+
+&lpi2c3 {
+	#address-cells = <1>;
+	#size-cells = <0>;
+	clock-frequency = <400000>;
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&pinctrl_lpi2c3>;
+	pinctrl-1 = <&pinctrl_lpi2c3>;
+	status = "okay";
+
+	pcf2131: rtc@53 {
+		compatible = "nxp,pcf2131";
+		reg = <0x53>;
+
+		status = "okay";
+	};
+
+	ptn5110: tcpc@50 {
+		compatible = "nxp,ptn5110";
+		reg = <0x50>;
+
+		status = "okay";
+
+		port {
+			typec1_dr_sw: endpoint {
+				remote-endpoint = <&usb1_drd_sw>;
+			};
+		};
+
+		typec1_con: connector {
+			compatible = "usb-c-connector";
+			label = "USB-C";
+			power-role = "dual";
+			data-role = "dual";
+			try-power-role = "sink";
+			source-pdos = <PDO_FIXED(5000, 3000, PDO_FIXED_USB_COMM)>;
+			sink-pdos = <PDO_FIXED(5000, 3000, PDO_FIXED_USB_COMM)
+				     PDO_VAR(5000, 20000, 3000)>;
+			op-sink-microwatt = <15000000>;
+			self-powered;
+		};
+	};
+
+	ptn5110_2: tcpc@51 {
+		compatible = "nxp,ptn5110";
+		reg = <0x51>;
+
+		status = "okay";
+
+		port {
+			typec2_dr_sw: endpoint {
+				remote-endpoint = <&usb2_drd_sw>;
+			};
+		};
+
+		typec2_con: connector {
+			compatible = "usb-c-connector";
+			label = "USB-C";
+			power-role = "dual";
+			data-role = "dual";
+			try-power-role = "sink";
+			source-pdos = <PDO_FIXED(5000, 3000, PDO_FIXED_USB_COMM)>;
+			sink-pdos = <PDO_FIXED(5000, 3000, PDO_FIXED_USB_COMM)
+				     PDO_VAR(5000, 20000, 3000)>;
+			op-sink-microwatt = <15000000>;
+			self-powered;
+		};
+
+	};
+};
+
+&lpuart1 { /* console */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart1>;
+	status = "okay";
+};
+
+&usbotg1 {
+	dr_mode = "otg";
+	hnp-disable;
+	srp-disable;
+	adp-disable;
+	usb-role-switch;
+	disable-over-current;
+	samsung,picophy-pre-emp-curr-control = <3>;
+	samsung,picophy-dc-vol-level-adjust = <7>;
+	status = "okay";
+
+	port {
+		usb1_drd_sw: endpoint {
+			remote-endpoint = <&typec1_dr_sw>;
+		};
+	};
+};
+
+&usbotg2 {
+	dr_mode = "otg";
+	hnp-disable;
+	srp-disable;
+	adp-disable;
+	usb-role-switch;
+	disable-over-current;
+	samsung,picophy-pre-emp-curr-control = <3>;
+	samsung,picophy-dc-vol-level-adjust = <7>;
+	status = "okay";
+
+	port {
+		usb2_drd_sw: endpoint {
+			remote-endpoint = <&typec2_dr_sw>;
+		};
+	};
+};
+
+&usdhc1 {
+	pinctrl-names = "default", "state_100mhz", "state_200mhz";
+	pinctrl-0 = <&pinctrl_usdhc1>;
+	pinctrl-1 = <&pinctrl_usdhc1_100mhz>;
+	pinctrl-2 = <&pinctrl_usdhc1_200mhz>;
+	bus-width = <8>;
+	non-removable;
+	status = "okay";
+};
+
+&usdhc2 {
+	pinctrl-names = "default", "state_100mhz", "state_200mhz";
+	pinctrl-0 = <&pinctrl_usdhc2>, <&pinctrl_usdhc2_gpio>;
+	pinctrl-1 = <&pinctrl_usdhc2_100mhz>, <&pinctrl_usdhc2_gpio>;
+	pinctrl-2 = <&pinctrl_usdhc2_200mhz>, <&pinctrl_usdhc2_gpio>;
+	cd-gpios = <&gpio3 00 GPIO_ACTIVE_LOW>;
+	vmmc-supply = <&reg_usdhc2_vmmc>;
+	bus-width = <4>;
+	status = "okay";
+	no-sdio;
+	no-mmc;
+};
+
+&usdhc3 {
+	status = "disabled";
+};
+
+
+
+&flexspi1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_flexspi>;
+	assigned-clock-rates = <80000000>;
+	status = "okay";
+
+	flash0: mt25qu512a@0 {
+		reg = <0>;
+		#address-cells = <1>;
+		#size-cells = <1>;
+		compatible = "jedec,spi-nor";
+		spi-max-frequency = <80000000>;
+		spi-tx-bus-width = <4>;
+		spi-rx-bus-width = <4>;
+	};
+};
+
+&iomuxc {
+	pinctrl_flexcan2: flexcan2grp {
+		fsl,pins = <
+			MX93_PAD_GPIO_IO25__CAN2_TX	0x139e
+			MX93_PAD_GPIO_IO27__CAN2_RX	0x139e
+		>;
+	};
+
+	pinctrl_lpi2c1: lpi2c1grp {
+		fsl,pins = <
+			MX93_PAD_I2C1_SCL__LPI2C1_SCL			0x40000b9e
+			MX93_PAD_I2C1_SDA__LPI2C1_SDA			0x40000b9e
+		>;
+	};
+
+	pinctrl_lpi2c2: lpi2c2grp {
+		fsl,pins = <
+			MX93_PAD_I2C2_SCL__LPI2C2_SCL			0x40000b9e
+			MX93_PAD_I2C2_SDA__LPI2C2_SDA			0x40000b9e
+		>;
+	};
+
+	pinctrl_pcal6524: pcal6524grp {
+		fsl,pins = <
+			MX93_PAD_CCM_CLKO2__GPIO3_IO27			0x31e
+		>;
+	};
+
+	pinctrl_eqos: eqosgrp {
+		fsl,pins = <
+			MX93_PAD_ENET1_MDC__ENET_QOS_MDC			0x57e
+			MX93_PAD_ENET1_MDIO__ENET_QOS_MDIO			0x57e
+			MX93_PAD_ENET1_RD0__ENET_QOS_RGMII_RD0			0x57e
+			MX93_PAD_ENET1_RD1__ENET_QOS_RGMII_RD1			0x57e
+			MX93_PAD_ENET1_RD2__ENET_QOS_RGMII_RD2			0x57e
+			MX93_PAD_ENET1_RD3__ENET_QOS_RGMII_RD3			0x57e
+			MX93_PAD_ENET1_RXC__CCM_ENET_QOS_CLOCK_GENERATE_RX_CLK	0x5fe
+			MX93_PAD_ENET1_RX_CTL__ENET_QOS_RGMII_RX_CTL		0x57e
+			MX93_PAD_ENET1_TD0__ENET_QOS_RGMII_TD0			0x57e
+			MX93_PAD_ENET1_TD1__ENET_QOS_RGMII_TD1			0x57e
+			MX93_PAD_ENET1_TD2__ENET_QOS_RGMII_TD2			0x57e
+			MX93_PAD_ENET1_TD3__ENET_QOS_RGMII_TD3			0x57e
+			MX93_PAD_ENET1_TXC__CCM_ENET_QOS_CLOCK_GENERATE_TX_CLK	0x5fe
+			MX93_PAD_ENET1_TX_CTL__ENET_QOS_RGMII_TX_CTL		0x57e
+		>;
+	};
+
+	pinctrl_flexspi: flexspigrp {
+		fsl,pins = <
+			MX93_PAD_SD3_CMD__FLEXSPI1_A_SS0_B      0x3fe
+			MX93_PAD_SD3_CLK__FLEXSPI1_A_SCLK       0x3fe
+			MX93_PAD_SD3_DATA0__FLEXSPI1_A_DATA00   0x3fe
+			MX93_PAD_SD3_DATA1__FLEXSPI1_A_DATA01   0x3fe
+			MX93_PAD_SD3_DATA2__FLEXSPI1_A_DATA02   0x3fe
+			MX93_PAD_SD3_DATA3__FLEXSPI1_A_DATA03   0x3fe
+		>;
+	};
+
+	pinctrl_lpi2c3: lpi2c3grp {
+		fsl,pins = <
+			MX93_PAD_GPIO_IO28__LPI2C3_SDA			0x40000b9e
+			MX93_PAD_GPIO_IO29__LPI2C3_SCL			0x40000b9e
+		>;
+	};
+
+	pinctrl_fec: fecgrp {
+		fsl,pins = <
+			MX93_PAD_ENET2_MDC__ENET1_MDC			0x57e
+			MX93_PAD_ENET2_MDIO__ENET1_MDIO			0x57e
+			MX93_PAD_ENET2_RD0__ENET1_RGMII_RD0		0x57e
+			MX93_PAD_ENET2_RD1__ENET1_RGMII_RD1		0x57e
+			MX93_PAD_ENET2_RD2__ENET1_RGMII_RD2		0x57e
+			MX93_PAD_ENET2_RD3__ENET1_RGMII_RD3		0x57e
+			MX93_PAD_ENET2_RXC__ENET1_RGMII_RXC		0x5fe
+			MX93_PAD_ENET2_RX_CTL__ENET1_RGMII_RX_CTL	0x57e
+			MX93_PAD_ENET2_TD0__ENET1_RGMII_TD0		0x57e
+			MX93_PAD_ENET2_TD1__ENET1_RGMII_TD1		0x57e
+			MX93_PAD_ENET2_TD2__ENET1_RGMII_TD2		0x57e
+			MX93_PAD_ENET2_TD3__ENET1_RGMII_TD3		0x57e
+			MX93_PAD_ENET2_TXC__ENET1_RGMII_TXC		0x5fe
+			MX93_PAD_ENET2_TX_CTL__ENET1_RGMII_TX_CTL	0x57e
+		>;
+	};
+
+	pinctrl_uart1: uart1grp {
+		fsl,pins = <
+			MX93_PAD_UART1_RXD__LPUART1_RX			0x31e
+			MX93_PAD_UART1_TXD__LPUART1_TX			0x31e
+		>;
+	};
+
+	/* need to config the SION for data and cmd pad, refer to ERR052021 */
+	pinctrl_usdhc1: usdhc1grp {
+		fsl,pins = <
+			MX93_PAD_SD1_CLK__USDHC1_CLK		0x1582
+			MX93_PAD_SD1_CMD__USDHC1_CMD		0x40001382
+			MX93_PAD_SD1_DATA0__USDHC1_DATA0	0x40001382
+			MX93_PAD_SD1_DATA1__USDHC1_DATA1	0x40001382
+			MX93_PAD_SD1_DATA2__USDHC1_DATA2	0x40001382
+			MX93_PAD_SD1_DATA3__USDHC1_DATA3	0x40001382
+			MX93_PAD_SD1_DATA4__USDHC1_DATA4	0x40001382
+			MX93_PAD_SD1_DATA5__USDHC1_DATA5	0x40001382
+			MX93_PAD_SD1_DATA6__USDHC1_DATA6	0x40001382
+			MX93_PAD_SD1_DATA7__USDHC1_DATA7	0x40001382
+			MX93_PAD_SD1_STROBE__USDHC1_STROBE	0x1582
+		>;
+	};
+
+	/* need to config the SION for data and cmd pad, refer to ERR052021 */
+	pinctrl_usdhc1_100mhz: usdhc1-100mhzgrp {
+		fsl,pins = <
+			MX93_PAD_SD1_CLK__USDHC1_CLK		0x158e
+			MX93_PAD_SD1_CMD__USDHC1_CMD		0x4000138e
+			MX93_PAD_SD1_DATA0__USDHC1_DATA0	0x4000138e
+			MX93_PAD_SD1_DATA1__USDHC1_DATA1	0x4000138e
+			MX93_PAD_SD1_DATA2__USDHC1_DATA2	0x4000138e
+			MX93_PAD_SD1_DATA3__USDHC1_DATA3	0x4000138e
+			MX93_PAD_SD1_DATA4__USDHC1_DATA4	0x4000138e
+			MX93_PAD_SD1_DATA5__USDHC1_DATA5	0x4000138e
+			MX93_PAD_SD1_DATA6__USDHC1_DATA6	0x4000138e
+			MX93_PAD_SD1_DATA7__USDHC1_DATA7	0x4000138e
+			MX93_PAD_SD1_STROBE__USDHC1_STROBE	0x158e
+		>;
+	};
+
+	/* need to config the SION for data and cmd pad, refer to ERR052021 */
+	pinctrl_usdhc1_200mhz: usdhc1-200mhzgrp {
+		fsl,pins = <
+			MX93_PAD_SD1_CLK__USDHC1_CLK		0x15fe
+			MX93_PAD_SD1_CMD__USDHC1_CMD		0x400013fe
+			MX93_PAD_SD1_DATA0__USDHC1_DATA0	0x400013fe
+			MX93_PAD_SD1_DATA1__USDHC1_DATA1	0x400013fe
+			MX93_PAD_SD1_DATA2__USDHC1_DATA2	0x400013fe
+			MX93_PAD_SD1_DATA3__USDHC1_DATA3	0x400013fe
+			MX93_PAD_SD1_DATA4__USDHC1_DATA4	0x400013fe
+			MX93_PAD_SD1_DATA5__USDHC1_DATA5	0x400013fe
+			MX93_PAD_SD1_DATA6__USDHC1_DATA6	0x400013fe
+			MX93_PAD_SD1_DATA7__USDHC1_DATA7	0x400013fe
+			MX93_PAD_SD1_STROBE__USDHC1_STROBE	0x15fe
+		>;
+	};
+
+	pinctrl_reg_usdhc2_vmmc: regusdhc2vmmcgrp {
+		fsl,pins = <
+			MX93_PAD_SD2_RESET_B__GPIO3_IO07	0x31e
+		>;
+	};
+
+	pinctrl_usdhc2_gpio: usdhc2gpiogrp {
+		fsl,pins = <
+			MX93_PAD_SD2_CD_B__GPIO3_IO00		0x31e
+		>;
+	};
+
+	/* need to config the SION for data and cmd pad, refer to ERR052021 */
+	pinctrl_usdhc2: usdhc2grp {
+		fsl,pins = <
+			MX93_PAD_SD2_CLK__USDHC2_CLK		0x1582
+			MX93_PAD_SD2_CMD__USDHC2_CMD		0x40001382
+			MX93_PAD_SD2_DATA0__USDHC2_DATA0	0x40001382
+			MX93_PAD_SD2_DATA1__USDHC2_DATA1	0x40001382
+			MX93_PAD_SD2_DATA2__USDHC2_DATA2	0x40001382
+			MX93_PAD_SD2_DATA3__USDHC2_DATA3	0x40001382
+			MX93_PAD_SD2_VSELECT__USDHC2_VSELECT	0x51e
+		>;
+	};
+
+	/* need to config the SION for data and cmd pad, refer to ERR052021 */
+	pinctrl_usdhc2_100mhz: usdhc2-100mhzgrp {
+		fsl,pins = <
+			MX93_PAD_SD2_CLK__USDHC2_CLK		0x158e
+			MX93_PAD_SD2_CMD__USDHC2_CMD		0x4000138e
+			MX93_PAD_SD2_DATA0__USDHC2_DATA0	0x4000138e
+			MX93_PAD_SD2_DATA1__USDHC2_DATA1	0x4000138e
+			MX93_PAD_SD2_DATA2__USDHC2_DATA2	0x4000138e
+			MX93_PAD_SD2_DATA3__USDHC2_DATA3	0x4000138e
+			MX93_PAD_SD2_VSELECT__USDHC2_VSELECT	0x51e
+		>;
+	};
+
+	/* need to config the SION for data and cmd pad, refer to ERR052021 */
+	pinctrl_usdhc2_200mhz: usdhc2-200mhzgrp {
+		fsl,pins = <
+			MX93_PAD_SD2_CLK__USDHC2_CLK		0x15fe
+			MX93_PAD_SD2_CMD__USDHC2_CMD		0x400013fe
+			MX93_PAD_SD2_DATA0__USDHC2_DATA0	0x400013fe
+			MX93_PAD_SD2_DATA1__USDHC2_DATA1	0x400013fe
+			MX93_PAD_SD2_DATA2__USDHC2_DATA2	0x400013fe
+			MX93_PAD_SD2_DATA3__USDHC2_DATA3	0x400013fe
+			MX93_PAD_SD2_VSELECT__USDHC2_VSELECT	0x51e
+		>;
+	};
+};
+
+&wdog3 {
+	status = "okay";
+};
Index: b/configs/myir_lmx93x_1G_defconfig
===================================================================
--- /dev/null
+++ b/configs/myir_lmx93x_1G_defconfig
@@ -0,0 +1,212 @@
+CONFIG_ARM=y
+CONFIG_ARCH_IMX9=y
+CONFIG_TEXT_BASE=0x80200000
+CONFIG_SYS_MALLOC_LEN=0x2000000
+CONFIG_SYS_MALLOC_F_LEN=0x18000
+CONFIG_SPL_LIBCOMMON_SUPPORT=y
+CONFIG_SPL_LIBGENERIC_SUPPORT=y
+CONFIG_NR_DRAM_BANKS=2
+CONFIG_ENV_SIZE=0x4000
+CONFIG_ENV_OFFSET=0x700000
+CONFIG_ENV_OFFSET_REDUND=0x704000
+CONFIG_ENV_SECT_SIZE=0x10000
+CONFIG_DM_GPIO=y
+CONFIG_DEFAULT_DEVICE_TREE="myd-lmx93x-11x11"
+CONFIG_SPL_TEXT_BASE=0x2049A000
+CONFIG_USB_TCPC=y
+CONFIG_TARGET_MYD_LMX93X=y
+CONFIG_MYD_LMX93X_LPDDR4X_1G=y
+CONFIG_SYS_PROMPT="u-boot=> "
+CONFIG_RTC_PCF2131=y
+CONFIG_SPL_SERIAL=y
+CONFIG_SPL_DRIVERS_MISC=y
+CONFIG_SPL_STACK=0x20519dd0
+CONFIG_SPL=y
+CONFIG_SPL_IMX_ROMAPI_LOADADDR=0x88000000
+CONFIG_SPL_LOAD_IMX_CONTAINER=y
+CONFIG_IMX_CONTAINER_CFG="arch/arm/mach-imx/imx9/container.cfg"
+CONFIG_SYS_LOAD_ADDR=0x80400000
+CONFIG_SYS_MEMTEST_START=0x80000000
+CONFIG_SYS_MEMTEST_END=0x90000000
+CONFIG_REMAKE_ELF=y
+CONFIG_SYS_MONITOR_LEN=524288
+CONFIG_DISTRO_DEFAULTS=y
+CONFIG_BOOTCOMMAND="run distro_bootcmd;run bsp_bootcmd"
+CONFIG_DEFAULT_FDT_FILE="myd-lmx93x-11x11.dtb"
+CONFIG_ARCH_MISC_INIT=y
+CONFIG_BOARD_EARLY_INIT_F=y
+CONFIG_BOARD_LATE_INIT=y
+CONFIG_SPL_MAX_SIZE=0x26000
+CONFIG_SPL_HAS_BSS_LINKER_SECTION=y
+CONFIG_SPL_BSS_START_ADDR=0x2051a000
+CONFIG_SPL_BSS_MAX_SIZE=0x2000
+CONFIG_SPL_BOARD_INIT=y
+CONFIG_SPL_BOOTROM_SUPPORT=y
+# CONFIG_SPL_SHARES_INIT_SP_ADDR is not set
+CONFIG_SYS_SPL_MALLOC=y
+CONFIG_HAS_CUSTOM_SPL_MALLOC_START=y
+CONFIG_CUSTOM_SYS_SPL_MALLOC_ADDR=0x83200000
+CONFIG_SYS_SPL_MALLOC_SIZE=0x80000
+CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_USE_SECTOR=y
+CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR=0x1040
+CONFIG_SPL_I2C=y
+CONFIG_SPL_POWER=y
+CONFIG_SPL_WATCHDOG=y
+CONFIG_SYS_MAXARGS=64
+CONFIG_SYS_CBSIZE=2048
+CONFIG_SYS_PBSIZE=2074
+CONFIG_CMD_ERASEENV=y
+CONFIG_CMD_NVEDIT_EFI=y
+CONFIG_CMD_CRC32=y
+CONFIG_CRC32_VERIFY=y
+CONFIG_CMD_MEMTEST=y
+CONFIG_CMD_CLK=y
+CONFIG_CMD_DFU=y
+CONFIG_CMD_FUSE=y
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_GPT=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_PART=y
+CONFIG_CMD_POWEROFF=y
+CONFIG_CMD_USB=y
+CONFIG_CMD_DHCP=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_SNTP=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_EFIDEBUG=y
+CONFIG_CMD_RTC=y
+CONFIG_CMD_TIME=y
+CONFIG_CMD_GETTIME=y
+CONFIG_CMD_TIMER=y
+CONFIG_CMD_REGULATOR=y
+CONFIG_CMD_HASH=y
+CONFIG_CMD_EXT2=y
+CONFIG_CMD_EXT4=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_CMD_FAT=y
+CONFIG_CMD_FS_GENERIC=y
+CONFIG_CMD_USB_MASS_STORAGE=y
+CONFIG_OF_CONTROL=y
+CONFIG_SPL_OF_CONTROL=y
+CONFIG_ENV_OVERWRITE=y
+CONFIG_ENV_IS_NOWHERE=y
+CONFIG_ENV_IS_IN_MMC=y
+CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+CONFIG_SYS_MMC_ENV_DEV=1
+CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG=y
+CONFIG_USE_ETHPRIME=y
+CONFIG_ETHPRIME="eth1"
+CONFIG_NET_RANDOM_ETHADDR=y
+CONFIG_SPL_DM=y
+CONFIG_REGMAP=y
+CONFIG_SYSCON=y
+CONFIG_DFU_MMC=y
+CONFIG_DFU_RAM=y
+CONFIG_IMX_RGPIO2P=y
+
+CONFIG_DM_SPI_FLASH=y
+CONFIG_DM_SPI=y
+CONFIG_NXP_FSPI=y
+CONFIG_SPI=y
+CONFIG_SPI_FLASH_STMICRO=y
+CONFIG_SF_DEFAULT_BUS=0
+CONFIG_SF_DEFAULT_SPEED=40000000
+
+CONFIG_CMD_FASTBOOT=y
+CONFIG_USB_FUNCTION_FASTBOOT=y
+CONFIG_FASTBOOT_UUU_SUPPORT=y
+CONFIG_FASTBOOT=y
+CONFIG_FASTBOOT_BUF_ADDR=0x82800000
+CONFIG_FASTBOOT_BUF_SIZE=0x20000000
+CONFIG_FASTBOOT_FLASH=y
+CONFIG_EFI_PARTITION=y
+CONFIG_FASTBOOT_USB_DEV=0
+CONFIG_USB_PORT_AUTO=y
+
+CONFIG_DM_PCA953X=y
+CONFIG_DM_I2C=y
+CONFIG_SYS_I2C_IMX_LPI2C=y
+CONFIG_SUPPORT_EMMC_BOOT=y
+CONFIG_MMC_IO_VOLTAGE=y
+CONFIG_MMC_UHS_SUPPORT=y
+
+CONFIG_MMC_HS200_SUPPORT=y
+CONFIG_FSL_USDHC=y
+CONFIG_PHY_REALTEK=y
+CONFIG_DM_ETH_PHY=y
+CONFIG_PHY_GIGE=y
+CONFIG_DWC_ETH_QOS=y
+CONFIG_DWC_ETH_QOS_IMX=y
+CONFIG_FEC_MXC=y
+CONFIG_MII=y
+CONFIG_PINCTRL=y
+CONFIG_SPL_PINCTRL=y
+CONFIG_PINCTRL_IMX93=y
+CONFIG_DM_PMIC=y
+CONFIG_SPL_DM_PMIC_PCA9450=y
+CONFIG_DM_REGULATOR=y
+CONFIG_DM_REGULATOR_FIXED=y
+CONFIG_DM_REGULATOR_GPIO=y
+CONFIG_DM_PMIC_PCA9450=y
+CONFIG_DM_REGULATOR_PCA9450=y
+CONFIG_DM_RTC=y
+CONFIG_DM_SERIAL=y
+CONFIG_FSL_LPUART=y
+CONFIG_USB=y
+CONFIG_DM_USB=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_MAX_CONTROLLER_COUNT=2
+CONFIG_USB_STORAGE=y
+CONFIG_USB_GADGET=y
+CONFIG_USB_GADGET_MANUFACTURER="FSL"
+CONFIG_USB_GADGET_VENDOR_NUM=0x1fc9
+CONFIG_USB_GADGET_PRODUCT_NUM=0x0152
+CONFIG_CI_UDC=y
+CONFIG_USB_HOST_ETHER=y
+CONFIG_USB_ETHER_ASIX=y
+CONFIG_USB_ETHER_RTL8152=y
+CONFIG_ULP_WATCHDOG=y
+CONFIG_LZO=y
+CONFIG_BZIP2=y
+CONFIG_HUSH_PARSER=y
+CONFIG_CLK_IMX93=y
+CONFIG_SPL_CLK_IMX93=y
+CONFIG_OF_LIBFDT_OVERLAY=y
+CONFIG_OF_SYSTEM_SETUP=y
+CONFIG_ADP5585_GPIO=y
+
+CONFIG_POWER_DOMAIN=y
+CONFIG_IMX93_BLK_CTRL=y
+CONFIG_PHY=y
+CONFIG_PHY_IMX93_MIPI_DPHY=y
+CONFIG_MIPI_DPHY_HELPERS=y
+CONFIG_VIDEO_IMX_LCDIFV3=y
+CONFIG_VIDEO_IMX_DW_DSI=y
+CONFIG_VIDEO=y
+CONFIG_BMP_16BPP=y
+CONFIG_BMP_24BPP=y
+CONFIG_BMP_32BPP=y
+CONFIG_VIDEO_LOGO=y
+CONFIG_VIDEO_LCD_RAYDIUM_RM67191=y
+CONFIG_VIDEO_ADV7535=y
+CONFIG_SYS_WHITE_ON_BLACK=y
+CONFIG_SPLASH_SCREEN=y
+CONFIG_SPLASH_SCREEN_ALIGN=y
+CONFIG_CMD_BMP=y
+
+CONFIG_CMD_DEKBLOB=y
+CONFIG_IMX_ELE_DEK_ENCAP=y
+CONFIG_IMX_TMU=y
+CONFIG_DM_THERMAL=y
+
+
+CONFIG_IMX93_EVK_LPDDR4X_1G=y
+CONFIG_SPL_I2C_EEPROM=y
+CONFIG_I2C_EEPROM=y
+CONFIG_WATCHDOG=y
+CONFIG_WATCHDOG_TIMEOUT_MSECS=60
+CONFIG_CYCLIC=y
+CONFIG_CYCLIC_MAX_CPU_TIME_US=1000
+CONFIG_SYS_REDUNDAND_ENVIRONMENT=y
Index: b/configs/myir_lmx93x_2G_defconfig
===================================================================
--- /dev/null
+++ b/configs/myir_lmx93x_2G_defconfig
@@ -0,0 +1,212 @@
+CONFIG_ARM=y
+CONFIG_ARCH_IMX9=y
+CONFIG_TEXT_BASE=0x80200000
+CONFIG_SYS_MALLOC_LEN=0x2000000
+CONFIG_SYS_MALLOC_F_LEN=0x18000
+CONFIG_SPL_LIBCOMMON_SUPPORT=y
+CONFIG_SPL_LIBGENERIC_SUPPORT=y
+CONFIG_NR_DRAM_BANKS=2
+CONFIG_ENV_SIZE=0x4000
+CONFIG_ENV_OFFSET=0x700000
+CONFIG_ENV_OFFSET_REDUND=0x704000
+CONFIG_ENV_SECT_SIZE=0x10000
+CONFIG_DM_GPIO=y
+CONFIG_DEFAULT_DEVICE_TREE="myd-lmx93x-11x11"
+CONFIG_SPL_TEXT_BASE=0x2049A000
+CONFIG_USB_TCPC=y
+CONFIG_TARGET_MYD_LMX93X=y
+CONFIG_MYD_LMX93X_LPDDR4X_2G=y
+CONFIG_SYS_PROMPT="u-boot=> "
+CONFIG_RTC_PCF2131=y
+CONFIG_SPL_SERIAL=y
+CONFIG_SPL_DRIVERS_MISC=y
+CONFIG_SPL_STACK=0x20519dd0
+CONFIG_SPL=y
+CONFIG_SPL_IMX_ROMAPI_LOADADDR=0x88000000
+CONFIG_SPL_LOAD_IMX_CONTAINER=y
+CONFIG_IMX_CONTAINER_CFG="arch/arm/mach-imx/imx9/container.cfg"
+CONFIG_SYS_LOAD_ADDR=0x80400000
+CONFIG_SYS_MEMTEST_START=0x80000000
+CONFIG_SYS_MEMTEST_END=0x90000000
+CONFIG_REMAKE_ELF=y
+CONFIG_SYS_MONITOR_LEN=524288
+CONFIG_DISTRO_DEFAULTS=y
+CONFIG_BOOTCOMMAND="run distro_bootcmd;run bsp_bootcmd"
+CONFIG_DEFAULT_FDT_FILE="myd-lmx93x-11x11.dtb"
+CONFIG_ARCH_MISC_INIT=y
+CONFIG_BOARD_EARLY_INIT_F=y
+CONFIG_BOARD_LATE_INIT=y
+CONFIG_SPL_MAX_SIZE=0x26000
+CONFIG_SPL_HAS_BSS_LINKER_SECTION=y
+CONFIG_SPL_BSS_START_ADDR=0x2051a000
+CONFIG_SPL_BSS_MAX_SIZE=0x2000
+CONFIG_SPL_BOARD_INIT=y
+CONFIG_SPL_BOOTROM_SUPPORT=y
+# CONFIG_SPL_SHARES_INIT_SP_ADDR is not set
+CONFIG_SYS_SPL_MALLOC=y
+CONFIG_HAS_CUSTOM_SPL_MALLOC_START=y
+CONFIG_CUSTOM_SYS_SPL_MALLOC_ADDR=0x83200000
+CONFIG_SYS_SPL_MALLOC_SIZE=0x80000
+CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_USE_SECTOR=y
+CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR=0x1040
+CONFIG_SPL_I2C=y
+CONFIG_SPL_POWER=y
+CONFIG_SPL_WATCHDOG=y
+CONFIG_SYS_MAXARGS=64
+CONFIG_SYS_CBSIZE=2048
+CONFIG_SYS_PBSIZE=2074
+CONFIG_CMD_ERASEENV=y
+CONFIG_CMD_NVEDIT_EFI=y
+CONFIG_CMD_CRC32=y
+CONFIG_CRC32_VERIFY=y
+CONFIG_CMD_MEMTEST=y
+CONFIG_CMD_CLK=y
+CONFIG_CMD_DFU=y
+CONFIG_CMD_FUSE=y
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_GPT=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_PART=y
+CONFIG_CMD_POWEROFF=y
+CONFIG_CMD_USB=y
+CONFIG_CMD_DHCP=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_SNTP=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_EFIDEBUG=y
+CONFIG_CMD_RTC=y
+CONFIG_CMD_TIME=y
+CONFIG_CMD_GETTIME=y
+CONFIG_CMD_TIMER=y
+CONFIG_CMD_REGULATOR=y
+CONFIG_CMD_HASH=y
+CONFIG_CMD_EXT2=y
+CONFIG_CMD_EXT4=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_CMD_FAT=y
+CONFIG_CMD_FS_GENERIC=y
+CONFIG_CMD_USB_MASS_STORAGE=y
+CONFIG_OF_CONTROL=y
+CONFIG_SPL_OF_CONTROL=y
+CONFIG_ENV_OVERWRITE=y
+CONFIG_ENV_IS_NOWHERE=y
+CONFIG_ENV_IS_IN_MMC=y
+CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+CONFIG_SYS_MMC_ENV_DEV=1
+CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG=y
+CONFIG_USE_ETHPRIME=y
+CONFIG_ETHPRIME="eth1"
+CONFIG_NET_RANDOM_ETHADDR=y
+CONFIG_SPL_DM=y
+CONFIG_REGMAP=y
+CONFIG_SYSCON=y
+CONFIG_DFU_MMC=y
+CONFIG_DFU_RAM=y
+CONFIG_IMX_RGPIO2P=y
+
+CONFIG_DM_SPI_FLASH=y
+CONFIG_DM_SPI=y
+CONFIG_NXP_FSPI=y
+CONFIG_SPI=y
+CONFIG_SPI_FLASH_STMICRO=y
+CONFIG_SF_DEFAULT_BUS=0
+CONFIG_SF_DEFAULT_SPEED=40000000
+
+CONFIG_CMD_FASTBOOT=y
+CONFIG_USB_FUNCTION_FASTBOOT=y
+CONFIG_FASTBOOT_UUU_SUPPORT=y
+CONFIG_FASTBOOT=y
+CONFIG_FASTBOOT_BUF_ADDR=0x82800000
+CONFIG_FASTBOOT_BUF_SIZE=0x20000000
+CONFIG_FASTBOOT_FLASH=y
+CONFIG_EFI_PARTITION=y
+CONFIG_FASTBOOT_USB_DEV=0
+CONFIG_USB_PORT_AUTO=y
+
+CONFIG_DM_PCA953X=y
+CONFIG_DM_I2C=y
+CONFIG_SYS_I2C_IMX_LPI2C=y
+CONFIG_SUPPORT_EMMC_BOOT=y
+CONFIG_MMC_IO_VOLTAGE=y
+CONFIG_MMC_UHS_SUPPORT=y
+
+CONFIG_MMC_HS200_SUPPORT=y
+CONFIG_FSL_USDHC=y
+CONFIG_PHY_REALTEK=y
+CONFIG_DM_ETH_PHY=y
+CONFIG_PHY_GIGE=y
+CONFIG_DWC_ETH_QOS=y
+CONFIG_DWC_ETH_QOS_IMX=y
+CONFIG_FEC_MXC=y
+CONFIG_MII=y
+CONFIG_PINCTRL=y
+CONFIG_SPL_PINCTRL=y
+CONFIG_PINCTRL_IMX93=y
+CONFIG_DM_PMIC=y
+CONFIG_SPL_DM_PMIC_PCA9450=y
+CONFIG_DM_REGULATOR=y
+CONFIG_DM_REGULATOR_FIXED=y
+CONFIG_DM_REGULATOR_GPIO=y
+CONFIG_DM_PMIC_PCA9450=y
+CONFIG_DM_REGULATOR_PCA9450=y
+CONFIG_DM_RTC=y
+CONFIG_DM_SERIAL=y
+CONFIG_FSL_LPUART=y
+CONFIG_USB=y
+CONFIG_DM_USB=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_MAX_CONTROLLER_COUNT=2
+CONFIG_USB_STORAGE=y
+CONFIG_USB_GADGET=y
+CONFIG_USB_GADGET_MANUFACTURER="FSL"
+CONFIG_USB_GADGET_VENDOR_NUM=0x1fc9
+CONFIG_USB_GADGET_PRODUCT_NUM=0x0152
+CONFIG_CI_UDC=y
+CONFIG_USB_HOST_ETHER=y
+CONFIG_USB_ETHER_ASIX=y
+CONFIG_USB_ETHER_RTL8152=y
+CONFIG_ULP_WATCHDOG=y
+CONFIG_LZO=y
+CONFIG_BZIP2=y
+CONFIG_HUSH_PARSER=y
+CONFIG_CLK_IMX93=y
+CONFIG_SPL_CLK_IMX93=y
+CONFIG_OF_LIBFDT_OVERLAY=y
+CONFIG_OF_SYSTEM_SETUP=y
+CONFIG_ADP5585_GPIO=y
+
+CONFIG_POWER_DOMAIN=y
+CONFIG_IMX93_BLK_CTRL=y
+CONFIG_PHY=y
+CONFIG_PHY_IMX93_MIPI_DPHY=y
+CONFIG_MIPI_DPHY_HELPERS=y
+CONFIG_VIDEO_IMX_LCDIFV3=y
+CONFIG_VIDEO_IMX_DW_DSI=y
+CONFIG_VIDEO=y
+CONFIG_BMP_16BPP=y
+CONFIG_BMP_24BPP=y
+CONFIG_BMP_32BPP=y
+CONFIG_VIDEO_LOGO=y
+CONFIG_VIDEO_LCD_RAYDIUM_RM67191=y
+CONFIG_VIDEO_ADV7535=y
+CONFIG_SYS_WHITE_ON_BLACK=y
+CONFIG_SPLASH_SCREEN=y
+CONFIG_SPLASH_SCREEN_ALIGN=y
+CONFIG_CMD_BMP=y
+
+CONFIG_CMD_DEKBLOB=y
+CONFIG_IMX_ELE_DEK_ENCAP=y
+CONFIG_IMX_TMU=y
+CONFIG_DM_THERMAL=y
+
+
+CONFIG_IMX93_EVK_LPDDR4X_1G=y
+CONFIG_SPL_I2C_EEPROM=y
+CONFIG_I2C_EEPROM=y
+CONFIG_WATCHDOG=y
+CONFIG_WATCHDOG_TIMEOUT_MSECS=60
+CONFIG_CYCLIC=y
+CONFIG_CYCLIC_MAX_CPU_TIME_US=1000
+CONFIG_SYS_REDUNDAND_ENVIRONMENT=y
Index: b/arch/arm/mach-imx/imx9/native/soc.c
===================================================================
--- a/arch/arm/mach-imx/imx9/native/soc.c
+++ b/arch/arm/mach-imx/imx9/native/soc.c
@@ -1295,3 +1295,138 @@ enum imx9_soc_voltage_mode soc_target_vo
 
 	return voltage;
 }
+
+const char *get_imx_type(u32 imxtype)
+{
+	switch (imxtype) {
+	case MXC_CPU_IMX93:
+		return "93(52)";/* iMX93 Dual core with NPU */
+	case MXC_CPU_IMX9351:
+		return "93(51)";/* iMX93 Single core with NPU */
+	case MXC_CPU_IMX9332:
+		return "93(32)";/* iMX93 Dual core without NPU */
+	case MXC_CPU_IMX9331:
+		return "93(31)";/* iMX93 Single core without NPU */
+	case MXC_CPU_IMX9322:
+		return "93(22)";/* iMX93 9x9 Dual core  */
+	case MXC_CPU_IMX9321:
+		return "93(21)";/* iMX93 9x9 Single core  */
+	case MXC_CPU_IMX9312:
+		return "93(12)";/* iMX93 9x9 Dual core without NPU */
+	case MXC_CPU_IMX9311:
+		return "93(11)";/* iMX93 9x9 Single core without NPU */
+	case MXC_CPU_IMX9302:
+		return "93(02)";/* iMX93 900Mhz Low performance Dual core without NPU */
+	case MXC_CPU_IMX9301:
+		return "93(01)";/* iMX93 900Mhz Low performance Single core without NPU */
+	case MXC_CPU_IMX91:
+		return "91P(31)";/* iMX91P 11x11 Full feature */
+	case MXC_CPU_IMX9111:
+		return "91P(11)";/* iMX91P 9x9 Reduced feature */
+	case MXC_CPU_IMX9101:
+		return "91P(01)";/* iMX91P 9x9 Specific feature */
+	default:
+		return "??";
+	}
+}
+
+#define SRC_SRSR_RESET_CAUSE_NUM 16
+const char *reset_cause[SRC_SRSR_RESET_CAUSE_NUM] = {
+	"POR ",
+	"JTAG ",
+	"IPP USER ",
+	"WDOG1 ",
+	"WDOG2 ",
+	"WDOG3 ",
+	"WDOG4 ",
+	"WDOG5 ",
+	"TEMPSENSE ",
+	"CSU ",
+	"JTAG_SW ",
+	"M33_REQ ",
+	"UNK ",
+	"UNK ",
+	"UNK ",
+};
+
+static const char *get_reset_cause(u32 *srsr_ret)
+{
+	struct src_general_regs *src = (struct src_general_regs *)SRC_GLOBAL_RBASE;
+	u32 srsr;
+	u32 i;
+
+	srsr = readl(&src->gpr[0]);
+	if (srsr_ret)
+		*srsr_ret = srsr;
+
+	for (i = SRC_SRSR_RESET_CAUSE_NUM; i > 0; i--) {
+		if (srsr & (1 << (i - 1)))
+			return reset_cause[i - 1];
+	}
+
+	return "unknown reset";
+}
+
+int print_cpuinfo(void)
+{
+	u32 cpurev, max_freq;
+	int minc, maxc;
+	u32 ssrs_ret;
+
+	cpurev = get_cpu_rev();
+
+	printf("CPU:   i.MX%s rev%d.%d",
+		get_imx_type((cpurev & 0x1FF000) >> 12),
+		(cpurev & 0x000F0) >> 4, (cpurev & 0x0000F) >> 0);
+
+	max_freq = get_cpu_speed_grade_hz();
+	if (!max_freq || max_freq == mxc_get_clock(MXC_ARM_CLK)) {
+		printf(" at %dMHz\n", mxc_get_clock(MXC_ARM_CLK) / 1000000);
+	} else {
+		printf(" %d MHz (running at %d MHz)\n", max_freq / 1000000,
+		       mxc_get_clock(MXC_ARM_CLK) / 1000000);
+	}
+
+	puts("CPU:   ");
+	switch (get_cpu_temp_grade(&minc, &maxc)) {
+	case TEMP_AUTOMOTIVE:
+		puts("Automotive temperature grade ");
+		break;
+	case TEMP_INDUSTRIAL:
+		puts("Industrial temperature grade ");
+		break;
+	case TEMP_EXTCOMMERCIAL:
+		if (is_imx93())
+			puts("Extended Industrial temperature grade ");
+		else
+			puts("Extended Consumer temperature grade ");
+		break;
+	default:
+		puts("Consumer temperature grade ");
+		break;
+	}
+	printf("(%dC to %dC)", minc, maxc);
+
+#if defined(CONFIG_IMX_TMU)
+	struct udevice *udev;
+	int ret, temp;
+
+	ret = uclass_get_device_by_name(UCLASS_THERMAL, "cpu-thermal", &udev);
+	if (!ret) {
+		ret = thermal_get_temp(udev, &temp);
+
+		if (!ret)
+			printf(" at %dC", temp);
+		else
+			debug(" - invalid sensor data\n");
+	} else {
+		debug(" - invalid sensor device\n");
+	}
+#endif
+	puts("\n");
+
+	printf("Reset cause: %s", get_reset_cause(&ssrs_ret));
+	printf("(0x%x)\n", ssrs_ret);
+
+	return 0;
+}
Index: b/board/myir/common/Makefile
===================================================================
--- /dev/null
+++ b/board/myir/common/Makefile
@@ -0,0 +1,29 @@
+# SPDX-License-Identifier: GPL-2.0+
+#
+# (C) Copyright 2006
+# Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+
+MINIMAL=
+
+ifdef CONFIG_SPL_BUILD
+ifndef CONFIG_TPL_BUILD
+ifdef CONFIG_SPL_INIT_MINIMAL
+MINIMAL=y
+endif
+endif
+endif
+
+ifdef MINIMAL
+# necessary to create built-in.o
+obj- := __dummy__.o
+else
+
+ifneq (,$(filter $(SOC), mx6 mx7 mx7ulp imx8 imx8m imx8ulp imx9))
+obj-y				+= mmc.o
+endif
+
+ifndef CONFIG_SPL_BUILD
+obj-$(CONFIG_USB_TCPC) += tcpc.o
+endif
+
+endif
Index: b/board/myir/common/mmc.c
===================================================================
--- /dev/null
+++ b/board/myir/common/mmc.c
@@ -0,0 +1,49 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright 2016 Freescale Semiconductor, Inc.
+ * Copyright 2018-2022 NXP
+ */
+
+#include <common.h>
+#include <command.h>
+#include <asm/arch/sys_proto.h>
+#include <linux/errno.h>
+#include <asm/io.h>
+#include <stdbool.h>
+#include <mmc.h>
+#include <env.h>
+
+static int check_mmc_autodetect(void)
+{
+	char *autodetect_str = env_get("mmcautodetect");
+
+	if (autodetect_str && !strcmp(autodetect_str, "yes"))
+		return 1;
+
+	return 0;
+}
+
+/* This should be defined for each board */
+__weak int mmc_map_to_kernel_blk(int dev_no)
+{
+	return dev_no;
+}
+
+void board_late_mmc_env_init(void)
+{
+	char cmd[32];
+	char mmcblk[32];
+	u32 dev_no = mmc_get_env_dev();
+
+	if (!check_mmc_autodetect())
+		return;
+
+	env_set_ulong("mmcdev", dev_no);
+
+	/* Set mmcblk env */
+	sprintf(mmcblk, "/dev/mmcblk%dp2 rootwait rw", mmc_map_to_kernel_blk(dev_no));
+	env_set("mmcroot", mmcblk);
+
+	sprintf(cmd, "mmc dev %d", dev_no);
+	run_command(cmd, 0);
+}
Index: b/board/myir/common/tcpc.c
===================================================================
--- /dev/null
+++ b/board/myir/common/tcpc.c
@@ -0,0 +1,1069 @@
+/*
+ * Copyright 2017,2019 NXP
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+#include <common.h>
+#include <i2c.h>
+#include <time.h>
+#include <linux/delay.h>
+#include "tcpc.h"
+
+#ifdef DEBUG
+#define tcpc_debug_log(port, fmt, args...) tcpc_log(port, fmt, ##args)
+#else
+#define tcpc_debug_log(port, fmt, args...)
+#endif
+
+static int tcpc_log(struct tcpc_port *port, const char *fmt, ...)
+{
+	va_list args;
+	int i;
+
+	va_start(args, fmt);
+	i = vscnprintf(port->log_p, port->log_size, fmt, args);
+	va_end(args);
+
+	port->log_size -= i;
+	port->log_p += i;
+
+	return i;
+}
+
+int tcpc_set_cc_to_source(struct tcpc_port *port)
+{
+	uint8_t valb;
+	int err;
+
+	if (port == NULL || port->i2c_dev == NULL)
+		return -EINVAL;
+
+	valb = (TCPC_ROLE_CTRL_CC_RP << TCPC_ROLE_CTRL_CC1_SHIFT) |
+			(TCPC_ROLE_CTRL_CC_RP << TCPC_ROLE_CTRL_CC2_SHIFT) |
+			(TCPC_ROLE_CTRL_RP_VAL_DEF <<
+			 TCPC_ROLE_CTRL_RP_VAL_SHIFT) | TCPC_ROLE_CTRL_DRP;
+
+	err = dm_i2c_write(port->i2c_dev, TCPC_ROLE_CTRL, &valb, 1);
+	if (err)
+		tcpc_log(port, "%s dm_i2c_write failed, err %d\n", __func__, err);
+	return err;
+}
+
+int tcpc_set_cc_to_sink(struct tcpc_port *port)
+{
+	uint8_t valb;
+	int err;
+
+	if (port == NULL || port->i2c_dev == NULL)
+		return -EINVAL;
+
+	valb = (TCPC_ROLE_CTRL_CC_RD << TCPC_ROLE_CTRL_CC1_SHIFT) |
+			(TCPC_ROLE_CTRL_CC_RD << TCPC_ROLE_CTRL_CC2_SHIFT) | TCPC_ROLE_CTRL_DRP;
+
+	err = dm_i2c_write(port->i2c_dev, TCPC_ROLE_CTRL, &valb, 1);
+	if (err)
+		tcpc_log(port, "%s dm_i2c_write failed, err %d\n", __func__, err);
+	return err;
+}
+
+
+int tcpc_set_plug_orientation(struct tcpc_port *port, enum typec_cc_polarity polarity)
+{
+	uint8_t valb;
+	int err;
+
+	if (port == NULL || port->i2c_dev == NULL)
+		return -EINVAL;
+
+	err = dm_i2c_read(port->i2c_dev, TCPC_TCPC_CTRL, &valb, 1);
+	if (err) {
+		tcpc_log(port, "%s dm_i2c_read failed, err %d\n", __func__, err);
+		return -EIO;
+	}
+
+	if (polarity == TYPEC_POLARITY_CC2)
+		valb |= TCPC_TCPC_CTRL_ORIENTATION;
+	else
+		valb &= ~TCPC_TCPC_CTRL_ORIENTATION;
+
+	err = dm_i2c_write(port->i2c_dev, TCPC_TCPC_CTRL, &valb, 1);
+	if (err) {
+		tcpc_log(port, "%s dm_i2c_write failed, err %d\n", __func__, err);
+		return -EIO;
+	}
+
+	return 0;
+}
+
+int tcpc_get_cc_status(struct tcpc_port *port, enum typec_cc_polarity *polarity, enum typec_cc_state *state)
+{
+
+	uint8_t valb_cc, cc2, cc1;
+	int err;
+
+	if (port == NULL || port->i2c_dev == NULL || polarity == NULL || state == NULL)
+		return -EINVAL;
+
+	err = dm_i2c_read(port->i2c_dev, TCPC_CC_STATUS, (uint8_t *)&valb_cc, 1);
+	if (err) {
+		tcpc_log(port, "%s dm_i2c_read failed, err %d\n", __func__, err);
+		return -EIO;
+	}
+
+	tcpc_debug_log(port, "cc status 0x%x\n", valb_cc);
+
+	cc2 = (valb_cc >> TCPC_CC_STATUS_CC2_SHIFT) & TCPC_CC_STATUS_CC2_MASK;
+	cc1 = (valb_cc >> TCPC_CC_STATUS_CC1_SHIFT) & TCPC_CC_STATUS_CC1_MASK;
+
+	if (valb_cc & TCPC_CC_STATUS_LOOK4CONN)
+		return -EFAULT;
+
+	*state = TYPEC_STATE_OPEN;
+
+	if (valb_cc & TCPC_CC_STATUS_TERM) {
+		if (cc2) {
+			*polarity = TYPEC_POLARITY_CC2;
+
+			switch (cc2) {
+			case 0x1:
+				*state = TYPEC_STATE_SNK_DEFAULT;
+				tcpc_log(port, "SNK.Default on CC2\n");
+				break;
+			case 0x2:
+				*state = TYPEC_STATE_SNK_POWER15;
+				tcpc_log(port, "SNK.Power1.5 on CC2\n");
+				break;
+			case 0x3:
+				*state = TYPEC_STATE_SNK_POWER30;
+				tcpc_log(port, "SNK.Power3.0 on CC2\n");
+				break;
+			}
+		} else if (cc1) {
+			*polarity = TYPEC_POLARITY_CC1;
+
+			switch (cc1) {
+			case 0x1:
+				*state = TYPEC_STATE_SNK_DEFAULT;
+				tcpc_log(port, "SNK.Default on CC1\n");
+				break;
+			case 0x2:
+				*state = TYPEC_STATE_SNK_POWER15;
+				tcpc_log(port, "SNK.Power1.5 on CC1\n");
+				break;
+			case 0x3:
+				*state = TYPEC_STATE_SNK_POWER30;
+				tcpc_log(port, "SNK.Power3.0 on CC1\n");
+				break;
+			}
+		} else {
+			*state = TYPEC_STATE_OPEN;
+			return -EPERM;
+		}
+
+	} else {
+		if (cc2) {
+			*polarity = TYPEC_POLARITY_CC2;
+
+			switch (cc2) {
+			case 0x1:
+				if (cc1 == 0x1) {
+					*state = TYPEC_STATE_SRC_BOTH_RA;
+					tcpc_log(port, "SRC.Ra on both CC1 and CC2\n");
+				} else if (cc1 == 0x2) {
+					*state = TYPEC_STATE_SRC_RD_RA;
+					tcpc_log(port, "SRC.Ra on CC2, SRC.Rd on CC1\n");
+				} else if (cc1 == 0x0) {
+					tcpc_log(port, "SRC.Ra only on CC2\n");
+					return -EFAULT;
+				} else
+					return -EFAULT;
+				break;
+			case 0x2:
+				if (cc1 == 0x1) {
+					*state = TYPEC_STATE_SRC_RD_RA;
+					tcpc_log(port, "SRC.Ra on CC1, SRC.Rd on CC2\n");
+				} else if (cc1 == 0x0) {
+					*state = TYPEC_STATE_SRC_RD;
+					tcpc_log(port, "SRC.Rd on CC2\n");
+				} else
+					return -EFAULT;
+				break;
+			case 0x3:
+				*state = TYPEC_STATE_SRC_RESERVED;
+				return -EFAULT;
+			}
+		} else if (cc1) {
+			*polarity = TYPEC_POLARITY_CC1;
+
+			switch (cc1) {
+			case 0x1:
+				tcpc_log(port, "SRC.Ra only on CC1\n");
+				return -EFAULT;
+			case 0x2:
+				*state = TYPEC_STATE_SRC_RD;
+				tcpc_log(port, "SRC.Rd on CC1\n");
+				break;
+			case 0x3:
+				*state = TYPEC_STATE_SRC_RESERVED;
+				return -EFAULT;
+			}
+		} else {
+			*state = TYPEC_STATE_OPEN;
+			return -EPERM;
+		}
+	}
+
+	return 0;
+}
+
+int tcpc_alert_mask(struct tcpc_port *port, uint16_t alert_mask)
+{
+	int err = 0;
+
+	if (!port || port->i2c_dev == NULL)
+		return -EINVAL;
+
+	err = dm_i2c_write(port->i2c_dev, TCPC_ALERT_MASK, (const uint8_t *)&alert_mask, 2);
+	if (err)
+		tcpc_log(port, "%s dm_i2c_write failed, err %d\n", __func__, err);
+
+	return err;
+}
+
+int tcpc_clear_alert(struct tcpc_port *port, uint16_t clear_mask)
+{
+	int err;
+
+	if (port == NULL || port->i2c_dev == NULL)
+		return -EINVAL;
+
+	err = dm_i2c_write(port->i2c_dev, TCPC_ALERT, (const uint8_t *)&clear_mask, 2);
+	if (err) {
+		tcpc_log(port, "%s dm_i2c_write failed, err %d\n", __func__, err);
+		return -EIO;
+	}
+
+	return 0;
+}
+
+int tcpc_fault_status_mask(struct tcpc_port *port, uint8_t fault_mask)
+{
+	int err = 0;
+
+	if (!port || port->i2c_dev == NULL)
+		return -EINVAL;
+
+	err = dm_i2c_write(port->i2c_dev, TCPC_FAULT_STATUS_MASK, &fault_mask, 1);
+	if (err)
+		tcpc_log(port, "%s dm_i2c_write failed, err %d\n", __func__, err);
+
+	return err;
+}
+
+int tcpc_send_command(struct tcpc_port *port, uint8_t command)
+{
+	int err;
+
+	if (port == NULL || port->i2c_dev == NULL)
+		return -EINVAL;
+
+	err = dm_i2c_write(port->i2c_dev, TCPC_COMMAND, (const uint8_t *)&command, 1);
+	if (err) {
+		tcpc_log(port, "%s dm_i2c_write failed, err %d\n", __func__, err);
+		return -EIO;
+	}
+
+	return 0;
+}
+
+int tcpc_polling_reg(struct tcpc_port *port, uint8_t reg,
+	uint8_t reg_width, uint16_t mask, uint16_t value, ulong timeout_ms)
+{
+	uint16_t val = 0;
+	int err;
+	ulong start;
+
+	if (port == NULL || port->i2c_dev == NULL)
+		return -EINVAL;
+
+	tcpc_debug_log(port, "%s reg 0x%x, mask 0x%x, value 0x%x\n", __func__, reg, mask, value);
+
+	/* TCPC registers is 8 bits or 16 bits */
+	if (reg_width != 1 && reg_width != 2)
+		return -EINVAL;
+
+	start = get_timer(0);	/* Get current timestamp */
+	do {
+		err = dm_i2c_read(port->i2c_dev, reg, (uint8_t *)&val, reg_width);
+		if (err)
+			return -EIO;
+
+		if ((val & mask) == value)
+			return 0;
+	} while (get_timer(0) < (start + timeout_ms));
+
+	return -ETIME;
+}
+
+void tcpc_print_log(struct tcpc_port *port)
+{
+	if (port == NULL)
+		return;
+
+	if (port->log_print == port->log_p) /*nothing to output*/
+		return;
+
+	printf("%s", port->log_print);
+
+	port->log_print = port->log_p;
+}
+
+int tcpc_setup_dfp_mode(struct tcpc_port *port)
+{
+	enum typec_cc_polarity pol;
+	enum typec_cc_state state;
+	int ret;
+
+	if (port == NULL)
+		return -EINVAL;
+
+	if (tcpc_pd_sink_check_charging(port)) {
+		tcpc_log(port, "%s: Can't apply DFP mode when PD is charging\n",
+			__func__);
+		return -EPERM;
+	}
+
+	tcpc_set_cc_to_source(port);
+
+	ret = tcpc_send_command(port, TCPC_CMD_LOOK4CONNECTION);
+	if (ret)
+		return ret;
+
+	/* At least wait tCcStatusDelay + tTCPCFilter + tCcTCPCSampleRate (max) = 200us + 500us + ?ms
+	 * PTN5110 datasheet does not contain the sample rate value, according other productions,
+	 * the sample rate is at ms level, about 2 ms -10ms. So wait 100ms should be enough.
+	 */
+	mdelay(100);
+
+	ret = tcpc_polling_reg(port, TCPC_ALERT, 2, TCPC_ALERT_CC_STATUS, TCPC_ALERT_CC_STATUS, 100);
+	if (ret) {
+		tcpc_log(port, "%s: Polling ALERT register, TCPC_ALERT_CC_STATUS bit failed, ret = %d\n",
+			__func__, ret);
+		return ret;
+	}
+
+	ret = tcpc_get_cc_status(port, &pol, &state);
+	tcpc_clear_alert(port, TCPC_ALERT_CC_STATUS);
+
+	if (!ret) {
+		/* If presenting as Rd/audio mode/open, return */
+		if (state != TYPEC_STATE_SRC_RD_RA && state != TYPEC_STATE_SRC_RD)
+			return -EPERM;
+
+		if (pol == TYPEC_POLARITY_CC1)
+			tcpc_debug_log(port, "polarity cc1\n");
+		else
+			tcpc_debug_log(port, "polarity cc2\n");
+
+		if (port->ss_sel_func)
+			port->ss_sel_func(pol);
+
+		ret = tcpc_set_plug_orientation(port, pol);
+		if (ret)
+			return ret;
+
+		/* Enable source vbus default voltage */
+		ret = tcpc_send_command(port, TCPC_CMD_SRC_VBUS_DEFAULT);
+		if (ret)
+			return ret;
+
+		/* The max vbus on time is 200ms, we add margin 100ms */
+		mdelay(300);
+
+	}
+
+	return 0;
+}
+
+int tcpc_setup_ufp_mode(struct tcpc_port *port)
+{
+	enum typec_cc_polarity pol;
+	enum typec_cc_state state;
+	int ret;
+
+	if (port == NULL)
+		return -EINVAL;
+
+	/* Check if the PD charge is working. If not, need to configure CC role for UFP */
+	if (!tcpc_pd_sink_check_charging(port)) {
+
+		/* Disable the source vbus once it is enabled by DFP mode */
+		tcpc_disable_src_vbus(port);
+
+		tcpc_set_cc_to_sink(port);
+
+		ret = tcpc_send_command(port, TCPC_CMD_LOOK4CONNECTION);
+		if (ret)
+			return ret;
+
+		/* At least wait tCcStatusDelay + tTCPCFilter + tCcTCPCSampleRate (max) = 200us + 500us + ?ms
+		 * PTN5110 datasheet does not contain the sample rate value, according other productions,
+		 * the sample rate is at ms level, about 2 ms -10ms. So wait 100ms should be enough.
+		 */
+		mdelay(100);
+
+		ret = tcpc_polling_reg(port, TCPC_ALERT, 2, TCPC_ALERT_CC_STATUS, TCPC_ALERT_CC_STATUS, 100);
+		if (ret) {
+			tcpc_log(port, "%s: Polling ALERT register, TCPC_ALERT_CC_STATUS bit failed, ret = %d\n",
+				__func__, ret);
+			return ret;
+		}
+
+		ret = tcpc_get_cc_status(port, &pol, &state);
+		tcpc_clear_alert(port, TCPC_ALERT_CC_STATUS);
+
+	} else {
+		ret = tcpc_get_cc_status(port, &pol, &state);
+	}
+
+	if (!ret) {
+		/* If presenting not as sink, then return */
+		if (state != TYPEC_STATE_SNK_DEFAULT && state != TYPEC_STATE_SNK_POWER15 &&
+			state != TYPEC_STATE_SNK_POWER30)
+			return -EPERM;
+
+		if (pol == TYPEC_POLARITY_CC1)
+			tcpc_debug_log(port, "polarity cc1\n");
+		else
+			tcpc_debug_log(port, "polarity cc2\n");
+
+		if (port->ss_sel_func)
+			port->ss_sel_func(pol);
+
+		ret = tcpc_set_plug_orientation(port, pol);
+		if (ret)
+			return ret;
+	}
+
+	return 0;
+}
+
+int tcpc_disable_src_vbus(struct tcpc_port *port)
+{
+	int ret;
+
+	if (port == NULL)
+		return -EINVAL;
+
+	/* Disable VBUS*/
+	ret = tcpc_send_command(port, TCPC_CMD_DISABLE_SRC_VBUS);
+	if (ret)
+		return ret;
+
+	/* The max vbus off time is 0.5ms, we add margin 0.5 ms */
+	mdelay(1);
+
+	return 0;
+}
+
+int tcpc_disable_sink_vbus(struct tcpc_port *port)
+{
+	int ret;
+
+	if (port == NULL)
+		return -EINVAL;
+
+	/* Disable SINK VBUS*/
+	ret = tcpc_send_command(port, TCPC_CMD_DISABLE_SINK_VBUS);
+	if (ret)
+		return ret;
+
+	/* The max vbus off time is 0.5ms, we add margin 0.5 ms */
+	mdelay(1);
+
+	return 0;
+}
+
+
+static int tcpc_pd_receive_message(struct tcpc_port *port, struct pd_message *msg)
+{
+	int ret;
+	uint8_t cnt;
+	uint16_t val;
+
+	if (port == NULL || port->i2c_dev == NULL)
+		return -EINVAL;
+
+	/* Generally the max tSenderResponse is 30ms, max tTypeCSendSourceCap is 200ms, we set the timeout to 500ms */
+	ret = tcpc_polling_reg(port, TCPC_ALERT, 2, TCPC_ALERT_RX_STATUS, TCPC_ALERT_RX_STATUS, 500);
+	if (ret) {
+		tcpc_log(port, "%s: Polling ALERT register, TCPC_ALERT_RX_STATUS bit failed, ret = %d\n",
+			__func__, ret);
+		return ret;
+	}
+
+	cnt = 0;
+	ret = dm_i2c_read(port->i2c_dev, TCPC_RX_BYTE_CNT, (uint8_t *)&cnt, 1);
+	if (ret)
+		return -EIO;
+
+	if (cnt > 0) {
+		ret = dm_i2c_read(port->i2c_dev, TCPC_RX_BUF_FRAME_TYPE, (uint8_t *)msg, cnt);
+		if (ret)
+			return -EIO;
+
+		/* Clear RX status alert bit */
+		val = TCPC_ALERT_RX_STATUS;
+		ret = dm_i2c_write(port->i2c_dev, TCPC_ALERT, (const uint8_t *)&val, 2);
+		if (ret)
+			return -EIO;
+	}
+
+	return cnt;
+}
+
+static int tcpc_pd_transmit_message(struct tcpc_port *port, struct pd_message *msg_p, uint8_t bytes)
+{
+	int ret;
+	uint8_t valb;
+	uint16_t val = 0;
+
+	if (port == NULL || port->i2c_dev == NULL)
+		return -EINVAL;
+
+	if (msg_p == NULL || bytes <= 0)
+		return -EINVAL;
+
+	ret = dm_i2c_write(port->i2c_dev, TCPC_TX_BYTE_CNT, (const uint8_t *)&bytes, 1);
+	if (ret)
+		return -EIO;
+
+	ret = dm_i2c_write(port->i2c_dev, TCPC_TX_HDR, (const uint8_t *)&(msg_p->header), bytes);
+	if (ret)
+		return -EIO;
+
+	valb = (3 << TCPC_TRANSMIT_RETRY_SHIFT) | (TCPC_TX_SOP << TCPC_TRANSMIT_TYPE_SHIFT);
+	ret = dm_i2c_write(port->i2c_dev, TCPC_TRANSMIT, (const uint8_t *)&valb, 1);
+	if (ret)
+		return -EIO;
+
+	/* Max tReceive is 1.1ms, we set to 5ms timeout */
+	ret = tcpc_polling_reg(port, TCPC_ALERT, 2, TCPC_ALERT_TX_SUCCESS, TCPC_ALERT_TX_SUCCESS, 5);
+	if (ret) {
+		if (ret == -ETIME) {
+			ret = dm_i2c_read(port->i2c_dev, TCPC_ALERT, (uint8_t *)&val, 2);
+			if (ret)
+				return -EIO;
+
+			if (val & TCPC_ALERT_TX_FAILED)
+				tcpc_log(port, "%s: PD TX FAILED, ALERT = 0x%x\n", __func__, val);
+
+			if (val & TCPC_ALERT_TX_DISCARDED)
+				tcpc_log(port, "%s: PD TX DISCARDED, ALERT = 0x%x\n", __func__, val);
+
+		} else {
+			tcpc_log(port, "%s: Polling ALERT register, TCPC_ALERT_TX_SUCCESS bit failed, ret = %d\n",
+				__func__, ret);
+		}
+	} else {
+		port->tx_msg_id = (port->tx_msg_id + 1) & PD_HEADER_ID_MASK;
+	}
+
+	/* Clear ALERT status */
+	val &= (TCPC_ALERT_TX_FAILED | TCPC_ALERT_TX_DISCARDED | TCPC_ALERT_TX_SUCCESS);
+	ret = dm_i2c_write(port->i2c_dev, TCPC_ALERT, (const uint8_t *)&val, 2);
+	if (ret)
+		return -EIO;
+
+	return ret;
+}
+
+static void tcpc_log_source_caps(struct tcpc_port *port, struct pd_message *msg, unsigned int capcount)
+{
+	int i;
+
+	for (i = 0; i < capcount; i++) {
+		u32 pdo = msg->payload[i];
+		enum pd_pdo_type type = pdo_type(pdo);
+
+		tcpc_log(port, "PDO %d: type %d, ",
+			 i, type);
+
+		switch (type) {
+		case PDO_TYPE_FIXED:
+			tcpc_log(port, "%u mV, %u mA [%s%s%s%s%s%s]\n",
+				  pdo_fixed_voltage(pdo),
+				  pdo_max_current(pdo),
+				  (pdo & PDO_FIXED_DUAL_ROLE) ?
+							"R" : "",
+				  (pdo & PDO_FIXED_SUSPEND) ?
+							"S" : "",
+				  (pdo & PDO_FIXED_HIGHER_CAP) ?
+							"H" : "",
+				  (pdo & PDO_FIXED_USB_COMM) ?
+							"U" : "",
+				  (pdo & PDO_FIXED_DATA_SWAP) ?
+							"D" : "",
+				  (pdo & PDO_FIXED_EXTPOWER) ?
+							"E" : "");
+			break;
+		case PDO_TYPE_VAR:
+			tcpc_log(port, "%u-%u mV, %u mA\n",
+				  pdo_min_voltage(pdo),
+				  pdo_max_voltage(pdo),
+				  pdo_max_current(pdo));
+			break;
+		case PDO_TYPE_BATT:
+			tcpc_log(port, "%u-%u mV, %u mW\n",
+				  pdo_min_voltage(pdo),
+				  pdo_max_voltage(pdo),
+				  pdo_max_power(pdo));
+			break;
+		default:
+			tcpc_log(port, "undefined\n");
+			break;
+		}
+	}
+}
+
+static int tcpc_pd_select_pdo(struct pd_message *msg, uint32_t capcount, uint32_t max_snk_mv, uint32_t max_snk_ma)
+{
+	unsigned int i, max_mw = 0, max_mv = 0;
+	int ret = -EINVAL;
+
+	/*
+	 * Select the source PDO providing the most power while staying within
+	 * the board's voltage limits. Prefer PDO providing exp
+	 */
+	for (i = 0; i < capcount; i++) {
+		u32 pdo = msg->payload[i];
+		enum pd_pdo_type type = pdo_type(pdo);
+		unsigned int mv, ma, mw;
+
+		if (type == PDO_TYPE_FIXED)
+			mv = pdo_fixed_voltage(pdo);
+		else
+			mv = pdo_min_voltage(pdo);
+
+		if (type == PDO_TYPE_BATT) {
+			mw = pdo_max_power(pdo);
+		} else {
+			ma = min(pdo_max_current(pdo),
+				 max_snk_ma);
+			mw = ma * mv / 1000;
+		}
+
+		/* Perfer higher voltages if available */
+		if ((mw > max_mw || (mw == max_mw && mv > max_mv)) &&
+		    mv <= max_snk_mv) {
+			ret = i;
+			max_mw = mw;
+			max_mv = mv;
+		}
+	}
+
+	return ret;
+}
+
+static int tcpc_pd_build_request(struct tcpc_port *port,
+										struct pd_message *msg,
+										uint32_t capcount,
+										uint32_t max_snk_mv,
+										uint32_t max_snk_ma,
+										uint32_t max_snk_mw,
+										uint32_t operating_snk_mw,
+										uint32_t *rdo)
+{
+	unsigned int mv, ma, mw, flags;
+	unsigned int max_ma, max_mw;
+	enum pd_pdo_type type;
+	int index;
+	u32 pdo;
+
+	index = tcpc_pd_select_pdo(msg, capcount, max_snk_mv, max_snk_ma);
+	if (index < 0)
+		return -EINVAL;
+
+	pdo = msg->payload[index];
+	type = pdo_type(pdo);
+
+	if (type == PDO_TYPE_FIXED)
+		mv = pdo_fixed_voltage(pdo);
+	else
+		mv = pdo_min_voltage(pdo);
+
+	/* Select maximum available current within the board's power limit */
+	if (type == PDO_TYPE_BATT) {
+		mw = pdo_max_power(pdo);
+		ma = 1000 * min(mw, max_snk_mw) / mv;
+	} else {
+		ma = min(pdo_max_current(pdo),
+			 1000 * max_snk_mw / mv);
+	}
+	ma = min(ma, max_snk_ma);
+
+	/* XXX: Any other flags need to be set? */
+	flags = 0;
+
+	/* Set mismatch bit if offered power is less than operating power */
+	mw = ma * mv / 1000;
+	max_ma = ma;
+	max_mw = mw;
+	if (mw < operating_snk_mw) {
+		flags |= RDO_CAP_MISMATCH;
+		max_mw = operating_snk_mw;
+		max_ma = max_mw * 1000 / mv;
+	}
+
+	if (type == PDO_TYPE_BATT) {
+		*rdo = RDO_BATT(index + 1, mw, max_mw, flags);
+
+		tcpc_log(port, "Requesting PDO %d: %u mV, %u mW%s\n",
+			 index, mv, mw,
+			 flags & RDO_CAP_MISMATCH ? " [mismatch]" : "");
+	} else {
+		*rdo = RDO_FIXED(index + 1, ma, max_ma, flags);
+
+		tcpc_log(port, "Requesting PDO %d: %u mV, %u mA%s\n",
+			 index, mv, ma,
+			 flags & RDO_CAP_MISMATCH ? " [mismatch]" : "");
+	}
+
+	return 0;
+}
+
+static void tcpc_pd_sink_process(struct tcpc_port *port)
+{
+	int ret;
+	uint8_t msgtype;
+	uint32_t objcnt;
+	struct pd_message msg;
+	enum pd_sink_state pd_state = WAIT_SOURCE_CAP;
+
+	while (tcpc_pd_receive_message(port, &msg) > 0) {
+
+		msgtype = pd_header_type(msg.header);
+		objcnt = pd_header_cnt_le(msg.header);
+
+		tcpc_debug_log(port, "get msg, type %d, cnt %d\n", msgtype, objcnt);
+
+		switch (pd_state) {
+		case WAIT_SOURCE_CAP:
+		case SINK_READY:
+			if (msgtype != PD_DATA_SOURCE_CAP)
+				continue;
+
+			uint32_t rdo = 0;
+
+			tcpc_log_source_caps(port, &msg, objcnt);
+
+			tcpc_pd_build_request(port, &msg, objcnt,
+				port->cfg.max_snk_mv, port->cfg.max_snk_ma,
+				port->cfg.max_snk_mw, port->cfg.op_snk_mv,
+				&rdo);
+
+			memset(&msg, 0, sizeof(msg));
+			msg.header = PD_HEADER(PD_DATA_REQUEST, 0, 0, port->tx_msg_id, 1);  /* power sink, data device, id 0, len 1 */
+			msg.payload[0] = rdo;
+
+			ret = tcpc_pd_transmit_message(port, &msg, 6);
+			if (ret)
+				tcpc_log(port, "send request failed\n");
+			else
+				pd_state = WAIT_SOURCE_ACCEPT;
+
+			break;
+		case WAIT_SOURCE_ACCEPT:
+			if (objcnt > 0) /* Should be ctrl message */
+				continue;
+
+			if (msgtype == PD_CTRL_ACCEPT) {
+				pd_state = WAIT_SOURCE_READY;
+				tcpc_log(port, "Source accept request\n");
+			} else if (msgtype == PD_CTRL_REJECT) {
+				tcpc_log(port, "Source reject request\n");
+				return;
+			}
+
+			break;
+		case WAIT_SOURCE_READY:
+			if (objcnt > 0) /* Should be ctrl message */
+				continue;
+
+			if (msgtype == PD_CTRL_PS_RDY) {
+				tcpc_log(port, "PD source ready!\n");
+				pd_state = SINK_READY;
+			}
+
+			break;
+		default:
+			tcpc_log(port, "unexpect status: %u\n", pd_state);
+			break;
+		}
+	}
+}
+
+bool tcpc_pd_sink_check_charging(struct tcpc_port *port)
+{
+	uint8_t valb;
+	int err;
+	enum typec_cc_polarity pol;
+	enum typec_cc_state state;
+
+	if (port == NULL || port->i2c_dev == NULL)
+		return false;
+
+	/* Check the CC status, must be sink */
+	err = tcpc_get_cc_status(port, &pol, &state);
+	if (err || (state != TYPEC_STATE_SNK_POWER15
+		&& state != TYPEC_STATE_SNK_POWER30
+		&& state != TYPEC_STATE_SNK_DEFAULT)) {
+		tcpc_debug_log(port, "TCPC wrong state for PD charging, err = %d, CC = 0x%x\n",
+			err, state);
+		return false;
+	}
+
+	/* Check the VBUS PRES and SINK VBUS for dead battery */
+	err = dm_i2c_read(port->i2c_dev, TCPC_POWER_STATUS, &valb, 1);
+	if (err) {
+		tcpc_debug_log(port, "%s dm_i2c_read failed, err %d\n", __func__, err);
+		return false;
+	}
+
+	if (!(valb & TCPC_POWER_STATUS_VBUS_PRES)) {
+		tcpc_debug_log(port, "VBUS NOT PRES \n");
+		return false;
+	}
+
+	if (!(valb & TCPC_POWER_STATUS_SINKING_VBUS)) {
+		tcpc_debug_log(port, "SINK VBUS is not enabled for dead battery\n");
+		return false;
+	}
+
+	return true;
+}
+
+static int tcpc_pd_sink_disable(struct tcpc_port *port)
+{
+	uint8_t valb;
+	int err;
+
+	if (port == NULL || port->i2c_dev == NULL)
+		return -EINVAL;
+
+	port->pd_state = UNATTACH;
+
+	/* Check the VBUS PRES and SINK VBUS for dead battery */
+	err = dm_i2c_read(port->i2c_dev, TCPC_POWER_STATUS, &valb, 1);
+	if (err) {
+		tcpc_log(port, "%s dm_i2c_read failed, err %d\n", __func__, err);
+		return -EIO;
+	}
+
+	if ((valb & TCPC_POWER_STATUS_VBUS_PRES) && (valb & TCPC_POWER_STATUS_SINKING_VBUS)) {
+		err = dm_i2c_read(port->i2c_dev, TCPC_POWER_CTRL, (uint8_t *)&valb, 1);
+		if (err) {
+			tcpc_log(port, "%s dm_i2c_read failed, err %d\n", __func__, err);
+			return -EIO;
+		}
+
+		valb &= ~TCPC_POWER_CTRL_AUTO_DISCH_DISCO; /* disable AutoDischargeDisconnect */
+		err = dm_i2c_write(port->i2c_dev, TCPC_POWER_CTRL, (const uint8_t *)&valb, 1);
+		if (err) {
+			tcpc_log(port, "%s dm_i2c_write failed, err %d\n", __func__, err);
+			return -EIO;
+		}
+
+		tcpc_disable_sink_vbus(port);
+	}
+
+	if (port->cfg.switch_setup_func)
+		port->cfg.switch_setup_func(port);
+
+	return 0;
+}
+
+static int tcpc_pd_sink_init(struct tcpc_port *port)
+{
+	uint8_t valb;
+	uint16_t val;
+	int err;
+	enum typec_cc_polarity pol;
+	enum typec_cc_state state;
+
+	if (port == NULL || port->i2c_dev == NULL)
+		return -EINVAL;
+
+	port->pd_state = UNATTACH;
+
+	/* Check the VBUS PRES and SINK VBUS for dead battery */
+	err = dm_i2c_read(port->i2c_dev, TCPC_POWER_STATUS, &valb, 1);
+	if (err) {
+		tcpc_log(port, "%s dm_i2c_read failed, err %d\n", __func__, err);
+		return -EIO;
+	}
+
+	if (!(valb & TCPC_POWER_STATUS_VBUS_PRES)) {
+		tcpc_debug_log(port, "VBUS NOT PRES \n");
+		return -EPERM;
+	}
+
+	if (!(valb & TCPC_POWER_STATUS_SINKING_VBUS)) {
+		tcpc_debug_log(port, "SINK VBUS is not enabled for dead battery\n");
+		return -EPERM;
+	}
+
+	err = dm_i2c_read(port->i2c_dev, TCPC_ALERT, (uint8_t *)&val, 2);
+	if (err) {
+		tcpc_log(port, "%s dm_i2c_read failed, err %d\n", __func__, err);
+		return -EIO;
+	}
+
+	if (!(val & TCPC_ALERT_CC_STATUS)) {
+		tcpc_debug_log(port, "CC STATUS not detected for dead battery\n");
+		return -EPERM;
+	}
+
+	err = tcpc_get_cc_status(port, &pol, &state);
+	if (err || (state != TYPEC_STATE_SNK_POWER15
+		&& state != TYPEC_STATE_SNK_POWER30
+		&& state != TYPEC_STATE_SNK_DEFAULT)) {
+		tcpc_log(port, "TCPC wrong state for dead battery, err = %d, CC = 0x%x\n",
+			err, state);
+		return -EPERM;
+	} else {
+		err = tcpc_set_plug_orientation(port, pol);
+		if (err) {
+			tcpc_log(port, "TCPC set plug orientation failed, err = %d\n", err);
+			return err;
+		}
+		port->pd_state = ATTACHED;
+	}
+
+	err = dm_i2c_read(port->i2c_dev, TCPC_POWER_CTRL, (uint8_t *)&valb, 1);
+	if (err) {
+		tcpc_log(port, "%s dm_i2c_read failed, err %d\n", __func__, err);
+		return -EIO;
+	}
+
+	valb &= ~TCPC_POWER_CTRL_AUTO_DISCH_DISCO; /* disable AutoDischargeDisconnect */
+	err = dm_i2c_write(port->i2c_dev, TCPC_POWER_CTRL, (const uint8_t *)&valb, 1);
+	if (err) {
+		tcpc_log(port, "%s dm_i2c_write failed, err %d\n", __func__, err);
+		return -EIO;
+	}
+
+	if (port->cfg.switch_setup_func)
+		port->cfg.switch_setup_func(port);
+
+	/* As sink role */
+	valb = 0x00;
+	err = dm_i2c_write(port->i2c_dev, TCPC_MSG_HDR_INFO, (const uint8_t *)&valb, 1);
+	if (err) {
+		tcpc_log(port, "%s dm_i2c_read failed, err %d\n", __func__, err);
+		return -EIO;
+	}
+
+	/* Enable rx */
+	valb = TCPC_RX_DETECT_SOP | TCPC_RX_DETECT_HARD_RESET;
+	err = dm_i2c_write(port->i2c_dev, TCPC_RX_DETECT, (const uint8_t *)&valb, 1);
+	if (err) {
+		tcpc_log(port, "%s dm_i2c_read failed, err %d\n", __func__, err);
+		return -EIO;
+	}
+
+	tcpc_pd_sink_process(port);
+
+	return 0;
+}
+
+int tcpc_init(struct tcpc_port *port, struct tcpc_port_config config, ss_mux_sel ss_sel_func)
+{
+	int ret;
+	uint8_t valb;
+	uint16_t vid, pid;
+	struct udevice *bus;
+	struct udevice *i2c_dev = NULL;
+
+	memset(port, 0, sizeof(struct tcpc_port));
+
+	if (port == NULL)
+		return -EINVAL;
+
+	port->cfg = config;
+	port->tx_msg_id = 0;
+	port->ss_sel_func = ss_sel_func;
+	port->log_p = (char *)&(port->logbuffer);
+	port->log_size = TCPC_LOG_BUFFER_SIZE;
+	port->log_print = port->log_p;
+	memset(&(port->logbuffer), 0, TCPC_LOG_BUFFER_SIZE);
+
+	ret = uclass_get_device_by_seq(UCLASS_I2C, port->cfg.i2c_bus, &bus);
+	if (ret) {
+		printf("%s: Can't find bus\n", __func__);
+		return -EINVAL;
+	}
+
+	ret = dm_i2c_probe(bus, port->cfg.addr, 0, &i2c_dev);
+	if (ret) {
+		printf("%s: Can't find device id=0x%x\n",
+			__func__, config.addr);
+		return -ENODEV;
+	}
+
+	port->i2c_dev = i2c_dev;
+
+	/* Check the Initialization Status bit in 1s */
+	ret = tcpc_polling_reg(port, TCPC_POWER_STATUS, 1, TCPC_POWER_STATUS_UNINIT, 0, 1000);
+	if (ret) {
+		tcpc_log(port, "%s: Polling TCPC POWER STATUS Initialization Status bit failed, ret = %d\n",
+			__func__, ret);
+		return ret;
+	}
+
+	dm_i2c_read(port->i2c_dev, TCPC_POWER_STATUS, &valb, 1);
+	tcpc_debug_log(port, "POWER STATUS: 0x%x\n", valb);
+
+	/* Clear AllRegistersResetToDefault */
+	valb = 0x80;
+	ret = dm_i2c_write(port->i2c_dev, TCPC_FAULT_STATUS, (const uint8_t *)&valb, 1);
+	if (ret) {
+		tcpc_log(port, "%s dm_i2c_read failed, err %d\n", __func__, ret);
+		return -EIO;
+	}
+
+	/* Read Vendor ID and Product ID */
+	ret = dm_i2c_read(port->i2c_dev, TCPC_VENDOR_ID, (uint8_t *)&vid, 2);
+	if (ret) {
+		tcpc_log(port, "%s dm_i2c_read failed, err %d\n", __func__, ret);
+		return -EIO;
+	}
+
+	ret = dm_i2c_read(port->i2c_dev, TCPC_PRODUCT_ID, (uint8_t *)&pid, 2);
+	if (ret) {
+		tcpc_log(port, "%s dm_i2c_read failed, err %d\n", __func__, ret);
+		return -EIO;
+	}
+
+	tcpc_log(port, "TCPC:  Vendor ID [0x%x], Product ID [0x%x], Addr [I2C%u 0x%x]\n",
+		vid, pid, port->cfg.i2c_bus, port->cfg.addr);
+
+	if (!port->cfg.disable_pd) {
+		if  (port->cfg.port_type == TYPEC_PORT_UFP
+			|| port->cfg.port_type == TYPEC_PORT_DRP)
+			tcpc_pd_sink_init(port);
+	} else {
+		tcpc_pd_sink_disable(port);
+	}
+
+	/* Mask all alert status */
+	tcpc_alert_mask(port, 0);
+	/* Mask all fault status */
+	tcpc_fault_status_mask(port, 0);
+
+	tcpc_clear_alert(port, 0xffff);
+
+	tcpc_print_log(port);
+
+	return 0;
+}
Index: b/board/myir/common/tcpc.h
===================================================================
--- /dev/null
+++ b/board/myir/common/tcpc.h
@@ -0,0 +1,472 @@
+/*
+ * Copyright 2017 NXP
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef __TCPCI_H
+#define __TCPCI_H
+
+#include <dm.h>
+
+#define TCPC_VENDOR_ID			0x0
+#define TCPC_PRODUCT_ID			0x2
+
+#define TCPC_ALERT					0x10
+#define TCPC_ALERT_VBUS_DISCNCT		BIT(11)
+#define TCPC_ALERT_RX_BUF_OVF		BIT(10)
+#define TCPC_ALERT_FAULT			BIT(9)
+#define TCPC_ALERT_V_ALARM_LO		BIT(8)
+#define TCPC_ALERT_V_ALARM_HI		BIT(7)
+#define TCPC_ALERT_TX_SUCCESS		BIT(6)
+#define TCPC_ALERT_TX_DISCARDED		BIT(5)
+#define TCPC_ALERT_TX_FAILED		BIT(4)
+#define TCPC_ALERT_RX_HARD_RST		BIT(3)
+#define TCPC_ALERT_RX_STATUS		BIT(2)
+#define TCPC_ALERT_POWER_STATUS		BIT(1)
+#define TCPC_ALERT_CC_STATUS		BIT(0)
+
+#define TCPC_ALERT_MASK			0x12
+#define TCPC_FAULT_STATUS_MASK		0x15
+
+#define TCPC_TCPC_CTRL				0x19
+#define TCPC_TCPC_CTRL_BIST_MODE	BIT(1)
+#define TCPC_TCPC_CTRL_ORIENTATION	BIT(0)
+
+#define TCPC_ROLE_CTRL				0x1a
+#define TCPC_ROLE_CTRL_DRP			BIT(6)
+#define TCPC_ROLE_CTRL_RP_VAL_SHIFT	4
+#define TCPC_ROLE_CTRL_RP_VAL_MASK	0x3
+#define TCPC_ROLE_CTRL_RP_VAL_DEF	0x0
+#define TCPC_ROLE_CTRL_RP_VAL_1_5	0x1
+#define TCPC_ROLE_CTRL_RP_VAL_3_0	0x2
+#define TCPC_ROLE_CTRL_CC2_SHIFT	2
+#define TCPC_ROLE_CTRL_CC2_MASK		0x3
+#define TCPC_ROLE_CTRL_CC1_SHIFT	0
+#define TCPC_ROLE_CTRL_CC1_MASK		0x3
+#define TCPC_ROLE_CTRL_CC_RA		0x0
+#define TCPC_ROLE_CTRL_CC_RP		0x1
+#define TCPC_ROLE_CTRL_CC_RD		0x2
+#define TCPC_ROLE_CTRL_CC_OPEN		0x3
+
+#define TCPC_POWER_CTRL						0x1c
+#define TCPC_POWER_CTRL_EN_VCONN			BIT(0)
+#define TCPC_POWER_CTRL_VCONN_POWER			BIT(1)
+#define TCPC_POWER_CTRL_FORCE_DISCH			BIT(2)
+#define TCPC_POWER_CTRL_EN_BLEED_CH			BIT(3)
+#define TCPC_POWER_CTRL_AUTO_DISCH_DISCO	BIT(4)
+#define TCPC_POWER_CTRL_DIS_V_ALARMS		BIT(5)
+#define TCPC_POWER_CTRL_VBUS_V_MONITOR		BIT(6)
+
+#define TCPC_CC_STATUS					0x1d
+#define TCPC_CC_STATUS_LOOK4CONN		BIT(5)
+#define TCPC_CC_STATUS_TERM				BIT(4)
+#define TCPC_CC_STATUS_CC2_SHIFT		2
+#define TCPC_CC_STATUS_CC2_MASK			0x3
+#define TCPC_CC_STATUS_CC1_SHIFT		0
+#define TCPC_CC_STATUS_CC1_MASK			0x3
+
+#define TCPC_POWER_STATUS				0x1e
+#define TCPC_POWER_STATUS_UNINIT		BIT(6)
+#define TCPC_POWER_STATUS_VBUS_DET		BIT(3)
+#define TCPC_POWER_STATUS_VBUS_PRES		BIT(2)
+#define TCPC_POWER_STATUS_SINKING_VBUS	BIT(0)
+
+#define TCPC_FAULT_STATUS               0x1f
+
+#define TCPC_COMMAND					0x23
+#define TCPC_CMD_WAKE_I2C				0x11
+#define TCPC_CMD_DISABLE_VBUS_DETECT	0x22
+#define TCPC_CMD_ENABLE_VBUS_DETECT		0x33
+#define TCPC_CMD_DISABLE_SINK_VBUS		0x44
+#define TCPC_CMD_SINK_VBUS				0x55
+#define TCPC_CMD_DISABLE_SRC_VBUS		0x66
+#define TCPC_CMD_SRC_VBUS_DEFAULT		0x77
+#define TCPC_CMD_SRC_VBUS_HIGH			0x88
+#define TCPC_CMD_LOOK4CONNECTION		0x99
+#define TCPC_CMD_RXONEMORE				0xAA
+#define TCPC_CMD_I2C_IDLE				0xFF
+
+#define TCPC_DEV_CAP_1					0x24
+#define TCPC_DEV_CAP_2					0x26
+#define TCPC_STD_INPUT_CAP				0x28
+#define TCPC_STD_OUTPUT_CAP				0x29
+
+#define TCPC_MSG_HDR_INFO				0x2e
+#define TCPC_MSG_HDR_INFO_DATA_ROLE		BIT(3)
+#define TCPC_MSG_HDR_INFO_PWR_ROLE		BIT(0)
+#define TCPC_MSG_HDR_INFO_REV_SHIFT		1
+#define TCPC_MSG_HDR_INFO_REV_MASK		0x3
+
+#define TCPC_RX_DETECT					0x2f
+#define TCPC_RX_DETECT_HARD_RESET		BIT(5)
+#define TCPC_RX_DETECT_SOP				BIT(0)
+
+#define TCPC_RX_BYTE_CNT				0x30
+#define TCPC_RX_BUF_FRAME_TYPE			0x31
+#define TCPC_RX_HDR						0x32
+#define TCPC_RX_DATA					0x34 /* through 0x4f */
+
+#define TCPC_TRANSMIT					0x50
+#define TCPC_TRANSMIT_RETRY_SHIFT		4
+#define TCPC_TRANSMIT_RETRY_MASK		0x3
+#define TCPC_TRANSMIT_TYPE_SHIFT		0
+#define TCPC_TRANSMIT_TYPE_MASK			0x7
+
+#define TCPC_TX_BYTE_CNT				0x51
+#define TCPC_TX_HDR						0x52
+#define TCPC_TX_DATA					0x54 /* through 0x6f */
+
+#define TCPC_VBUS_VOLTAGE					0x70
+#define TCPC_VBUS_VOL_MASK					0x3ff
+#define TCPC_VBUS_VOL_SCALE_FACTOR_MASK		0xc00
+#define TCPC_VBUS_VOL_SCALE_FACTOR_SHIFT	10
+#define TCPC_VBUS_VOL_MV_UNIT				25
+
+#define TCPC_VBUS_SINK_DISCONNECT_THRESH	0x72
+#define TCPC_VBUS_STOP_DISCHARGE_THRESH		0x74
+#define TCPC_VBUS_VOLTAGE_ALARM_HI_CFG		0x76
+#define TCPC_VBUS_VOLTAGE_ALARM_LO_CFG		0x78
+
+enum typec_role {
+	TYPEC_SINK,
+	TYPEC_SOURCE,
+	TYPEC_ROLE_UNKNOWN,
+};
+
+enum typec_data_role {
+	TYPEC_DEVICE,
+	TYPEC_HOST,
+};
+
+enum typec_cc_polarity {
+	TYPEC_POLARITY_CC1,
+	TYPEC_POLARITY_CC2,
+};
+
+enum typec_cc_state {
+	TYPEC_STATE_OPEN,
+	TYPEC_STATE_SRC_BOTH_RA,
+	TYPEC_STATE_SRC_RD_RA,
+	TYPEC_STATE_SRC_RD,
+	TYPEC_STATE_SRC_RESERVED,
+	TYPEC_STATE_SNK_DEFAULT,
+	TYPEC_STATE_SNK_POWER15,
+	TYPEC_STATE_SNK_POWER30,
+};
+
+
+/* USB PD Messages */
+enum pd_ctrl_msg_type {
+	/* 0 Reserved */
+	PD_CTRL_GOOD_CRC = 1,
+	PD_CTRL_GOTO_MIN = 2,
+	PD_CTRL_ACCEPT = 3,
+	PD_CTRL_REJECT = 4,
+	PD_CTRL_PING = 5,
+	PD_CTRL_PS_RDY = 6,
+	PD_CTRL_GET_SOURCE_CAP = 7,
+	PD_CTRL_GET_SINK_CAP = 8,
+	PD_CTRL_DR_SWAP = 9,
+	PD_CTRL_PR_SWAP = 10,
+	PD_CTRL_VCONN_SWAP = 11,
+	PD_CTRL_WAIT = 12,
+	PD_CTRL_SOFT_RESET = 13,
+	/* 14-15 Reserved */
+};
+
+enum pd_data_msg_type {
+	/* 0 Reserved */
+	PD_DATA_SOURCE_CAP = 1,
+	PD_DATA_REQUEST = 2,
+	PD_DATA_BIST = 3,
+	PD_DATA_SINK_CAP = 4,
+	/* 5-14 Reserved */
+	PD_DATA_VENDOR_DEF = 15,
+};
+
+enum tcpc_transmit_type {
+	TCPC_TX_SOP = 0,
+	TCPC_TX_SOP_PRIME = 1,
+	TCPC_TX_SOP_PRIME_PRIME = 2,
+	TCPC_TX_SOP_DEBUG_PRIME = 3,
+	TCPC_TX_SOP_DEBUG_PRIME_PRIME = 4,
+	TCPC_TX_HARD_RESET = 5,
+	TCPC_TX_CABLE_RESET = 6,
+	TCPC_TX_BIST_MODE_2 = 7
+};
+
+enum pd_sink_state{
+	UNATTACH = 0,
+	ATTACHED,
+	WAIT_SOURCE_CAP,
+	WAIT_SOURCE_ACCEPT,
+	WAIT_SOURCE_READY,
+	SINK_READY,
+};
+
+
+#define PD_REV10        0x0
+#define PD_REV20        0x1
+
+#define PD_HEADER_CNT_SHIFT     12
+#define PD_HEADER_CNT_MASK      0x7
+#define PD_HEADER_ID_SHIFT      9
+#define PD_HEADER_ID_MASK       0x7
+#define PD_HEADER_PWR_ROLE      BIT(8)
+#define PD_HEADER_REV_SHIFT     6
+#define PD_HEADER_REV_MASK      0x3
+#define PD_HEADER_DATA_ROLE     BIT(5)
+#define PD_HEADER_TYPE_SHIFT    0
+#define PD_HEADER_TYPE_MASK     0xf
+
+#define PD_HEADER(type, pwr, data, id, cnt)                             \
+	((((type) & PD_HEADER_TYPE_MASK) << PD_HEADER_TYPE_SHIFT) |     \
+	 ((pwr) == TYPEC_SOURCE ? PD_HEADER_PWR_ROLE : 0) |             \
+	 ((data) == TYPEC_HOST ? PD_HEADER_DATA_ROLE : 0) |             \
+	 (PD_REV20 << PD_HEADER_REV_SHIFT) |                            \
+	 (((id) & PD_HEADER_ID_MASK) << PD_HEADER_ID_SHIFT) |           \
+	 (((cnt) & PD_HEADER_CNT_MASK) << PD_HEADER_CNT_SHIFT))
+
+
+static inline unsigned int pd_header_cnt(uint16_t header)
+{
+	return (header >> PD_HEADER_CNT_SHIFT) & PD_HEADER_CNT_MASK;
+}
+
+static inline unsigned int pd_header_cnt_le(__le16 header)
+{
+	return pd_header_cnt(le16_to_cpu(header));
+}
+
+static inline unsigned int pd_header_type(uint16_t header)
+{
+	return (header >> PD_HEADER_TYPE_SHIFT) & PD_HEADER_TYPE_MASK;
+}
+
+static inline unsigned int pd_header_type_le(__le16 header)
+{
+	return pd_header_type(le16_to_cpu(header));
+}
+
+#define PD_MAX_PAYLOAD          7
+
+struct pd_message {
+	uint8_t   frametype;
+	uint16_t  header;
+	uint32_t  payload[PD_MAX_PAYLOAD];
+} __packed;
+
+enum pd_pdo_type {
+	PDO_TYPE_FIXED = 0,
+	PDO_TYPE_BATT = 1,
+	PDO_TYPE_VAR = 2,
+};
+
+
+#define PDO_TYPE_SHIFT          30
+#define PDO_TYPE_MASK           0x3
+
+#define PDO_TYPE(t)     ((t) << PDO_TYPE_SHIFT)
+
+#define PDO_VOLT_MASK           0x3ff
+#define PDO_CURR_MASK           0x3ff
+#define PDO_PWR_MASK            0x3ff
+
+#define PDO_FIXED_DUAL_ROLE     BIT(29) /* Power role swap supported */
+#define PDO_FIXED_SUSPEND       BIT(28) /* USB Suspend supported (Source) */
+#define PDO_FIXED_HIGHER_CAP    BIT(28) /* Requires more than vSafe5V (Sink) */
+#define PDO_FIXED_EXTPOWER      BIT(27) /* Externally powered */
+#define PDO_FIXED_USB_COMM      BIT(26) /* USB communications capable */
+#define PDO_FIXED_DATA_SWAP     BIT(25) /* Data role swap supported */
+#define PDO_FIXED_VOLT_SHIFT    10      /* 50mV units */
+#define PDO_FIXED_CURR_SHIFT    0       /* 10mA units */
+
+#define PDO_FIXED_VOLT(mv)      ((((mv) / 50) & PDO_VOLT_MASK) << PDO_FIXED_VOLT_SHIFT)
+#define PDO_FIXED_CURR(ma)      ((((ma) / 10) & PDO_CURR_MASK) << PDO_FIXED_CURR_SHIFT)
+
+#define PDO_FIXED(mv, ma, flags)                        \
+	(PDO_TYPE(PDO_TYPE_FIXED) | (flags) |           \
+	 PDO_FIXED_VOLT(mv) | PDO_FIXED_CURR(ma))
+
+#define PDO_BATT_MAX_VOLT_SHIFT 20      /* 50mV units */
+#define PDO_BATT_MIN_VOLT_SHIFT 10      /* 50mV units */
+#define PDO_BATT_MAX_PWR_SHIFT  0       /* 250mW units */
+
+#define PDO_BATT_MIN_VOLT(mv) ((((mv) / 50) & PDO_VOLT_MASK) << PDO_BATT_MIN_VOLT_SHIFT)
+#define PDO_BATT_MAX_VOLT(mv) ((((mv) / 50) & PDO_VOLT_MASK) << PDO_BATT_MAX_VOLT_SHIFT)
+#define PDO_BATT_MAX_POWER(mw) ((((mw) / 250) & PDO_PWR_MASK) << PDO_BATT_MAX_PWR_SHIFT)
+
+#define PDO_BATT(min_mv, max_mv, max_mw)                        \
+	(PDO_TYPE(PDO_TYPE_BATT) | PDO_BATT_MIN_VOLT(min_mv) |  \
+	 PDO_BATT_MAX_VOLT(max_mv) | PDO_BATT_MAX_POWER(max_mw))
+
+#define PDO_VAR_MAX_VOLT_SHIFT  20      /* 50mV units */
+#define PDO_VAR_MIN_VOLT_SHIFT  10      /* 50mV units */
+#define PDO_VAR_MAX_CURR_SHIFT  0       /* 10mA units */
+
+#define PDO_VAR_MIN_VOLT(mv) ((((mv) / 50) & PDO_VOLT_MASK) << PDO_VAR_MIN_VOLT_SHIFT)
+#define PDO_VAR_MAX_VOLT(mv) ((((mv) / 50) & PDO_VOLT_MASK) << PDO_VAR_MAX_VOLT_SHIFT)
+#define PDO_VAR_MAX_CURR(ma) ((((ma) / 10) & PDO_CURR_MASK) << PDO_VAR_MAX_CURR_SHIFT)
+
+#define PDO_VAR(min_mv, max_mv, max_ma)                         \
+	(PDO_TYPE(PDO_TYPE_VAR) | PDO_VAR_MIN_VOLT(min_mv) |    \
+	 PDO_VAR_MAX_VOLT(max_mv) | PDO_VAR_MAX_CURR(max_ma))
+
+static inline enum pd_pdo_type pdo_type(uint32_t pdo)
+{
+	return (pdo >> PDO_TYPE_SHIFT) & PDO_TYPE_MASK;
+}
+
+static inline unsigned int pdo_fixed_voltage(uint32_t pdo)
+{
+	return ((pdo >> PDO_FIXED_VOLT_SHIFT) & PDO_VOLT_MASK) * 50;
+}
+
+static inline unsigned int pdo_min_voltage(uint32_t pdo)
+{
+	return ((pdo >> PDO_VAR_MIN_VOLT_SHIFT) & PDO_VOLT_MASK) * 50;
+}
+
+static inline unsigned int pdo_max_voltage(uint32_t pdo)
+{
+	return ((pdo >> PDO_VAR_MAX_VOLT_SHIFT) & PDO_VOLT_MASK) * 50;
+}
+
+static inline unsigned int pdo_max_current(uint32_t pdo)
+{
+	return ((pdo >> PDO_VAR_MAX_CURR_SHIFT) & PDO_CURR_MASK) * 10;
+}
+
+static inline unsigned int pdo_max_power(uint32_t pdo)
+{
+	return ((pdo >> PDO_BATT_MAX_PWR_SHIFT) & PDO_PWR_MASK) * 250;
+}
+
+/* RDO: Request Data Object */
+#define RDO_OBJ_POS_SHIFT       28
+#define RDO_OBJ_POS_MASK        0x7
+#define RDO_GIVE_BACK           BIT(27) /* Supports reduced operating current */
+#define RDO_CAP_MISMATCH        BIT(26) /* Not satisfied by source caps */
+#define RDO_USB_COMM            BIT(25) /* USB communications capable */
+#define RDO_NO_SUSPEND          BIT(24) /* USB Suspend not supported */
+
+#define RDO_PWR_MASK                    0x3ff
+#define RDO_CURR_MASK                   0x3ff
+
+#define RDO_FIXED_OP_CURR_SHIFT         10
+#define RDO_FIXED_MAX_CURR_SHIFT        0
+
+#define RDO_OBJ(idx) (((idx) & RDO_OBJ_POS_MASK) << RDO_OBJ_POS_SHIFT)
+
+#define PDO_FIXED_OP_CURR(ma) ((((ma) / 10) & RDO_CURR_MASK) << RDO_FIXED_OP_CURR_SHIFT)
+#define PDO_FIXED_MAX_CURR(ma) ((((ma) / 10) & RDO_CURR_MASK) << RDO_FIXED_MAX_CURR_SHIFT)
+
+#define RDO_FIXED(idx, op_ma, max_ma, flags)                    \
+	(RDO_OBJ(idx) | (flags) |                               \
+	 PDO_FIXED_OP_CURR(op_ma) | PDO_FIXED_MAX_CURR(max_ma))
+
+#define RDO_BATT_OP_PWR_SHIFT           10      /* 250mW units */
+#define RDO_BATT_MAX_PWR_SHIFT          0       /* 250mW units */
+
+#define RDO_BATT_OP_PWR(mw) ((((mw) / 250) & RDO_PWR_MASK) << RDO_BATT_OP_PWR_SHIFT)
+#define RDO_BATT_MAX_PWR(mw) ((((mw) / 250) & RDO_PWR_MASK) << RDO_BATT_MAX_PWR_SHIFT)
+
+#define RDO_BATT(idx, op_mw, max_mw, flags)                     \
+	(RDO_OBJ(idx) | (flags) |                               \
+	 RDO_BATT_OP_PWR(op_mw) | RDO_BATT_MAX_PWR(max_mw))
+
+static inline unsigned int rdo_index(u32 rdo)
+{
+	return (rdo >> RDO_OBJ_POS_SHIFT) & RDO_OBJ_POS_MASK;
+}
+
+static inline unsigned int rdo_op_current(u32 rdo)
+{
+	return ((rdo >> RDO_FIXED_OP_CURR_SHIFT) & RDO_CURR_MASK) * 10;
+}
+
+static inline unsigned int rdo_max_current(u32 rdo)
+{
+	return ((rdo >> RDO_FIXED_MAX_CURR_SHIFT) &
+			RDO_CURR_MASK) * 10;
+}
+
+static inline unsigned int rdo_op_power(u32 rdo)
+{
+	return ((rdo >> RDO_BATT_OP_PWR_SHIFT) & RDO_PWR_MASK) * 250;
+}
+
+static inline unsigned int rdo_max_power(u32 rdo)
+{
+	return ((rdo >> RDO_BATT_MAX_PWR_SHIFT) & RDO_PWR_MASK) * 250;
+}
+
+#define TCPC_LOG_BUFFER_SIZE 1024
+
+struct tcpc_port;
+
+typedef void (*ss_mux_sel)(enum typec_cc_polarity pol);
+typedef int (*ext_pd_switch_setup)(struct tcpc_port *port_p);
+
+enum tcpc_port_type {
+	TYPEC_PORT_DFP,
+	TYPEC_PORT_UFP,
+	TYPEC_PORT_DRP,
+};
+
+struct tcpc_port_config {
+	uint8_t i2c_bus;
+	uint8_t addr;
+	enum tcpc_port_type port_type;
+	uint32_t max_snk_mv;
+	uint32_t max_snk_ma;
+	uint32_t max_snk_mw;
+	uint32_t op_snk_mv;
+	bool disable_pd;
+	ext_pd_switch_setup switch_setup_func;
+};
+
+struct tcpc_port {
+	struct tcpc_port_config cfg;
+	struct udevice *i2c_dev;
+	ss_mux_sel ss_sel_func;
+	enum pd_sink_state pd_state;
+	uint32_t tx_msg_id;
+	uint32_t log_size;
+	char logbuffer[TCPC_LOG_BUFFER_SIZE];
+	char *log_p;
+	char *log_print;
+};
+
+int tcpc_set_cc_to_source(struct tcpc_port *port);
+int tcpc_set_cc_to_sink(struct tcpc_port *port);
+int tcpc_set_plug_orientation(struct tcpc_port *port, enum typec_cc_polarity polarity);
+int tcpc_get_cc_status(struct tcpc_port *port, enum typec_cc_polarity *polarity, enum typec_cc_state *state);
+int tcpc_clear_alert(struct tcpc_port *port, uint16_t clear_mask);
+int tcpc_send_command(struct tcpc_port *port, uint8_t command);
+int tcpc_polling_reg(struct tcpc_port *port, uint8_t reg,
+	uint8_t reg_width, uint16_t mask, uint16_t value, ulong timeout_ms);
+int tcpc_setup_dfp_mode(struct tcpc_port *port);
+int tcpc_setup_ufp_mode(struct tcpc_port *port);
+int tcpc_disable_src_vbus(struct tcpc_port *port);
+int tcpc_init(struct tcpc_port *port, struct tcpc_port_config config, ss_mux_sel ss_sel_func);
+bool tcpc_pd_sink_check_charging(struct tcpc_port *port);
+void tcpc_print_log(struct tcpc_port *port);
+
+#ifdef CONFIG_SPL_BUILD
+int tcpc_setup_ufp_mode(struct tcpc_port *port)
+{
+	return 0;
+}
+int tcpc_setup_dfp_mode(struct tcpc_port *port)
+{
+	return 0;
+}
+
+int tcpc_disable_src_vbus(struct tcpc_port *port)
+{
+	return 0;
+}
+#endif
+#endif /* __TCPCI_H */

