Index: b/drivers/thermal/sun8i_thermal.c
===================================================================
--- a/drivers/thermal/sun8i_thermal.c
+++ b/drivers/thermal/sun8i_thermal.c
@@ -29,12 +29,20 @@
 #define TEMP_CALIB_MASK				GENMASK(11, 0)
 #define CALIBRATE_DEFAULT			0x800
 
+#define SUN4I_THS_EN				0x04
+#define SUN4I_THS_PCR				0x08
+#define SUN4I_THS_INTC				0x10
+#define SUN4I_THS_INTS				0x20
+#define SUN4I_THS_MFC				0x30
+#define SUN4I_THS_CDATA				0xa0
+#define SUN4I_THS_DATA				0xc0
+
 #define SUN8I_THS_CTRL0				0x00
 #define SUN8I_THS_CTRL2				0x40
 #define SUN8I_THS_IC				0x44
 #define SUN8I_THS_IS				0x48
 #define SUN8I_THS_MFC				0x70
-#define SUN8I_THS_TEMP_CALIB			0x74
+#define SUN8I_THS_TEMP_CALIB		0x74
 #define SUN8I_THS_TEMP_DATA			0x80
 
 #define SUN50I_THS_CTRL0			0x00
@@ -106,6 +114,17 @@ static int sun50i_h5_calc_temp(struct th
 		return -1590 * reg / 10 + 276000;
 }
 
+static int sun4i_ths_reg2temp(struct ths_device *tmdev, int reg)
+{
+	return (reg + tmdev->chip->offset) * tmdev->chip->scale;
+}
+
+static int sun4i_t113_calc_temp(struct ths_device *tmdev,
+					int id, int reg)
+{
+	return sun4i_ths_reg2temp(tmdev, reg);
+}
+
 static int sun8i_ths_get_temp(struct thermal_zone_device *tz, int *temp)
 {
 	struct tsensor *s = thermal_zone_device_priv(tz);
@@ -362,11 +381,11 @@ static int sun8i_ths_resource_init(struc
 		tmdev->mod_clk = devm_clk_get_enabled(&pdev->dev, "mod");
 		if (IS_ERR(tmdev->mod_clk))
 			return PTR_ERR(tmdev->mod_clk);
-	}
 
-	ret = clk_set_rate(tmdev->mod_clk, 24000000);
-	if (ret)
-		return ret;
+		ret = clk_set_rate(tmdev->mod_clk, 24000000);
+		if (ret)
+			return ret;
+	}
 
 	ret = sun8i_ths_calibrate(tmdev);
 	if (ret)
@@ -453,6 +472,126 @@ static int sun50i_h6_thermal_init(struct
 	return 0;
 }
 
+static int sun4i_t113_ths_calibrate(struct ths_device *tmdev,
+	u16 *caldata, int callen)
+{
+	struct device *dev = tmdev->dev;
+	int i, ft_temp;
+
+	if (!caldata[0])
+		return -EINVAL;
+
+		/*
+	 * efuse layout:
+	 *
+	 * 0      11  16     27   32     43   48    57
+	 * +----------+-----------+-----------+-----------+
+	 * |  temp |  |sensor0|   |sensor1|   |sensor2|   |
+	 * +----------+-----------+-----------+-----------+
+	 *                      ^           ^           ^
+	 *                      |           |           |
+	 *                      |           |           sensor3[11:8]
+	 *                      |           sensor3[7:4]
+	 *                      sensor3[3:0]
+	 *
+	 * The calibration data on the H616 is the ambient temperature and
+	 * sensor values that are filled during the factory test stage.
+	 *
+	 * The unit of stored FT temperature is 0.1 degreee celusis.
+	 *
+	 * We need to calculate a delta between measured and caluclated
+	 * register values and this will become a calibration offset.
+	 */
+
+	 ft_temp = caldata[0] & FT_TEMP_MASK;
+
+	 for (i = 0; i < tmdev->chip->sensor_num; i++) {
+		int delta, cdata, offset, reg;
+
+		if (i == 3)
+			reg = (caldata[1] >> 12) |
+				  (caldata[2] >> 12 << 4) |
+				  (caldata[3] >> 12 << 8);
+		else
+			reg = (int)caldata[i + 1] & TEMP_CALIB_MASK;
+
+				/*
+		 * Our calculation formula is like this,
+		 * the temp unit above is Celsius:
+		 *
+		 * T = (sensor_data + a) / b
+		 * cdata = 0x800 - [(ft_temp - T) * b]
+		 *
+		 * b is a floating-point number
+		 * with an absolute value less than 1000.
+		 *
+		 * sunxi_ths_reg2temp uses milli-degrees Celsius,
+		 * with offset and scale parameters.
+		 * T = (sensor_data + a) * 1000 / b
+		 *
+		 * ----------------------------------------------
+		 *
+		 * So:
+		 *
+		 * offset = a, scale = 1000 / b
+		 * cdata = 0x800 - [(ft_temp - T) * 1000 / scale]
+		 */
+		
+		delta = (ft_temp * 100 - sun4i_ths_reg2temp(tmdev, reg)) / tmdev->chip->scale;
+		cdata = CALIBRATE_DEFAULT - delta;
+
+		if (cdata & ~TEMP_CALIB_MASK) {
+			dev_warn(dev, "sensor %d is not calibrated.\n", i);
+			continue;
+		}
+
+		offset = (i % 2) * 16;
+
+		regmap_update_bits(tmdev->regmap, 
+		SUN4I_THS_CDATA + (i / 2 * 4), 
+		0xfff << offset, 
+		cdata << offset);
+	}
+	
+	return 0;
+}
+
+static int sun4i_t113_thermal_init(struct ths_device *tmdev)
+{
+	uint32_t val;
+	int ret;
+
+	dev_info(tmdev->dev, "init\n");
+
+	regmap_write(tmdev->regmap, SUN8I_THS_CTRL0, 0x2f|0x1df << 16);
+
+	ret = regmap_read(tmdev->regmap, SUN4I_THS_PCR, &val);
+	if (ret) {
+		dev_err(tmdev->dev, "read pc register err:%d\n", ret);
+		return ret;
+	}
+
+	val &= ~(0xfffff << 12);
+	val |= 0x3a << 12;
+
+	regmap_write(tmdev->regmap, SUN4I_THS_PCR, val);
+
+	ret = regmap_read(tmdev->regmap, SUN4I_THS_MFC, &val);
+	if (ret) {
+		dev_err(tmdev->dev, "read mfc register err:%d\n", ret);
+		return ret;
+	}
+
+	val |= 1 << 2;
+	regmap_write(tmdev->regmap, SUN4I_THS_MFC, val);
+
+	regmap_write(tmdev->regmap, SUN4I_THS_INTC, 1);
+
+	regmap_write(tmdev->regmap, SUN4I_THS_EN,	1);
+
+	return 0;
+}
+
 static int sun8i_ths_register(struct ths_device *tmdev)
 {
 	int i;
@@ -486,6 +625,7 @@ static int sun8i_ths_probe(struct platfo
 
 	tmdev->dev = dev;
 	tmdev->chip = of_device_get_match_data(&pdev->dev);
+	
 	if (!tmdev->chip)
 		return -EINVAL;
 
@@ -606,6 +746,19 @@ static const struct ths_thermal_chip sun
 	.calc_temp = sun8i_ths_calc_temp,
 };
 
+static const struct ths_thermal_chip sun48_t113_ths = {
+	.sensor_num = 1,
+	.offset = -2800,
+	.scale = -67,
+	.ft_deviation = 8000,
+	.has_bus_clk_reset = true,
+	.temp_data_base = SUN4I_THS_DATA,
+	.calibrate = sun4i_t113_ths_calibrate,
+	.init = sun4i_t113_thermal_init,
+	.irq_ack = sun50i_h6_irq_ack,
+	.calc_temp = sun4i_t113_calc_temp,
+};
+
 static const struct of_device_id of_ths_match[] = {
 	{ .compatible = "allwinner,sun8i-a83t-ths", .data = &sun8i_a83t_ths },
 	{ .compatible = "allwinner,sun8i-h3-ths", .data = &sun8i_h3_ths },
@@ -614,6 +767,7 @@ static const struct of_device_id of_ths_
 	{ .compatible = "allwinner,sun50i-a100-ths", .data = &sun50i_a100_ths },
 	{ .compatible = "allwinner,sun50i-h5-ths", .data = &sun50i_h5_ths },
 	{ .compatible = "allwinner,sun50i-h6-ths", .data = &sun50i_h6_ths },
+	{ .compatible = "allwinner,sun4i-t113-ths", .data = &sun48_t113_ths},
 	{ /* sentinel */ },
 };
 MODULE_DEVICE_TABLE(of, of_ths_match);
