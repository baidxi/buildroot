mmc_kernel=kernel.itb
mmc_ubootpart=1
mmc_bootpart=2
mmc_rootpart=3

nand_kernel_offset=0x80000
nand_kernel_length=0x580000
nand_rootpart=2
nand_overlaypart=3

sf_kernel_offset=0x70000
sf_kernel_length=0x590000
sf_rootpart=2
sf_overlaypart=3

kernel_addr_r=0x81000000
ramdisk_addr_r=0x80708000
bootm_size=0x1000000

stderr=serial
stdin=serial
stdout=serial

boot_slot_0=empty
boot_slot_1=empty
scan_boot_slot_0=if mmc dev 0; then setenv boot_slot_0 mmc0; fi;
scan_boot_slot_1=if mmc dev 1; then setenv boot_slot_1 mmc1; else if sf probe; then setenv boot_slot_1 spi-nor; else if mtd list; then setenv boot_slot_1 spi-nand; fi; fi; fi;
scan_boot_slot=run scan_boot_slot_0; run scan_boot_slot_1; echo "========================="; echo "Boot Device: ${boot_device}"; echo "Boot Slot 0: ${boot_slot_0}"; echo "Boot Slot 1: ${boot_slot_1}"; echo "========================="; 

dfu_wait_timeout=3
mmc_dfu_info=setenv dfu_alt_info "all raw 0x0 0x37000;u-boot raw 0x10 0x7f0;boot part ${dfu_mmc_dev} ${mmc_bootpart};rom part ${dfu_mmc_dev} ${mmc_rootpart};kernel.itb fat ${dfu_mmc_dev} ${mmc_bootpart}"
nand_dfu_info=all raw 0x0 0x8000000;u-boot raw 0x0 0x80000;kernel.itb raw 0x80000 0x580000;rom raw 0x600000 0x2000000
nor_dfu_info=all raw 0x0 0x1000000;u-boot raw 0x0 0x70000;kernel.itb raw 0x70000 0x590000;rom raw 0x600000 0x700000
dfu_mmc=mmc dev ${dfu_mmc_dev}; run mmc_dfu_info; dfu 0 mmc ${dfu_mmc_dev} ${dfu_wait_timeout};
dfu_nand=setenv dfu_alt_info "${nand_dfu_info}"; dfu 0 mtd spi-nand0 ${dfu_wait_timeout};
dfu_nor=setenv dfu_alt_info "${nor_dfu_info}"; dfu 0 sf 0:0 ${dfu_wait_timeout};
dfu_boot=if test "${boot_slot_1}" = "spi-nand"; then echo "DFU waiting on SPI-NAND..."; run dfu_nand; fi; if test "${boot_slot_1}" = "spi-nor"; then echo "DFU waiting on SPI-NOR..."; run dfu_nor; fi; if test "${boot_slot_1}" = "mmc1"; then echo "DFU waiting on MMC1..."; setenv dfu_mmc_dev 1; run dfu_mmc; fi; if test "${boot_slot_1}" = "empty" && test "${boot_slot_0}" = "mmc0"; then echo "DFU waiting on MMC0..."; setenv dfu_mmc_dev 0; run dfu_mmc; fi;

fel_boot=echo "Booting from FEL..."; bootm ${kernel_addr_r} ${ramdisk_addr_r};
mmc_boot=mmc dev ${devnum}; echo "Booting from MMC${devnum}..."; load mmc ${devnum}:${mmc_bootpart} $kernel_addr_r ${mmc_kernel}; bootm ${kernel_addr_r};
nor_nand_boot=if test "${boot_slot_1}" = "spi-nor"; then run nor_boot; fi; if test "${boot_slot_1}" = "spi-nand"; then run nand_boot; fi;
nor_boot=echo "Booting from SPI-NOR..."; sf probe; sf read ${kernel_addr_r} ${sf_kernel_offset} ${sf_kernel_length}; bootm ${kernel_addr_r};
nand_boot=echo "Booting from SPI-NAND..."; mtd read spi-nand0 ${kernel_addr_r} ${nand_kernel_offset} ${nand_kernel_length}; bootm ${kernel_addr_r};

bootcmd_fel=if test "${boot_device}" = "fel"; then run fel_boot; fi;
bootcmd_dfu=if test "${boot_device}" != "mmc0" || test "${boot_slot_1}" = "empty"; then run dfu_boot; fi;
bootcmd_mmc0=if test "${boot_device}" = "mmc0"; then devnum=0; run mmc_boot; fi;
bootcmd_mmc1=if test "${boot_device}" = "mmc1"; then devnum=1; run mmc_boot; fi;
bootcmd_spi=if test "${boot_device}" = "spi"; then run nor_nand_boot; fi;
bootcmd_loopdfu=setenv dfu_wait_timeout; run bootcmd_dfu;

boot_targets=fel dfu mmc0 mmc1 spi loopdfu
bootcmd=run scan_boot_slot; for target in ${boot_targets}; do run bootcmd_${target}; done
