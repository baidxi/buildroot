#!/usr/bin/env python3

import sys
import logging
from copy import deepcopy


white  = lambda text: '\x1B[1;37m' + text + '\x1B[0m'
blue   = lambda text: '\x1B[1;34m' + text + '\x1B[0m'
green  = lambda text: '\x1B[1;32m' + text + '\x1B[0m'
yellow = lambda text: '\x1B[1;33m' + text + '\x1B[0m'
red    = lambda text: '\x1B[1;31m' + text + '\x1B[0m'
white_red = lambda text: '\x1B[47;31m' + text + '\x1B[0m'

LEVELNAME_PREFIX = '['
LEVELNAME_SUFFIX = ']'

DEBUG    = white('DEBUG').join([LEVELNAME_PREFIX, LEVELNAME_SUFFIX])
INFO     = blue('INFO').join([LEVELNAME_PREFIX, LEVELNAME_SUFFIX])
WARNING  = yellow('WARNING').join([LEVELNAME_PREFIX, LEVELNAME_SUFFIX])
ERROR    = red('ERROR').join([LEVELNAME_PREFIX, LEVELNAME_SUFFIX])
CRITICAL = white_red('CRITICAL').join([LEVELNAME_PREFIX, LEVELNAME_SUFFIX])


class Formatter(logging.Formatter):
    colorful_levelname = {
        logging.DEBUG:    DEBUG,
        logging.INFO:     INFO,
        logging.WARNING:  WARNING,
        logging.ERROR:    ERROR,
        logging.CRITICAL: CRITICAL
    }

    def __init__(self, msg, colorful=True):
        super().__init__(msg)
        self.colorful = colorful
        # print(colorful)

    def format(self, record:logging.LogRecord):
        # 如果直接修改 record，那么后续的 handler 将处理修改后的 record。
        # 因此这里深复制一份 record 供当前的 handler 处理。
        record = deepcopy(record)
        if self.colorful:
            try:
                record.levelname = self.colorful_levelname[record.levelno]
            except KeyError:
                record.levelname = record.levelname.join([LEVELNAME_PREFIX, LEVELNAME_SUFFIX])
        else:
            record.levelname = record.levelname.join([LEVELNAME_PREFIX, LEVELNAME_SUFFIX])

        return super().format(record)


class Logger(logging.getLoggerClass()):
    '''
    Inherit the standard Logger class, or the last class passed to 
    setLoggerClass() to ensure this customized Logger class will not undo 
    customizations already applied by other code.'''
    def __init__(self, name, level:int, filename:str=None):
        super().__init__(name, level)

        sh = logging.StreamHandler(sys.stdout) # logging to standard output
        sh.setLevel(level)
        sh_formatter = Formatter('%(levelname)s %(message)s')
        sh.setFormatter(sh_formatter)
        self.addHandler(sh)

        if filename is not None:
            fh = logging.FileHandler(filename)
            fh.setLevel(level)
            fh_formatter = Formatter('%(levelname)s %(message)s', False)
            fh.setFormatter(fh_formatter)
            self.addHandler(fh)


def __test():
    logger = Logger('pyclui', logging.NOTSET, 'log')
    logger.log(1, 'asdf')
    logger.debug('asdfs')
    logger.info('I told you so %d', 1)
    logger.warning('Watch out!')
    logger.error("an error occurrence！")
    logger.critical('asdf')


if __name__ == '__main__':
    __test()
