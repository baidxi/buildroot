From 69484374bd38463b65135d71794563ba9a67f8a6 Mon Sep 17 00:00:00 2001
From: Black-Seraph <admin@black-seraph.com>
Date: Thu, 8 Jun 2023 15:54:19 +0200
Subject: [PATCH 03/10] Add hotkey tap controller combo

---
 input/input_defines.h |  1 +
 input/input_driver.c  | 49 +++++++++++++++++++++++++++++++++++++++++++
 intl/msg_hash_us.h    |  4 ++++
 menu/menu_setting.c   |  3 +++
 msg_hash.h            |  1 +
 retroarch.c           | 10 +++++++++
 6 files changed, 68 insertions(+)

diff --git a/input/input_defines.h b/input/input_defines.h
index 5ba2f88fe8..cf80788faa 100644
--- a/input/input_defines.h
+++ b/input/input_defines.h
@@ -216,6 +216,7 @@ enum input_combo_type
    INPUT_COMBO_L_R,
    INPUT_COMBO_HOLD_START,
    INPUT_COMBO_HOLD_SELECT,
+   INPUT_COMBO_TAP_HOTKEY,
    INPUT_COMBO_DOWN_SELECT,
    INPUT_COMBO_L2_R2,
    INPUT_COMBO_LAST
diff --git a/input/input_driver.c b/input/input_driver.c
index a4e09fb604..94e8db7031 100644
--- a/input/input_driver.c
+++ b/input/input_driver.c
@@ -647,6 +647,8 @@ bool input_driver_button_combo(
       retro_time_t current_time,
       input_bits_t *p_input)
 {
+   static bool last_enable_hotkey_button_state = false;
+   static unsigned enable_hotkey_button_repeat = 0;
    switch (mode)
    {
       case INPUT_COMBO_DOWN_Y_L_R:
@@ -699,6 +701,53 @@ bool input_driver_button_combo(
       case INPUT_COMBO_HOLD_SELECT:
          return input_driver_button_combo_hold(
                INPUT_COMBO_HOLD_SELECT, RETRO_DEVICE_ID_JOYPAD_SELECT, current_time, p_input);
+      case INPUT_COMBO_TAP_HOTKEY:
+         {
+            bool current_enable_hotkey_button_state = BIT256_GET_PTR(p_input, RARCH_ENABLE_HOTKEY);
+
+            /* Pressing other buttons while this key is held down triggers this callback too.
+             * We need to suppress this, otherwise we just end up restarting the timer.
+             * Furthermore RA has a bug that causes a 2-frame button state error that needs working around. */
+            if (last_enable_hotkey_button_state != current_enable_hotkey_button_state)
+            {
+               last_enable_hotkey_button_state = current_enable_hotkey_button_state;
+               enable_hotkey_button_repeat = 1;
+            }
+            else if (enable_hotkey_button_repeat < 3)
+            {
+               enable_hotkey_button_repeat++;
+
+               if (enable_hotkey_button_repeat == 3)
+               {
+                  rarch_timer_t *timer = &input_driver_st.combo_timers[INPUT_COMBO_TAP_HOTKEY];
+
+                  if (!current_enable_hotkey_button_state)
+                  {
+                     /* timer only runs while the enable hotkey is held down */
+                     bool result = timer->timeout_us > 0;
+                     timer->timer_end   = true;
+                     timer->timer_begin = false;
+                     timer->timeout_end = 0;
+                     return result;
+                  }
+
+                  /* User started holding down the hotkey enable button, start the timer */
+                  if (!timer->timer_begin)
+                  {
+                     uint64_t current_usec = cpu_features_get_time_usec();
+                     timer->timeout_us     = 175000;
+                     timer->current        = current_usec;
+                     timer->timeout_end    = timer->current + timer->timeout_us;
+                     timer->timer_begin    = true;
+                     timer->timer_end      = false;
+                  }
+
+                  timer->current           = current_time;
+                  timer->timeout_us        = (timer->timeout_end - timer->current);
+               }
+            }
+         }
+         break;
       default:
       case INPUT_COMBO_NONE:
          break;
diff --git a/intl/msg_hash_us.h b/intl/msg_hash_us.h
index edd6144ff0..f923f119a4 100644
--- a/intl/msg_hash_us.h
+++ b/intl/msg_hash_us.h
@@ -10929,6 +10929,10 @@ MSG_HASH(
    MENU_ENUM_LABEL_VALUE_HOLD_SELECT,
    "Hold Select (2 seconds)"
    )
+MSG_HASH(
+   MENU_ENUM_LABEL_VALUE_TAP_HOTKEY,
+   "Tap Hotkey (< 175ms down time)"
+   )
 MSG_HASH(
    MENU_ENUM_LABEL_VALUE_DOWN_SELECT,
    "Down + Select"
diff --git a/menu/menu_setting.c b/menu/menu_setting.c
index 19929bcced..8e4a9660ae 100644
--- a/menu/menu_setting.c
+++ b/menu/menu_setting.c
@@ -7066,6 +7066,9 @@ static void setting_get_string_representation_gamepad_combo(
       case INPUT_COMBO_HOLD_SELECT:
          strlcpy(s, msg_hash_to_str(MENU_ENUM_LABEL_VALUE_HOLD_SELECT), len);
          break;
+      case INPUT_COMBO_TAP_HOTKEY:
+         strlcpy(s, msg_hash_to_str(MENU_ENUM_LABEL_VALUE_TAP_HOTKEY), len);
+         break;
       case INPUT_COMBO_DOWN_SELECT:
          strlcpy(s, msg_hash_to_str(MENU_ENUM_LABEL_VALUE_DOWN_SELECT), len);
          break;
diff --git a/msg_hash.h b/msg_hash.h
index 822bfa72b4..41fef3f6fd 100644
--- a/msg_hash.h
+++ b/msg_hash.h
@@ -4134,6 +4134,7 @@ enum msg_hash_enums
    MENU_ENUM_LABEL_VALUE_L_R,
    MENU_ENUM_LABEL_VALUE_HOLD_START,
    MENU_ENUM_LABEL_VALUE_HOLD_SELECT,
+   MENU_ENUM_LABEL_VALUE_TAP_HOTKEY,
    MENU_ENUM_LABEL_VALUE_DOWN_SELECT,
    MENU_ENUM_LABEL_VALUE_L2_R2,
 
diff --git a/retroarch.c b/retroarch.c
index 691d0ffd3a..6b843d128a 100644
--- a/retroarch.c
+++ b/retroarch.c
@@ -3062,6 +3062,8 @@ bool command_event(enum event_command cmd, void *data)
    settings_t *settings            = config_get_ptr();
    recording_state_t *recording_st = recording_state_get_ptr();
 
+   bool cancel_hotkey_tap_quit_combo = true;
+
    switch (cmd)
    {
       case CMD_EVENT_SAVE_FILES:
@@ -5456,6 +5458,14 @@ bool command_event(enum event_command cmd, void *data)
       /* Deprecated */
       case CMD_EVENT_SEND_DEBUG_INFO:
          break;
+
+      default:
+         cancel_hotkey_tap_quit_combo = false;
+   }
+
+   if (cancel_hotkey_tap_quit_combo)
+   {
+      input_state_get_ptr()->combo_timers[INPUT_COMBO_TAP_HOTKEY].timeout_us = 0;
    }
 
    return true;
-- 
2.34.1

